/**
 * CoffeeScript Compiler v0.1.5
 * http://coffeescript.org
 *
 * Copyright 2011, Jeremy Ashkenas
 * Released under the MIT License
 */
(function(root) {
  var CoffeeScript = function() {
    function require(path){ return require[path]; }
    require['./helpers'] = new function() {
  var exports = this;
  // Generated by Caffeine 0.1.5
(function() {
  var extend, flatten;

  exports.starts = function(string, literal, start) {
    return literal === string.substr(start, literal.length);
  };

  exports.ends = function(string, literal, back) {
    var len;
    len = literal.length;
    return literal === string.substr(string.length - len - (back || 0), len);
  };

  exports.compact = function(array) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (item) _results.push(item);
    }
    return _results;
  };

  exports.count = function(string, substr) {
    var num, pos;
    num = pos = 0;
    if (!substr.length) return 1 / 0;
    while (pos = 1 + string.indexOf(substr, pos)) {
      num++;
    }
    return num;
  };

  exports.merge = function(options, overrides) {
    return extend(extend({}, options), overrides);
  };

  extend = exports.extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  exports.flatten = flatten = function(array) {
    var element, flattened, _i, _len;
    flattened = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      element = array[_i];
      if (element instanceof Array) {
        flattened = flattened.concat(flatten(element));
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  };

  exports.del = function(obj, key) {
    var val;
    val = obj[key];
    delete obj[key];
    return val;
  };

  exports.last = function(array, back) {
    return array[array.length - (back || 0) - 1];
  };

}).call(this);

};require['./rewriter'] = new function() {
  var exports = this;
  // Generated by Caffeine 0.1.5
(function() {
  var BALANCED_PAIRS, EXPRESSION_CLOSE, EXPRESSION_END, EXPRESSION_START, IMPLICIT_BLOCK, IMPLICIT_CALL, IMPLICIT_END, IMPLICIT_FUNC, IMPLICIT_UNSPACED_CALL, INVERSES, LINEBREAKS, SINGLE_CLOSERS, SINGLE_LINERS, left, rite, _i, _len, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  exports.Rewriter = (function() {

    Rewriter.name = 'Rewriter';

    function Rewriter() {}

    Rewriter.prototype.rewrite = function(tokens) {
      this.tokens = tokens;
      this.removeLeadingNewlines();
      this.removeMidExpressionNewlines();
      this.closeOpenCalls();
      this.closeOpenIndexes();
      this.addImplicitIndentation();
      this.tagPostfixConditionals();
      this.addImplicitBraces();
      this.addImplicitParentheses();
      return this.tokens;
    };

    Rewriter.prototype.scanTokens = function(block) {
      var i, token, tokens;
      tokens = this.tokens;
      i = 0;
      while (token = tokens[i]) {
        i += block.call(this, token, i, tokens);
      }
      return true;
    };

    Rewriter.prototype.detectEnd = function(i, condition, action) {
      var levels, token, tokens, _ref, _ref2;
      tokens = this.tokens;
      levels = 0;
      while (token = tokens[i]) {
        if (levels === 0 && condition.call(this, token, i)) {
          return action.call(this, token, i);
        }
        if (!token || levels < 0) return action.call(this, token, i - 1);
        if (_ref = token[0], __indexOf.call(EXPRESSION_START, _ref) >= 0) {
          levels += 1;
        } else if (_ref2 = token[0], __indexOf.call(EXPRESSION_END, _ref2) >= 0) {
          levels -= 1;
        }
        i += 1;
      }
      return i - 1;
    };

    Rewriter.prototype.removeLeadingNewlines = function() {
      var i, tag, _i, _len, _ref;
      _ref = this.tokens;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        tag = _ref[i][0];
        if (tag !== 'TERMINATOR') break;
      }
      if (i) return this.tokens.splice(0, i);
    };

    Rewriter.prototype.removeMidExpressionNewlines = function() {
      return this.scanTokens(function(token, i, tokens) {
        var _ref;
        if (!(token[0] === 'TERMINATOR' && (_ref = this.tag(i + 1), __indexOf.call(EXPRESSION_CLOSE, _ref) >= 0))) {
          return 1;
        }
        tokens.splice(i, 1);
        return 0;
      });
    };

    Rewriter.prototype.closeOpenCalls = function() {
      var action, condition;
      condition = function(token, i) {
        var _ref;
        return ((_ref = token[0]) === ')' || _ref === 'CALL_END') || token[0] === 'OUTDENT' && this.tag(i - 1) === ')';
      };
      action = function(token, i) {
        return this.tokens[token[0] === 'OUTDENT' ? i - 1 : i][0] = 'CALL_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'CALL_START') this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.closeOpenIndexes = function() {
      var action, condition;
      condition = function(token, i) {
        var _ref;
        return (_ref = token[0]) === ']' || _ref === 'INDEX_END';
      };
      action = function(token, i) {
        return token[0] = 'INDEX_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'INDEX_START') this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.addImplicitBraces = function() {
      var action, condition, sameLine, stack, start, startIndent, startsLine;
      stack = [];
      start = null;
      startsLine = null;
      sameLine = true;
      startIndent = 0;
      condition = function(token, i) {
        var one, tag, three, two, _ref, _ref2;
        _ref = this.tokens.slice(i + 1, (i + 3) + 1 || 9e9), one = _ref[0], two = _ref[1], three = _ref[2];
        if ('HERECOMMENT' === (one != null ? one[0] : void 0)) return false;
        tag = token[0];
        if (__indexOf.call(LINEBREAKS, tag) >= 0) sameLine = false;
        return (((tag === 'TERMINATOR' || tag === 'OUTDENT') || (__indexOf.call(IMPLICIT_END, tag) >= 0 && sameLine)) && ((!startsLine && this.tag(i - 1) !== ',') || !((two != null ? two[0] : void 0) === ':' || (one != null ? one[0] : void 0) === '@' && (three != null ? three[0] : void 0) === ':'))) || (tag === ',' && one && ((_ref2 = one[0]) !== 'IDENTIFIER' && _ref2 !== 'NUMBER' && _ref2 !== 'STRING' && _ref2 !== '@' && _ref2 !== 'TERMINATOR' && _ref2 !== 'OUTDENT'));
      };
      action = function(token, i) {
        var tok;
        tok = this.generate('}', '}', token[2]);
        return this.tokens.splice(i, 0, tok);
      };
      return this.scanTokens(function(token, i, tokens) {
        var ago, idx, prevTag, tag, tok, value, _ref, _ref2;
        if (_ref = (tag = token[0]), __indexOf.call(EXPRESSION_START, _ref) >= 0) {
          stack.push([(tag === 'INDENT' && this.tag(i - 1) === '{' ? '{' : tag), i]);
          return 1;
        }
        if (__indexOf.call(EXPRESSION_END, tag) >= 0) {
          start = stack.pop();
          return 1;
        }
        if (!(tag === ':' && ((ago = this.tag(i - 2)) === ':' || ((_ref2 = stack[stack.length - 1]) != null ? _ref2[0] : void 0) !== '{'))) {
          return 1;
        }
        sameLine = true;
        stack.push(['{']);
        idx = ago === '@' ? i - 2 : i - 1;
        while (this.tag(idx - 2) === 'HERECOMMENT') {
          idx -= 2;
        }
        prevTag = this.tag(idx - 1);
        startsLine = !prevTag || (__indexOf.call(LINEBREAKS, prevTag) >= 0);
        value = new String('{');
        value.generated = true;
        tok = this.generate('{', value, token[2]);
        tokens.splice(idx, 0, tok);
        this.detectEnd(i + 2, condition, action);
        return 2;
      });
    };

    Rewriter.prototype.addImplicitParentheses = function() {
      var action, condition, noCall, seenControl, seenSingle;
      noCall = seenSingle = seenControl = false;
      condition = function(token, i) {
        var post, tag, _ref, _ref2;
        tag = token[0];
        if (!seenSingle && token.fromThen) return true;
        if (tag === 'IF' || tag === 'ELSE' || tag === 'CATCH' || tag === '->' || tag === '=>' || tag === 'CLASS') {
          seenSingle = true;
        }
        if (tag === 'IF' || tag === 'ELSE' || tag === 'SWITCH' || tag === 'TRY' || tag === '=') {
          seenControl = true;
        }
        if ((tag === '.' || tag === '?.' || tag === '::') && this.tag(i - 1) === 'OUTDENT') {
          return true;
        }
        return !token.generated && this.tag(i - 1) !== ',' && (__indexOf.call(IMPLICIT_END, tag) >= 0 || (tag === 'INDENT' && !seenControl)) && (tag !== 'INDENT' || (((_ref = this.tag(i - 2)) !== 'CLASS' && _ref !== 'EXTENDS') && (_ref2 = this.tag(i - 1), __indexOf.call(IMPLICIT_BLOCK, _ref2) < 0) && !((post = this.tokens[i + 1]) && post.generated && post[0] === '{')));
      };
      action = function(token, i) {
        return this.tokens.splice(i, 0, this.generate('CALL_END', ')', token[2]));
      };
      return this.scanTokens(function(token, i, tokens) {
        var callObject, current, next, prev, tag, _ref, _ref2, _ref3;
        tag = token[0];
        if (tag === 'CLASS' || tag === 'IF') noCall = true;
        _ref = tokens.slice(i - 1, (i + 1) + 1 || 9e9), prev = _ref[0], current = _ref[1], next = _ref[2];
        callObject = !noCall && tag === 'INDENT' && next && next.generated && next[0] === '{' && prev && (_ref2 = prev[0], __indexOf.call(IMPLICIT_FUNC, _ref2) >= 0);
        seenSingle = false;
        seenControl = false;
        if (__indexOf.call(LINEBREAKS, tag) >= 0) noCall = false;
        if (prev && !prev.spaced && tag === '?') token.call = true;
        if (token.fromThen) return 1;
        if (!(callObject || (prev != null ? prev.spaced : void 0) && (prev.call || (_ref3 = prev[0], __indexOf.call(IMPLICIT_FUNC, _ref3) >= 0)) && (__indexOf.call(IMPLICIT_CALL, tag) >= 0 || !(token.spaced || token.newLine) && __indexOf.call(IMPLICIT_UNSPACED_CALL, tag) >= 0))) {
          return 1;
        }
        tokens.splice(i, 0, this.generate('CALL_START', '(', token[2]));
        this.detectEnd(i + 1, condition, action);
        if (prev[0] === '?') prev[0] = 'FUNC_EXIST';
        return 2;
      });
    };

    Rewriter.prototype.addImplicitIndentation = function() {
      var action, condition, indent, outdent, starter;
      starter = indent = outdent = null;
      condition = function(token, i) {
        var _ref;
        return token[1] !== ';' && (_ref = token[0], __indexOf.call(SINGLE_CLOSERS, _ref) >= 0) && !(token[0] === 'ELSE' && (starter !== 'IF' && starter !== 'THEN'));
      };
      action = function(token, i) {
        return this.tokens.splice((this.tag(i - 1) === ',' ? i - 1 : i), 0, outdent);
      };
      return this.scanTokens(function(token, i, tokens) {
        var tag, _ref, _ref2;
        tag = token[0];
        if (tag === 'TERMINATOR' && this.tag(i + 1) === 'THEN') {
          tokens.splice(i, 1);
          return 0;
        }
        if (tag === 'ELSE' && this.tag(i - 1) !== 'OUTDENT') {
          tokens.splice.apply(tokens, [i, 0].concat(__slice.call(this.indentation(token))));
          return 2;
        }
        if (tag === 'CATCH' && ((_ref = this.tag(i + 2)) === 'OUTDENT' || _ref === 'TERMINATOR' || _ref === 'FINALLY')) {
          tokens.splice.apply(tokens, [i + 2, 0].concat(__slice.call(this.indentation(token))));
          return 4;
        }
        if (__indexOf.call(SINGLE_LINERS, tag) >= 0 && this.tag(i + 1) !== 'INDENT' && !(tag === 'ELSE' && this.tag(i + 1) === 'IF')) {
          starter = tag;
          _ref2 = this.indentation(token, true), indent = _ref2[0], outdent = _ref2[1];
          if (starter === 'THEN') indent.fromThen = true;
          tokens.splice(i + 1, 0, indent);
          this.detectEnd(i + 2, condition, action);
          if (tag === 'THEN') tokens.splice(i, 1);
          return 1;
        }
        return 1;
      });
    };

    Rewriter.prototype.tagPostfixConditionals = function() {
      var action, condition, original;
      original = null;
      condition = function(token, i) {
        var _ref;
        return (_ref = token[0]) === 'TERMINATOR' || _ref === 'INDENT';
      };
      action = function(token, i) {
        if (token[0] !== 'INDENT' || (token.generated && !token.fromThen)) {
          return original[0] = 'POST_' + original[0];
        }
      };
      return this.scanTokens(function(token, i) {
        if (token[0] !== 'IF') return 1;
        original = token;
        this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.indentation = function(token, implicit) {
      var indent, outdent;
      if (implicit == null) implicit = false;
      indent = ['INDENT', 2, token[2]];
      outdent = ['OUTDENT', 2, token[2]];
      if (implicit) indent.generated = outdent.generated = true;
      return [indent, outdent];
    };

    Rewriter.prototype.generate = function(tag, value, line) {
      var tok;
      tok = [tag, value, line];
      tok.generated = true;
      return tok;
    };

    Rewriter.prototype.tag = function(i) {
      var _ref;
      return (_ref = this.tokens[i]) != null ? _ref[0] : void 0;
    };

    return Rewriter;
  })();

  BALANCED_PAIRS = [['(', ')'], ['[', ']'], ['{', '}'], ['INDENT', 'OUTDENT'], ['CALL_START', 'CALL_END'], ['PARAM_START', 'PARAM_END'], ['INDEX_START', 'INDEX_END']];

  exports.INVERSES = INVERSES = {};

  EXPRESSION_START = [];

  EXPRESSION_END = [];

  for (_i = 0, _len = BALANCED_PAIRS.length; _i < _len; _i++) {
    _ref = BALANCED_PAIRS[_i], left = _ref[0], rite = _ref[1];
    EXPRESSION_START.push(INVERSES[rite] = left);
    EXPRESSION_END.push(INVERSES[left] = rite);
  }

  EXPRESSION_CLOSE = ['CATCH', 'WHEN', 'ELSE', 'FINALLY'].concat(EXPRESSION_END);

  IMPLICIT_FUNC = ['IDENTIFIER', 'SUPER', ')', 'CALL_END', ']', 'INDEX_END', '@', 'THIS'];

  IMPLICIT_CALL = ['IDENTIFIER', 'NUMBER', 'STRING', 'JS', 'REGEX', 'NEW', 'PARAM_START', 'CLASS', 'IF', 'TRY', 'SWITCH', 'THIS', 'BOOL', 'UNARY', 'SUPER', '@', '->', '=>', '[', '(', '{', '--', '++'];

  IMPLICIT_UNSPACED_CALL = ['+', '-'];

  IMPLICIT_BLOCK = ['->', '=>', '{', '[', ','];

  IMPLICIT_END = ['POST_IF', 'FOR', 'WHILE', 'UNTIL', 'WHEN', 'BY', 'LOOP', 'TERMINATOR'];

  SINGLE_LINERS = ['ELSE', '->', '=>', 'TRY', 'FINALLY', 'THEN'];

  SINGLE_CLOSERS = ['TERMINATOR', 'CATCH', 'FINALLY', 'ELSE', 'OUTDENT', 'LEADING_WHEN'];

  LINEBREAKS = ['TERMINATOR', 'INDENT', 'OUTDENT'];

}).call(this);

};require['./lexer'] = new function() {
  var exports = this;
  // Generated by Caffeine 0.1.5
(function() {
  var BOOL, CALLABLE, CODE, COFFEE_ALIASES, COFFEE_ALIAS_MAP, COFFEE_KEYWORDS, COMMENT, COMPARE, COMPOUND_ASSIGN, HEREDOC, HEREDOC_ILLEGAL, HEREDOC_INDENT, HEREGEX, HEREGEX_OMIT, IDENTIFIER, INDEXABLE, INVERSES, JSTOKEN, JS_FORBIDDEN, JS_KEYWORDS, LINE_BREAK, LINE_CONTINUER, LOGIC, Lexer, MATH, MULTILINER, MULTI_DENT, NOT_REGEX, NOT_SPACED_REGEX, NUMBER, OPERATOR, REGEX, RELATION, RESERVED, Rewriter, SHIFT, SIMPLESTR, STRICT_PROSCRIBED, TRAILING_SPACES, UNARY, WHITESPACE, compact, count, key, last, starts, _ref, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ref = require('./rewriter'), Rewriter = _ref.Rewriter, INVERSES = _ref.INVERSES;

  _ref2 = require('./helpers'), count = _ref2.count, starts = _ref2.starts, compact = _ref2.compact, last = _ref2.last;

  exports.Lexer = Lexer = (function() {

    Lexer.name = 'Lexer';

    function Lexer() {}

    Lexer.prototype.tokenize = function(code, opts) {
      var i, tag;
      if (opts == null) opts = {};
      if (WHITESPACE.test(code)) code = "\n" + code;
      code = code.replace(/\r/g, '').replace(TRAILING_SPACES, '');
      this.code = code;
      this.line = opts.line || 0;
      this.indent = 0;
      this.indebt = 0;
      this.outdebt = 0;
      this.indents = [];
      this.ends = [];
      this.tokens = [];
      i = 0;
      while (this.chunk = code.slice(i)) {
        i += this.identifierToken() || this.commentToken() || this.whitespaceToken() || this.lineToken() || this.heredocToken() || this.stringToken() || this.numberToken() || this.regexToken() || this.jsToken() || this.literalToken();
      }
      this.closeIndentation();
      if (tag = this.ends.pop()) this.error("missing " + tag);
      if (opts.rewrite === false) return this.tokens;
      return (new Rewriter).rewrite(this.tokens);
    };

    Lexer.prototype.identifierToken = function() {
      var colon, forcedIdentifier, id, input, match, prev, tag, _ref3, _ref4;
      if (!(match = IDENTIFIER.exec(this.chunk))) return 0;
      input = match[0], id = match[1], colon = match[2];
      if (id === 'own' && this.tag() === 'FOR') {
        this.token('OWN', id);
        return id.length;
      }
      forcedIdentifier = colon || (prev = last(this.tokens)) && (((_ref3 = prev[0]) === '.' || _ref3 === '?.' || _ref3 === '::') || !prev.spaced && prev[0] === '@');
      tag = 'IDENTIFIER';
      if (!forcedIdentifier && (__indexOf.call(JS_KEYWORDS, id) >= 0 || __indexOf.call(COFFEE_KEYWORDS, id) >= 0)) {
        tag = id.toUpperCase();
        if (tag === 'WHEN' && (_ref4 = this.tag(), __indexOf.call(LINE_BREAK, _ref4) >= 0)) {
          tag = 'LEADING_WHEN';
        } else if (tag === 'FOR') {
          this.seenFor = true;
        } else if (tag === 'UNLESS') {
          tag = 'IF';
        } else if (__indexOf.call(UNARY, tag) >= 0) {
          tag = 'UNARY';
        } else if (__indexOf.call(RELATION, tag) >= 0) {
          if (tag !== 'INSTANCEOF' && this.seenFor) {
            tag = 'FOR' + tag;
            this.seenFor = false;
          } else {
            tag = 'RELATION';
            if (this.value() === '!') {
              this.tokens.pop();
              id = '!' + id;
            }
          }
        }
      }
      if (__indexOf.call(JS_FORBIDDEN, id) >= 0) {
        if (forcedIdentifier) {
          tag = 'IDENTIFIER';
          id = new String(id);
          id.reserved = true;
        } else if (__indexOf.call(RESERVED, id) >= 0) {
          this.error("reserved word \"" + id + "\"");
        }
      }
      if (!forcedIdentifier) {
        if (__indexOf.call(COFFEE_ALIASES, id) >= 0) id = COFFEE_ALIAS_MAP[id];
        tag = (function() {
          switch (id) {
            case '!':
              return 'UNARY';
            case '==':
            case '!=':
              return 'COMPARE';
            case '&&':
            case '||':
              return 'LOGIC';
            case 'true':
            case 'false':
            case 'null':
            case 'undefined':
              return 'BOOL';
            case 'break':
            case 'continue':
              return 'STATEMENT';
            default:
              return tag;
          }
        })();
      }
      this.token(tag, id);
      if (colon) this.token(':', ':');
      return input.length;
    };

    Lexer.prototype.numberToken = function() {
      var binaryLiteral, lexedLength, match, number, octalLiteral;
      if (!(match = NUMBER.exec(this.chunk))) return 0;
      number = match[0];
      if (/E/.test(number)) {
        this.error("exponential notation '" + number + "' must be indicated with a lowercase 'e'");
      } else if (/[BOX]/.test(number)) {
        this.error("radix prefixes must be lowercase '" + number + "'");
      } else if (/^0[89]/.test(number)) {
        this.error("decimal literals '" + number + "' must not be prefixed with '0'");
      } else if (/^0[0-7]/.test(number)) {
        this.error("octal literals '" + number + "' must be prefixed with '0o'");
      }
      lexedLength = number.length;
      if (octalLiteral = /0o([0-7]+)/.exec(number)) {
        number = (parseInt(octalLiteral[1], 8)).toString();
      }
      if (binaryLiteral = /0b([01]+)/.exec(number)) {
        number = (parseInt(binaryLiteral[1], 2)).toString();
      }
      this.token('NUMBER', number);
      return lexedLength;
    };

    Lexer.prototype.stringToken = function() {
      var match, octalEsc, string;
      switch (this.chunk.charAt(0)) {
        case "'":
          if (!(match = SIMPLESTR.exec(this.chunk))) return 0;
          this.token('STRING', (string = match[0]).replace(MULTILINER, '\\\n'));
          break;
        case '"':
          if (!(string = this.balancedString(this.chunk, '"'))) return 0;
          if (0 < string.indexOf('#{', 1)) {
            this.interpolateString(string.slice(1, -1));
          } else {
            this.token('STRING', this.escapeLines(string));
          }
          break;
        default:
          return 0;
      }
      if (octalEsc = /^(?:\\.|[^\\])*\\[0-7]/.test(string)) {
        this.error("octal escape sequences " + string + " are not allowed");
      }
      this.line += count(string, '\n');
      return string.length;
    };

    Lexer.prototype.heredocToken = function() {
      var doc, heredoc, match, quote;
      if (!(match = HEREDOC.exec(this.chunk))) return 0;
      heredoc = match[0];
      quote = heredoc.charAt(0);
      doc = this.sanitizeHeredoc(match[2], {
        quote: quote,
        indent: null
      });
      if (quote === '"' && 0 <= doc.indexOf('#{')) {
        this.interpolateString(doc, {
          heredoc: true
        });
      } else {
        this.token('STRING', this.makeString(doc, quote, true));
      }
      this.line += count(heredoc, '\n');
      return heredoc.length;
    };

    Lexer.prototype.commentToken = function() {
      var comment, here, match;
      if (!(match = this.chunk.match(COMMENT))) return 0;
      comment = match[0], here = match[1];
      if (here) {
        this.token('HERECOMMENT', this.sanitizeHeredoc(here, {
          herecomment: true,
          indent: Array(this.indent + 1).join(' ')
        }));
      }
      this.line += count(comment, '\n');
      return comment.length;
    };

    Lexer.prototype.jsToken = function() {
      var match, script;
      if (!(this.chunk.charAt(0) === '`' && (match = JSTOKEN.exec(this.chunk)))) {
        return 0;
      }
      this.token('JS', (script = match[0]).slice(1, -1));
      return script.length;
    };

    Lexer.prototype.regexToken = function() {
      var flags, length, match, prev, regex, _ref3, _ref4;
      if (this.lockImport) return 0;
      if (this.chunk.charAt(0) !== '/') return 0;
      if (match = HEREGEX.exec(this.chunk)) {
        length = this.heregexToken(match);
        this.line += count(match[0], '\n');
        return length;
      }
      prev = last(this.tokens);
      if (prev && (_ref3 = prev[0], __indexOf.call((prev.spaced ? NOT_REGEX : NOT_SPACED_REGEX), _ref3) >= 0)) {
        return 0;
      }
      if (!(match = REGEX.exec(this.chunk))) return 0;
      _ref4 = match, match = _ref4[0], regex = _ref4[1], flags = _ref4[2];
      if (regex.slice(0, 2) === '/*') {
        this.error('regular expressions cannot begin with `*`');
      }
      if (regex === '//') regex = '/(?:)/';
      this.token('REGEX', "" + regex + flags);
      return match.length;
    };

    Lexer.prototype.heregexToken = function(match) {
      var body, flags, heregex, re, tag, tokens, value, _i, _len, _ref3, _ref4, _ref5, _ref6;
      if (this.lockImport) return 0;
      heregex = match[0], body = match[1], flags = match[2];
      if (0 > body.indexOf('#{')) {
        re = body.replace(HEREGEX_OMIT, '').replace(/\//g, '\\/');
        if (re.match(/^\*/)) {
          this.error('regular expressions cannot begin with `*`');
        }
        this.token('REGEX', "/" + (re || '(?:)') + "/" + flags);
        return heregex.length;
      }
      this.token('IDENTIFIER', 'RegExp');
      this.tokens.push(['CALL_START', '(']);
      tokens = [];
      _ref3 = this.interpolateString(body, {
        regex: true
      });
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        _ref4 = _ref3[_i], tag = _ref4[0], value = _ref4[1];
        if (tag === 'TOKENS') {
          tokens.push.apply(tokens, value);
        } else {
          if (!(value = value.replace(HEREGEX_OMIT, ''))) continue;
          value = value.replace(/\\/g, '\\\\');
          tokens.push(['STRING', this.makeString(value, '"', true)]);
        }
        tokens.push(['+', '+']);
      }
      tokens.pop();
      if (((_ref5 = tokens[0]) != null ? _ref5[0] : void 0) !== 'STRING') {
        this.tokens.push(['STRING', '""'], ['+', '+']);
      }
      (_ref6 = this.tokens).push.apply(_ref6, tokens);
      if (flags) this.tokens.push([',', ','], ['STRING', '"' + flags + '"']);
      this.token(')', ')');
      return heregex.length;
    };

    Lexer.prototype.lineToken = function() {
      var diff, indent, match, noNewlines, prev, size;
      if (!(match = MULTI_DENT.exec(this.chunk))) return 0;
      indent = match[0];
      this.line += count(indent, '\n');
      this.seenFor = false;
      prev = last(this.tokens, 1);
      size = indent.length - 1 - indent.lastIndexOf('\n');
      noNewlines = this.unfinished();
      if (size - this.indebt === this.indent) {
        if (noNewlines) {
          this.suppressNewlines();
        } else {
          this.newlineToken();
        }
        return indent.length;
      }
      if (size > this.indent) {
        if (noNewlines) {
          this.indebt = size - this.indent;
          this.suppressNewlines();
          return indent.length;
        }
        diff = size - this.indent + this.outdebt;
        this.token('INDENT', diff);
        this.indents.push(diff);
        this.ends.push('OUTDENT');
        this.outdebt = this.indebt = 0;
      } else {
        this.indebt = 0;
        this.outdentToken(this.indent - size, noNewlines);
      }
      this.indent = size;
      return indent.length;
    };

    Lexer.prototype.outdentToken = function(moveOut, noNewlines) {
      var dent, len;
      while (moveOut > 0) {
        len = this.indents.length - 1;
        if (this.indents[len] === void 0) {
          moveOut = 0;
        } else if (this.indents[len] === this.outdebt) {
          moveOut -= this.outdebt;
          this.outdebt = 0;
        } else if (this.indents[len] < this.outdebt) {
          this.outdebt -= this.indents[len];
          moveOut -= this.indents[len];
        } else {
          dent = this.indents.pop() - this.outdebt;
          moveOut -= dent;
          this.outdebt = 0;
          this.pair('OUTDENT');
          this.token('OUTDENT', dent);
        }
      }
      if (dent) this.outdebt -= moveOut;
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (!(this.tag() === 'TERMINATOR' || noNewlines)) {
        this.token('TERMINATOR', '\n');
      }
      return this;
    };

    Lexer.prototype.whitespaceToken = function() {
      var match, nline, prev;
      if (!((match = WHITESPACE.exec(this.chunk)) || (nline = this.chunk.charAt(0) === '\n'))) {
        return 0;
      }
      prev = last(this.tokens);
      if (prev) prev[match ? 'spaced' : 'newLine'] = true;
      if (match) {
        return match[0].length;
      } else {
        return 0;
      }
    };

    Lexer.prototype.newlineToken = function() {
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (this.tag() !== 'TERMINATOR') this.token('TERMINATOR', '\n');
      return this;
    };

    Lexer.prototype.suppressNewlines = function() {
      if (this.value() === '\\') this.tokens.pop();
      return this;
    };

    Lexer.prototype.literalToken = function() {
      var match, prev, tag, value, _ref3, _ref4, _ref5, _ref6;
      if (match = OPERATOR.exec(this.chunk)) {
        value = match[0];
        if (CODE.test(value)) this.tagParameters();
      } else {
        value = this.chunk.charAt(0);
      }
      tag = value;
      prev = last(this.tokens);
      if (value === '=' && prev) {
        if (!prev[1].reserved && (_ref3 = prev[1], __indexOf.call(JS_FORBIDDEN, _ref3) >= 0)) {
          this.error("reserved word \"" + (this.value()) + "\" can't be assigned");
        }
        if ((_ref4 = prev[1]) === '||' || _ref4 === '&&') {
          prev[0] = 'COMPOUND_ASSIGN';
          prev[1] += '=';
          return value.length;
        }
      }
      if (value === ';') {
        this.seenFor = false;
        tag = 'TERMINATOR';
      } else if (__indexOf.call(MATH, value) >= 0) {
        if (!this.lockImport) tag = 'MATH';
      } else if (__indexOf.call(COMPARE, value) >= 0) {
        tag = 'COMPARE';
      } else if (__indexOf.call(COMPOUND_ASSIGN, value) >= 0) {
        tag = 'COMPOUND_ASSIGN';
      } else if (__indexOf.call(UNARY, value) >= 0) {
        tag = 'UNARY';
      } else if (__indexOf.call(SHIFT, value) >= 0) {
        tag = 'SHIFT';
      } else if (__indexOf.call(LOGIC, value) >= 0 || value === '?' && (prev != null ? prev.spaced : void 0)) {
        tag = 'LOGIC';
      } else if (prev && !prev.spaced) {
        if (value === '(' && (_ref5 = prev[0], __indexOf.call(CALLABLE, _ref5) >= 0)) {
          if (prev[0] === '?') prev[0] = 'FUNC_EXIST';
          tag = 'CALL_START';
        } else if (value === '[' && (_ref6 = prev[0], __indexOf.call(INDEXABLE, _ref6) >= 0)) {
          tag = 'INDEX_START';
          switch (prev[0]) {
            case '?':
              prev[0] = 'INDEX_SOAK';
          }
        }
      }
      switch (value) {
        case '(':
        case '{':
        case '[':
          this.ends.push(INVERSES[value]);
          break;
        case ')':
        case '}':
        case ']':
          this.pair(value);
      }
      this.token(tag, value);
      return value.length;
    };

    Lexer.prototype.sanitizeHeredoc = function(doc, options) {
      var attempt, herecomment, indent, match, _ref3;
      indent = options.indent, herecomment = options.herecomment;
      if (herecomment) {
        if (HEREDOC_ILLEGAL.test(doc)) {
          this.error("block comment cannot contain \"*/\", starting");
        }
        if (doc.indexOf('\n') <= 0) return doc;
      } else {
        while (match = HEREDOC_INDENT.exec(doc)) {
          attempt = match[1];
          if (indent === null || (0 < (_ref3 = attempt.length) && _ref3 < indent.length)) {
            indent = attempt;
          }
        }
      }
      if (indent) doc = doc.replace(RegExp("\\n" + indent, "g"), '\n');
      if (!herecomment) doc = doc.replace(/^\n/, '');
      return doc;
    };

    Lexer.prototype.tagParameters = function() {
      var i, stack, tok, tokens;
      if (this.tag() !== ')') return this;
      stack = [];
      tokens = this.tokens;
      i = tokens.length;
      tokens[--i][0] = 'PARAM_END';
      while (tok = tokens[--i]) {
        switch (tok[0]) {
          case ')':
            stack.push(tok);
            break;
          case '(':
          case 'CALL_START':
            if (stack.length) {
              stack.pop();
            } else if (tok[0] === '(') {
              tok[0] = 'PARAM_START';
              return this;
            } else {
              return this;
            }
        }
      }
      return this;
    };

    Lexer.prototype.closeIndentation = function() {
      return this.outdentToken(this.indent);
    };

    Lexer.prototype.balancedString = function(str, end) {
      var continueCount, i, letter, match, prev, stack, _i, _ref3;
      continueCount = 0;
      stack = [end];
      for (i = _i = 1, _ref3 = str.length; 1 <= _ref3 ? _i < _ref3 : _i > _ref3; i = 1 <= _ref3 ? ++_i : --_i) {
        if (continueCount) {
          --continueCount;
          continue;
        }
        switch (letter = str.charAt(i)) {
          case '\\':
            ++continueCount;
            continue;
          case end:
            stack.pop();
            if (!stack.length) return str.slice(0, i + 1 || 9e9);
            end = stack[stack.length - 1];
            continue;
        }
        if (end === '}' && (letter === '"' || letter === "'")) {
          stack.push(end = letter);
        } else if (end === '}' && letter === '/' && (match = HEREGEX.exec(str.slice(i)) || REGEX.exec(str.slice(i)))) {
          continueCount += match[0].length - 1;
        } else if (end === '}' && letter === '{') {
          stack.push(end = '}');
        } else if (end === '"' && prev === '#' && letter === '{') {
          stack.push(end = '}');
        }
        prev = letter;
      }
      return this.error("missing " + (stack.pop()) + ", starting");
    };

    Lexer.prototype.interpolateString = function(str, options) {
      var expr, heredoc, i, inner, interpolated, len, letter, nested, pi, regex, tag, tokens, value, _i, _len, _ref3, _ref4, _ref5;
      if (options == null) options = {};
      heredoc = options.heredoc, regex = options.regex;
      tokens = [];
      pi = 0;
      i = -1;
      while (letter = str.charAt(i += 1)) {
        if (letter === '\\') {
          i += 1;
          continue;
        }
        if (!(letter === '#' && str.charAt(i + 1) === '{' && (expr = this.balancedString(str.slice(i + 1), '}')))) {
          continue;
        }
        if (pi < i) tokens.push(['NEOSTRING', str.slice(pi, i)]);
        inner = expr.slice(1, -1);
        if (inner.length) {
          nested = new Lexer().tokenize(inner, {
            line: this.line,
            rewrite: false
          });
          nested.pop();
          if (((_ref3 = nested[0]) != null ? _ref3[0] : void 0) === 'TERMINATOR') {
            nested.shift();
          }
          if (len = nested.length) {
            if (len > 1) {
              nested.unshift(['(', '(', this.line]);
              nested.push([')', ')', this.line]);
            }
            tokens.push(['TOKENS', nested]);
          }
        }
        i += expr.length;
        pi = i + 1;
      }
      if ((i > pi && pi < str.length)) tokens.push(['NEOSTRING', str.slice(pi)]);
      if (regex) return tokens;
      if (!tokens.length) return this.token('STRING', '""');
      if (tokens[0][0] !== 'NEOSTRING') tokens.unshift(['', '']);
      if (interpolated = tokens.length > 1) this.token('(', '(');
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        _ref4 = tokens[i], tag = _ref4[0], value = _ref4[1];
        if (i) this.token('+', '+');
        if (tag === 'TOKENS') {
          (_ref5 = this.tokens).push.apply(_ref5, value);
        } else {
          this.token('STRING', this.makeString(value, '"', heredoc));
        }
      }
      if (interpolated) this.token(')', ')');
      return tokens;
    };

    Lexer.prototype.pair = function(tag) {
      var size, wanted;
      if (tag !== (wanted = last(this.ends))) {
        if ('OUTDENT' !== wanted) this.error("unmatched " + tag);
        this.indent -= size = last(this.indents);
        this.outdentToken(size, true);
        return this.pair(tag);
      }
      return this.ends.pop();
    };

    Lexer.prototype.token = function(tag, value) {
      if (tag === 'IMPORT') this.lockImport = true;
      if (tag === 'TERMINATOR') this.lockImport = false;
      return this.tokens.push([tag, value, this.line]);
    };

    Lexer.prototype.tag = function(index, tag) {
      var tok;
      return (tok = last(this.tokens, index)) && (tag ? tok[0] = tag : tok[0]);
    };

    Lexer.prototype.value = function(index, val) {
      var tok;
      return (tok = last(this.tokens, index)) && (val ? tok[1] = val : tok[1]);
    };

    Lexer.prototype.unfinished = function() {
      var _ref3;
      return LINE_CONTINUER.test(this.chunk) || ((_ref3 = this.tag()) === '\\' || _ref3 === '.' || _ref3 === '?.' || _ref3 === 'UNARY' || _ref3 === 'MATH' || _ref3 === '+' || _ref3 === '-' || _ref3 === 'SHIFT' || _ref3 === 'RELATION' || _ref3 === 'COMPARE' || _ref3 === 'LOGIC' || _ref3 === 'THROW' || _ref3 === 'EXTENDS');
    };

    Lexer.prototype.escapeLines = function(str, heredoc) {
      return str.replace(MULTILINER, heredoc ? '\\n' : '');
    };

    Lexer.prototype.makeString = function(body, quote, heredoc) {
      if (!body) return quote + quote;
      body = body.replace(/\\([\s\S])/g, function(match, contents) {
        if (contents === '\n' || contents === quote) {
          return contents;
        } else {
          return match;
        }
      });
      body = body.replace(RegExp("" + quote, "g"), '\\$&');
      return quote + this.escapeLines(body, heredoc) + quote;
    };

    Lexer.prototype.error = function(message) {
      throw SyntaxError("" + message + " on line " + (this.line + 1));
    };

    return Lexer;
  })();

  JS_KEYWORDS = ['true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super', 'package', 'import'];

  COFFEE_KEYWORDS = ['undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'];

  COFFEE_ALIAS_MAP = {
    and: '&&',
    or: '||',
    is: '==',
    isnt: '!=',
    not: '!',
    yes: 'true',
    no: 'false',
    on: 'true',
    off: 'false'
  };

  COFFEE_ALIASES = (function() {
    var _results;
    _results = [];
    for (key in COFFEE_ALIAS_MAP) {
      _results.push(key);
    }
    return _results;
  })();

  COFFEE_KEYWORDS = COFFEE_KEYWORDS.concat(COFFEE_ALIASES);

  RESERVED = ['case', 'default', 'function', 'var', 'void', 'with', 'const', 'let', 'enum', 'export', 'native', '__hasProp', '__extends', '__slice', '__bind', '__indexOf', '__imports', 'implements', 'interface', 'let', 'private', 'protected', 'public', 'static', 'yield'];

  STRICT_PROSCRIBED = ['arguments', 'eval'];

  JS_FORBIDDEN = JS_KEYWORDS.concat(RESERVED).concat(STRICT_PROSCRIBED);

  exports.RESERVED = RESERVED.concat(JS_KEYWORDS).concat(COFFEE_KEYWORDS).concat(STRICT_PROSCRIBED);

  exports.STRICT_PROSCRIBED = STRICT_PROSCRIBED;

  IDENTIFIER = /^([$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*)([^\n\S]*:(?!:))?/;

  NUMBER = /^0b[01]+|^0o[0-7]+|^0x[\da-f]+|^\d*\.?\d+(?:e[+-]?\d+)?/i;

  HEREDOC = /^("""|''')([\s\S]*?)(?:\n[^\n\S]*)?\1/;

  OPERATOR = /^(?:[-=]>|[-+*\/%<>&|^!?=]=|>>>=?|([-+:])\1|([&|<>])\2=?|\?\.|\.{2,3})/;

  WHITESPACE = /^[^\n\S]+/;

  COMMENT = /^###([^#][\s\S]*?)(?:###[^\n\S]*|(?:###)?$)|^(?:\s*#(?!##[^#]).*)+/;

  CODE = /^[-=]>/;

  MULTI_DENT = /^(?:\n[^\n\S]*)+/;

  SIMPLESTR = /^'[^\\']*(?:\\.[^\\']*)*'/;

  JSTOKEN = /^`[^\\`]*(?:\\.[^\\`]*)*`/;

  REGEX = /^(\/(?![\s=])[^[\/\n\\]*(?:(?:\\[\s\S]|\[[^\]\n\\]*(?:\\[\s\S][^\]\n\\]*)*])[^[\/\n\\]*)*\/)([imgy]{0,4})(?!\w)/;

  HEREGEX = /^\/{3}([\s\S]+?)\/{3}([imgy]{0,4})(?!\w)/;

  HEREGEX_OMIT = /\s+(?:#.*)?/g;

  MULTILINER = /\n/g;

  HEREDOC_INDENT = /\n+([^\n\S]*)/g;

  HEREDOC_ILLEGAL = /\*\//;

  LINE_CONTINUER = /^\s*(?:,|\??\.(?![.\d])|::)/;

  TRAILING_SPACES = /\s+$/;

  COMPOUND_ASSIGN = ['-=', '+=', '/=', '*=', '%=', '||=', '&&=', '?=', '<<=', '>>=', '>>>=', '&=', '^=', '|='];

  UNARY = ['!', '~', 'NEW', 'TYPEOF', 'DELETE', 'DO'];

  LOGIC = ['&&', '||', '&', '|', '^'];

  SHIFT = ['<<', '>>', '>>>'];

  COMPARE = ['==', '!=', '<', '>', '<=', '>='];

  MATH = ['*', '/', '%'];

  RELATION = ['IN', 'OF', 'INSTANCEOF'];

  BOOL = ['TRUE', 'FALSE', 'NULL', 'UNDEFINED'];

  NOT_REGEX = ['NUMBER', 'REGEX', 'BOOL', '++', '--', ']'];

  NOT_SPACED_REGEX = NOT_REGEX.concat(')', '}', 'THIS', 'IDENTIFIER', 'STRING');

  CALLABLE = ['IDENTIFIER', 'STRING', 'REGEX', ')', ']', '}', '?', '::', '@', 'THIS', 'SUPER'];

  INDEXABLE = CALLABLE.concat('NUMBER', 'BOOL');

  LINE_BREAK = ['INDENT', 'OUTDENT', 'TERMINATOR'];

}).call(this);

};require['./parser'] = new function() {
  var exports = this;
  /* Jison generated parser */
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Body":4,"Block":5,"TERMINATOR":6,"Line":7,"Expression":8,"Statement":9,"Return":10,"Comment":11,"STATEMENT":12,"Import":13,"Package":14,"Value":15,"Invocation":16,"Code":17,"Operation":18,"Assign":19,"If":20,"Try":21,"While":22,"For":23,"Switch":24,"Class":25,"Throw":26,"INDENT":27,"OUTDENT":28,"Identifier":29,"IDENTIFIER":30,"AlphaNumeric":31,"NUMBER":32,"STRING":33,"Literal":34,"JS":35,"REGEX":36,"DEBUGGER":37,"BOOL":38,"Assignable":39,"=":40,"AssignObj":41,"ObjAssignable":42,":":43,"ThisProperty":44,"RETURN":45,"HERECOMMENT":46,"PARAM_START":47,"ParamList":48,"PARAM_END":49,"FuncGlyph":50,"->":51,"=>":52,"OptComma":53,",":54,"Param":55,"ParamVar":56,"...":57,"Array":58,"Object":59,"Splat":60,"SimpleAssignable":61,"Accessor":62,"Parenthetical":63,"Range":64,"This":65,".":66,"?.":67,"::":68,"Index":69,"INDEX_START":70,"IndexValue":71,"INDEX_END":72,"INDEX_SOAK":73,"Slice":74,"{":75,"AssignList":76,"}":77,"CLASS":78,"EXTENDS":79,"IMPORT":80,"ImportPath":81,"/":82,"..":83,"PACKAGE":84,"PackageIdentifier":85,"PackageArgList":86,"OptFuncExist":87,"Arguments":88,"SUPER":89,"FUNC_EXIST":90,"CALL_START":91,"CALL_END":92,"ArgList":93,"THIS":94,"@":95,"[":96,"]":97,"RangeDots":98,"Arg":99,"SimpleArgs":100,"TRY":101,"Catch":102,"FINALLY":103,"CATCH":104,"THROW":105,"(":106,")":107,"WhileSource":108,"WHILE":109,"WHEN":110,"UNTIL":111,"Loop":112,"LOOP":113,"ForBody":114,"FOR":115,"ForStart":116,"ForSource":117,"ForVariables":118,"OWN":119,"ForValue":120,"FORIN":121,"FOROF":122,"BY":123,"SWITCH":124,"Whens":125,"ELSE":126,"When":127,"LEADING_WHEN":128,"IfBlock":129,"IF":130,"POST_IF":131,"UNARY":132,"-":133,"+":134,"--":135,"++":136,"?":137,"MATH":138,"SHIFT":139,"COMPARE":140,"LOGIC":141,"RELATION":142,"COMPOUND_ASSIGN":143,"$accept":0,"$end":1},
terminals_: {2:"error",6:"TERMINATOR",12:"STATEMENT",27:"INDENT",28:"OUTDENT",30:"IDENTIFIER",32:"NUMBER",33:"STRING",35:"JS",36:"REGEX",37:"DEBUGGER",38:"BOOL",40:"=",43:":",45:"RETURN",46:"HERECOMMENT",47:"PARAM_START",49:"PARAM_END",51:"->",52:"=>",54:",",57:"...",66:".",67:"?.",68:"::",70:"INDEX_START",72:"INDEX_END",73:"INDEX_SOAK",75:"{",77:"}",78:"CLASS",79:"EXTENDS",80:"IMPORT",82:"/",83:"..",84:"PACKAGE",89:"SUPER",90:"FUNC_EXIST",91:"CALL_START",92:"CALL_END",94:"THIS",95:"@",96:"[",97:"]",101:"TRY",103:"FINALLY",104:"CATCH",105:"THROW",106:"(",107:")",109:"WHILE",110:"WHEN",111:"UNTIL",113:"LOOP",115:"FOR",119:"OWN",121:"FORIN",122:"FOROF",123:"BY",124:"SWITCH",126:"ELSE",128:"LEADING_WHEN",130:"IF",131:"POST_IF",132:"UNARY",133:"-",134:"+",135:"--",136:"++",137:"?",138:"MATH",139:"SHIFT",140:"COMPARE",141:"LOGIC",142:"RELATION",143:"COMPOUND_ASSIGN"},
productions_: [0,[3,0],[3,1],[3,2],[4,1],[4,3],[4,2],[7,1],[7,1],[9,1],[9,1],[9,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[5,2],[5,3],[29,1],[31,1],[31,1],[34,1],[34,1],[34,1],[34,1],[34,1],[19,3],[19,4],[19,5],[41,1],[41,3],[41,5],[41,1],[42,1],[42,1],[42,1],[10,2],[10,1],[11,1],[17,5],[17,2],[50,1],[50,1],[53,0],[53,1],[48,0],[48,1],[48,3],[55,1],[55,2],[55,3],[56,1],[56,1],[56,1],[56,1],[60,2],[61,1],[61,2],[61,2],[61,1],[39,1],[39,1],[39,1],[15,1],[15,1],[15,1],[15,1],[15,1],[62,2],[62,2],[62,2],[62,1],[62,1],[69,3],[69,2],[71,1],[71,1],[59,4],[76,0],[76,1],[76,3],[76,4],[76,6],[25,1],[25,2],[25,3],[25,4],[25,2],[25,3],[25,4],[25,5],[13,2],[13,3],[13,4],[81,1],[81,3],[81,3],[14,2],[14,5],[85,1],[85,3],[86,1],[86,3],[86,3],[86,4],[16,3],[16,3],[16,1],[16,2],[87,0],[87,1],[88,2],[88,4],[65,1],[65,1],[44,2],[58,2],[58,4],[98,1],[98,1],[64,5],[74,3],[74,2],[74,2],[74,1],[93,1],[93,3],[93,4],[93,4],[93,6],[99,1],[99,1],[100,1],[100,3],[21,2],[21,3],[21,4],[21,5],[102,3],[26,2],[63,3],[63,5],[108,2],[108,4],[108,2],[108,4],[22,2],[22,2],[22,2],[22,1],[112,2],[112,2],[23,2],[23,2],[23,2],[114,2],[114,2],[116,2],[116,3],[120,1],[120,1],[120,1],[118,1],[118,3],[117,2],[117,2],[117,4],[117,4],[117,4],[117,6],[117,6],[24,5],[24,7],[24,4],[24,6],[125,1],[125,2],[127,3],[127,4],[129,3],[129,5],[20,1],[20,3],[20,3],[20,3],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,5],[18,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:return this.$ = new yy.Block;
break;
case 2:return this.$ = $$[$0];
break;
case 3:return this.$ = $$[$0-1];
break;
case 4:this.$ = yy.Block.wrap([$$[$0]]);
break;
case 5:this.$ = $$[$0-2].push($$[$0]);
break;
case 6:this.$ = $$[$0-1];
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = $$[$0];
break;
case 10:this.$ = $$[$0];
break;
case 11:this.$ = new yy.Literal($$[$0]);
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = $$[$0];
break;
case 15:this.$ = $$[$0];
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = $$[$0];
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = $$[$0];
break;
case 22:this.$ = $$[$0];
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = new yy.Block;
break;
case 27:this.$ = $$[$0-1];
break;
case 28:this.$ = new yy.Literal($$[$0]);
break;
case 29:this.$ = new yy.Literal($$[$0]);
break;
case 30:this.$ = new yy.Literal($$[$0]);
break;
case 31:this.$ = $$[$0];
break;
case 32:this.$ = new yy.Literal($$[$0]);
break;
case 33:this.$ = new yy.Literal($$[$0]);
break;
case 34:this.$ = new yy.Literal($$[$0]);
break;
case 35:this.$ = (function () {
        var val;
        val = new yy.Literal($$[$0]);
        if ($$[$0] === 'undefined') val.isUndefined = true;
        return val;
      }());
break;
case 36:this.$ = new yy.Assign($$[$0-2], $$[$0]);
break;
case 37:this.$ = new yy.Assign($$[$0-3], $$[$0]);
break;
case 38:this.$ = new yy.Assign($$[$0-4], $$[$0-1]);
break;
case 39:this.$ = new yy.Value($$[$0]);
break;
case 40:this.$ = new yy.Assign(new yy.Value($$[$0-2]), $$[$0], 'object');
break;
case 41:this.$ = new yy.Assign(new yy.Value($$[$0-4]), $$[$0-1], 'object');
break;
case 42:this.$ = $$[$0];
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = $$[$0];
break;
case 45:this.$ = $$[$0];
break;
case 46:this.$ = new yy.Return($$[$0]);
break;
case 47:this.$ = new yy.Return;
break;
case 48:this.$ = new yy.Comment($$[$0]);
break;
case 49:this.$ = new yy.Code($$[$0-3], $$[$0], $$[$0-1]);
break;
case 50:this.$ = new yy.Code([], $$[$0], $$[$0-1]);
break;
case 51:this.$ = 'func';
break;
case 52:this.$ = 'boundfunc';
break;
case 53:this.$ = $$[$0];
break;
case 54:this.$ = $$[$0];
break;
case 55:this.$ = [];
break;
case 56:this.$ = [$$[$0]];
break;
case 57:this.$ = $$[$0-2].concat($$[$0]);
break;
case 58:this.$ = new yy.Param($$[$0]);
break;
case 59:this.$ = new yy.Param($$[$0-1], null, true);
break;
case 60:this.$ = new yy.Param($$[$0-2], $$[$0]);
break;
case 61:this.$ = $$[$0];
break;
case 62:this.$ = $$[$0];
break;
case 63:this.$ = $$[$0];
break;
case 64:this.$ = $$[$0];
break;
case 65:this.$ = new yy.Splat($$[$0-1]);
break;
case 66:this.$ = new yy.Value($$[$0]);
break;
case 67:this.$ = $$[$0-1].add($$[$0]);
break;
case 68:this.$ = new yy.Value($$[$0-1], [].concat($$[$0]));
break;
case 69:this.$ = $$[$0];
break;
case 70:this.$ = $$[$0];
break;
case 71:this.$ = new yy.Value($$[$0]);
break;
case 72:this.$ = new yy.Value($$[$0]);
break;
case 73:this.$ = $$[$0];
break;
case 74:this.$ = new yy.Value($$[$0]);
break;
case 75:this.$ = new yy.Value($$[$0]);
break;
case 76:this.$ = new yy.Value($$[$0]);
break;
case 77:this.$ = $$[$0];
break;
case 78:this.$ = new yy.Access($$[$0]);
break;
case 79:this.$ = new yy.Access($$[$0], 'soak');
break;
case 80:this.$ = [new yy.Access(new yy.Literal('prototype')), new yy.Access($$[$0])];
break;
case 81:this.$ = new yy.Access(new yy.Literal('prototype'));
break;
case 82:this.$ = $$[$0];
break;
case 83:this.$ = $$[$0-1];
break;
case 84:this.$ = yy.extend($$[$0], {
          soak: true
        });
break;
case 85:this.$ = new yy.Index($$[$0]);
break;
case 86:this.$ = new yy.Slice($$[$0]);
break;
case 87:this.$ = new yy.Obj($$[$0-2], $$[$0-3].generated);
break;
case 88:this.$ = [];
break;
case 89:this.$ = [$$[$0]];
break;
case 90:this.$ = $$[$0-2].concat($$[$0]);
break;
case 91:this.$ = $$[$0-3].concat($$[$0]);
break;
case 92:this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 93:this.$ = new yy.Class;
break;
case 94:this.$ = new yy.Class(null, null, $$[$0]);
break;
case 95:this.$ = new yy.Class(null, $$[$0]);
break;
case 96:this.$ = new yy.Class(null, $$[$0-1], $$[$0]);
break;
case 97:this.$ = new yy.Class($$[$0]);
break;
case 98:this.$ = new yy.Class($$[$0-1], null, $$[$0]);
break;
case 99:this.$ = new yy.Class($$[$0-2], $$[$0]);
break;
case 100:this.$ = new yy.Class($$[$0-3], $$[$0-1], $$[$0]);
break;
case 101:this.$ = new yy.Import($$[$0], {
          isResolve: true
        });
break;
case 102:this.$ = new yy.Import($$[$0], {
          isAbsolute: true
        });
break;
case 103:this.$ = new yy.Import($$[$0], {
          isRelative: true
        });
break;
case 104:this.$ = [$$[$0]];
break;
case 105:this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 106:this.$ = [new yy.Literal($$[$0-2])].concat($$[$0]);
break;
case 107:this.$ = new yy.Package($$[$0], []);
break;
case 108:this.$ = new yy.Package($$[$0-3], $$[$0-1]);
break;
case 109:this.$ = [$$[$0]];
break;
case 110:this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 111:this.$ = [$$[$0]];
break;
case 112:this.$ = $$[$0-2].concat($$[$0]);
break;
case 113:this.$ = $$[$0-1];
break;
case 114:this.$ = $$[$0-3].concat($$[$0-1]);
break;
case 115:this.$ = new yy.Call($$[$0-2], $$[$0], $$[$0-1]);
break;
case 116:this.$ = new yy.Call($$[$0-2], $$[$0], $$[$0-1]);
break;
case 117:this.$ = new yy.Call('super', [new yy.Splat(new yy.Literal('arguments'))]);
break;
case 118:this.$ = new yy.Call('super', $$[$0]);
break;
case 119:this.$ = false;
break;
case 120:this.$ = true;
break;
case 121:this.$ = [];
break;
case 122:this.$ = $$[$0-2];
break;
case 123:this.$ = new yy.Value(new yy.Literal('this'));
break;
case 124:this.$ = new yy.Value(new yy.Literal('this'));
break;
case 125:this.$ = new yy.Value(new yy.Literal('this'), [new yy.Access($$[$0])], 'this');
break;
case 126:this.$ = new yy.Arr([]);
break;
case 127:this.$ = new yy.Arr($$[$0-2]);
break;
case 128:this.$ = 'inclusive';
break;
case 129:this.$ = 'exclusive';
break;
case 130:this.$ = new yy.Range($$[$0-3], $$[$0-1], $$[$0-2]);
break;
case 131:this.$ = new yy.Range($$[$0-2], $$[$0], $$[$0-1]);
break;
case 132:this.$ = new yy.Range($$[$0-1], null, $$[$0]);
break;
case 133:this.$ = new yy.Range(null, $$[$0], $$[$0-1]);
break;
case 134:this.$ = new yy.Range(null, null, $$[$0]);
break;
case 135:this.$ = [$$[$0]];
break;
case 136:this.$ = $$[$0-2].concat($$[$0]);
break;
case 137:this.$ = $$[$0-3].concat($$[$0]);
break;
case 138:this.$ = $$[$0-2];
break;
case 139:this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 140:this.$ = $$[$0];
break;
case 141:this.$ = $$[$0];
break;
case 142:this.$ = $$[$0];
break;
case 143:this.$ = [].concat($$[$0-2], $$[$0]);
break;
case 144:this.$ = new yy.Try($$[$0]);
break;
case 145:this.$ = new yy.Try($$[$0-1], $$[$0][0], $$[$0][1]);
break;
case 146:this.$ = new yy.Try($$[$0-2], null, null, $$[$0]);
break;
case 147:this.$ = new yy.Try($$[$0-3], $$[$0-2][0], $$[$0-2][1], $$[$0]);
break;
case 148:this.$ = [$$[$0-1], $$[$0]];
break;
case 149:this.$ = new yy.Throw($$[$0]);
break;
case 150:this.$ = new yy.Parens($$[$0-1]);
break;
case 151:this.$ = new yy.Parens($$[$0-2]);
break;
case 152:this.$ = new yy.While($$[$0]);
break;
case 153:this.$ = new yy.While($$[$0-2], {
          guard: $$[$0]
        });
break;
case 154:this.$ = new yy.While($$[$0], {
          invert: true
        });
break;
case 155:this.$ = new yy.While($$[$0-2], {
          invert: true,
          guard: $$[$0]
        });
break;
case 156:this.$ = $$[$0-1].addBody($$[$0]);
break;
case 157:this.$ = $$[$0].addBody(yy.Block.wrap([$$[$0-1]]));
break;
case 158:this.$ = $$[$0].addBody(yy.Block.wrap([$$[$0-1]]));
break;
case 159:this.$ = $$[$0];
break;
case 160:this.$ = new yy.While(new yy.Literal('true')).addBody($$[$0]);
break;
case 161:this.$ = new yy.While(new yy.Literal('true')).addBody(yy.Block.wrap([$$[$0]]));
break;
case 162:this.$ = new yy.For($$[$0-1], $$[$0]);
break;
case 163:this.$ = new yy.For($$[$0-1], $$[$0]);
break;
case 164:this.$ = new yy.For($$[$0], $$[$0-1]);
break;
case 165:this.$ = {
          source: new yy.Value($$[$0])
        };
break;
case 166:this.$ = (function () {
        $$[$0].own = $$[$0-1].own;
        $$[$0].name = $$[$0-1][0];
        $$[$0].index = $$[$0-1][1];
        return $$[$0];
      }());
break;
case 167:this.$ = $$[$0];
break;
case 168:this.$ = (function () {
        $$[$0].own = true;
        return $$[$0];
      }());
break;
case 169:this.$ = $$[$0];
break;
case 170:this.$ = new yy.Value($$[$0]);
break;
case 171:this.$ = new yy.Value($$[$0]);
break;
case 172:this.$ = [$$[$0]];
break;
case 173:this.$ = [$$[$0-2], $$[$0]];
break;
case 174:this.$ = {
          source: $$[$0]
        };
break;
case 175:this.$ = {
          source: $$[$0],
          object: true
        };
break;
case 176:this.$ = {
          source: $$[$0-2],
          guard: $$[$0]
        };
break;
case 177:this.$ = {
          source: $$[$0-2],
          guard: $$[$0],
          object: true
        };
break;
case 178:this.$ = {
          source: $$[$0-2],
          step: $$[$0]
        };
break;
case 179:this.$ = {
          source: $$[$0-4],
          guard: $$[$0-2],
          step: $$[$0]
        };
break;
case 180:this.$ = {
          source: $$[$0-4],
          step: $$[$0-2],
          guard: $$[$0]
        };
break;
case 181:this.$ = new yy.Switch($$[$0-3], $$[$0-1]);
break;
case 182:this.$ = new yy.Switch($$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 183:this.$ = new yy.Switch(null, $$[$0-1]);
break;
case 184:this.$ = new yy.Switch(null, $$[$0-3], $$[$0-1]);
break;
case 185:this.$ = $$[$0];
break;
case 186:this.$ = $$[$0-1].concat($$[$0]);
break;
case 187:this.$ = [[$$[$0-1], $$[$0]]];
break;
case 188:this.$ = [[$$[$0-2], $$[$0-1]]];
break;
case 189:this.$ = new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        });
break;
case 190:this.$ = $$[$0-4].addElse(new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        }));
break;
case 191:this.$ = $$[$0];
break;
case 192:this.$ = $$[$0-2].addElse($$[$0]);
break;
case 193:this.$ = new yy.If($$[$0], yy.Block.wrap([$$[$0-2]]), {
          type: $$[$0-1],
          statement: true
        });
break;
case 194:this.$ = new yy.If($$[$0], yy.Block.wrap([$$[$0-2]]), {
          type: $$[$0-1],
          statement: true
        });
break;
case 195:this.$ = new yy.Op($$[$0-1], $$[$0]);
break;
case 196:this.$ = new yy.Op('-', $$[$0]);
break;
case 197:this.$ = new yy.Op('+', $$[$0]);
break;
case 198:this.$ = new yy.Op('--', $$[$0]);
break;
case 199:this.$ = new yy.Op('++', $$[$0]);
break;
case 200:this.$ = new yy.Op('--', $$[$0-1], null, true);
break;
case 201:this.$ = new yy.Op('++', $$[$0-1], null, true);
break;
case 202:this.$ = new yy.Existence($$[$0-1]);
break;
case 203:this.$ = new yy.Op('+', $$[$0-2], $$[$0]);
break;
case 204:this.$ = new yy.Op('-', $$[$0-2], $$[$0]);
break;
case 205:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 206:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 207:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 208:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 209:this.$ = (function () {
        if ($$[$0-1].charAt(0) === '!') {
          return new yy.Op($$[$0-1].slice(1), $$[$0-2], $$[$0]).invert();
        } else {
          return new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
        }
      }());
break;
case 210:this.$ = new yy.Assign($$[$0-2], $$[$0], $$[$0-1]);
break;
case 211:this.$ = new yy.Assign($$[$0-4], $$[$0-1], $$[$0-3]);
break;
case 212:this.$ = new yy.Extends($$[$0-2], $$[$0]);
break;
}
},
table: [{1:[2,1],3:1,4:2,5:3,7:4,8:6,9:7,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,5],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[3]},{1:[2,2],6:[1,76]},{6:[1,77]},{1:[2,4],6:[2,4],28:[2,4],107:[2,4]},{4:79,7:4,8:6,9:7,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,28:[1,78],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,7],6:[2,7],28:[2,7],107:[2,7],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,8],6:[2,8],28:[2,8],107:[2,8],108:92,109:[1,67],111:[1,68],114:93,115:[1,70],116:71,131:[1,91]},{1:[2,12],6:[2,12],27:[2,12],28:[2,12],49:[2,12],54:[2,12],57:[2,12],72:[2,12],77:[2,12],83:[2,12],92:[2,12],97:[2,12],107:[2,12],109:[2,12],110:[2,12],111:[2,12],115:[2,12],123:[2,12],131:[2,12],133:[2,12],134:[2,12],137:[2,12],138:[2,12],139:[2,12],140:[2,12],141:[2,12],142:[2,12]},{1:[2,13],6:[2,13],27:[2,13],28:[2,13],49:[2,13],54:[2,13],57:[2,13],72:[2,13],77:[2,13],83:[2,13],92:[2,13],97:[2,13],107:[2,13],109:[2,13],110:[2,13],111:[2,13],115:[2,13],123:[2,13],131:[2,13],133:[2,13],134:[2,13],137:[2,13],138:[2,13],139:[2,13],140:[2,13],141:[2,13],142:[2,13]},{1:[2,14],6:[2,14],27:[2,14],28:[2,14],49:[2,14],54:[2,14],57:[2,14],62:95,66:[1,97],67:[1,98],68:[1,99],69:100,70:[1,101],72:[2,14],73:[1,102],77:[2,14],83:[2,14],87:94,90:[1,96],91:[2,119],92:[2,14],97:[2,14],107:[2,14],109:[2,14],110:[2,14],111:[2,14],115:[2,14],123:[2,14],131:[2,14],133:[2,14],134:[2,14],137:[2,14],138:[2,14],139:[2,14],140:[2,14],141:[2,14],142:[2,14]},{1:[2,15],6:[2,15],27:[2,15],28:[2,15],49:[2,15],54:[2,15],57:[2,15],62:104,66:[1,97],67:[1,98],68:[1,99],69:100,70:[1,101],72:[2,15],73:[1,102],77:[2,15],83:[2,15],87:103,90:[1,96],91:[2,119],92:[2,15],97:[2,15],107:[2,15],109:[2,15],110:[2,15],111:[2,15],115:[2,15],123:[2,15],131:[2,15],133:[2,15],134:[2,15],137:[2,15],138:[2,15],139:[2,15],140:[2,15],141:[2,15],142:[2,15]},{1:[2,16],6:[2,16],27:[2,16],28:[2,16],49:[2,16],54:[2,16],57:[2,16],72:[2,16],77:[2,16],83:[2,16],92:[2,16],97:[2,16],107:[2,16],109:[2,16],110:[2,16],111:[2,16],115:[2,16],123:[2,16],131:[2,16],133:[2,16],134:[2,16],137:[2,16],138:[2,16],139:[2,16],140:[2,16],141:[2,16],142:[2,16]},{1:[2,17],6:[2,17],27:[2,17],28:[2,17],49:[2,17],54:[2,17],57:[2,17],72:[2,17],77:[2,17],83:[2,17],92:[2,17],97:[2,17],107:[2,17],109:[2,17],110:[2,17],111:[2,17],115:[2,17],123:[2,17],131:[2,17],133:[2,17],134:[2,17],137:[2,17],138:[2,17],139:[2,17],140:[2,17],141:[2,17],142:[2,17]},{1:[2,18],6:[2,18],27:[2,18],28:[2,18],49:[2,18],54:[2,18],57:[2,18],72:[2,18],77:[2,18],83:[2,18],92:[2,18],97:[2,18],107:[2,18],109:[2,18],110:[2,18],111:[2,18],115:[2,18],123:[2,18],131:[2,18],133:[2,18],134:[2,18],137:[2,18],138:[2,18],139:[2,18],140:[2,18],141:[2,18],142:[2,18]},{1:[2,19],6:[2,19],27:[2,19],28:[2,19],49:[2,19],54:[2,19],57:[2,19],72:[2,19],77:[2,19],83:[2,19],92:[2,19],97:[2,19],107:[2,19],109:[2,19],110:[2,19],111:[2,19],115:[2,19],123:[2,19],131:[2,19],133:[2,19],134:[2,19],137:[2,19],138:[2,19],139:[2,19],140:[2,19],141:[2,19],142:[2,19]},{1:[2,20],6:[2,20],27:[2,20],28:[2,20],49:[2,20],54:[2,20],57:[2,20],72:[2,20],77:[2,20],83:[2,20],92:[2,20],97:[2,20],107:[2,20],109:[2,20],110:[2,20],111:[2,20],115:[2,20],123:[2,20],131:[2,20],133:[2,20],134:[2,20],137:[2,20],138:[2,20],139:[2,20],140:[2,20],141:[2,20],142:[2,20]},{1:[2,21],6:[2,21],27:[2,21],28:[2,21],49:[2,21],54:[2,21],57:[2,21],72:[2,21],77:[2,21],83:[2,21],92:[2,21],97:[2,21],107:[2,21],109:[2,21],110:[2,21],111:[2,21],115:[2,21],123:[2,21],131:[2,21],133:[2,21],134:[2,21],137:[2,21],138:[2,21],139:[2,21],140:[2,21],141:[2,21],142:[2,21]},{1:[2,22],6:[2,22],27:[2,22],28:[2,22],49:[2,22],54:[2,22],57:[2,22],72:[2,22],77:[2,22],83:[2,22],92:[2,22],97:[2,22],107:[2,22],109:[2,22],110:[2,22],111:[2,22],115:[2,22],123:[2,22],131:[2,22],133:[2,22],134:[2,22],137:[2,22],138:[2,22],139:[2,22],140:[2,22],141:[2,22],142:[2,22]},{1:[2,23],6:[2,23],27:[2,23],28:[2,23],49:[2,23],54:[2,23],57:[2,23],72:[2,23],77:[2,23],83:[2,23],92:[2,23],97:[2,23],107:[2,23],109:[2,23],110:[2,23],111:[2,23],115:[2,23],123:[2,23],131:[2,23],133:[2,23],134:[2,23],137:[2,23],138:[2,23],139:[2,23],140:[2,23],141:[2,23],142:[2,23]},{1:[2,24],6:[2,24],27:[2,24],28:[2,24],49:[2,24],54:[2,24],57:[2,24],72:[2,24],77:[2,24],83:[2,24],92:[2,24],97:[2,24],107:[2,24],109:[2,24],110:[2,24],111:[2,24],115:[2,24],123:[2,24],131:[2,24],133:[2,24],134:[2,24],137:[2,24],138:[2,24],139:[2,24],140:[2,24],141:[2,24],142:[2,24]},{1:[2,25],6:[2,25],27:[2,25],28:[2,25],49:[2,25],54:[2,25],57:[2,25],72:[2,25],77:[2,25],83:[2,25],92:[2,25],97:[2,25],107:[2,25],109:[2,25],110:[2,25],111:[2,25],115:[2,25],123:[2,25],131:[2,25],133:[2,25],134:[2,25],137:[2,25],138:[2,25],139:[2,25],140:[2,25],141:[2,25],142:[2,25]},{1:[2,9],6:[2,9],28:[2,9],107:[2,9],109:[2,9],111:[2,9],115:[2,9],131:[2,9]},{1:[2,10],6:[2,10],28:[2,10],107:[2,10],109:[2,10],111:[2,10],115:[2,10],131:[2,10]},{1:[2,11],6:[2,11],28:[2,11],107:[2,11],109:[2,11],111:[2,11],115:[2,11],131:[2,11]},{29:108,30:[1,75],66:[1,107],81:105,82:[1,106],83:[1,109]},{29:111,30:[1,75],85:110},{1:[2,73],6:[2,73],27:[2,73],28:[2,73],40:[1,112],49:[2,73],54:[2,73],57:[2,73],66:[2,73],67:[2,73],68:[2,73],70:[2,73],72:[2,73],73:[2,73],77:[2,73],83:[2,73],90:[2,73],91:[2,73],92:[2,73],97:[2,73],107:[2,73],109:[2,73],110:[2,73],111:[2,73],115:[2,73],123:[2,73],131:[2,73],133:[2,73],134:[2,73],137:[2,73],138:[2,73],139:[2,73],140:[2,73],141:[2,73],142:[2,73]},{1:[2,74],6:[2,74],27:[2,74],28:[2,74],49:[2,74],54:[2,74],57:[2,74],66:[2,74],67:[2,74],68:[2,74],70:[2,74],72:[2,74],73:[2,74],77:[2,74],83:[2,74],90:[2,74],91:[2,74],92:[2,74],97:[2,74],107:[2,74],109:[2,74],110:[2,74],111:[2,74],115:[2,74],123:[2,74],131:[2,74],133:[2,74],134:[2,74],137:[2,74],138:[2,74],139:[2,74],140:[2,74],141:[2,74],142:[2,74]},{1:[2,75],6:[2,75],27:[2,75],28:[2,75],49:[2,75],54:[2,75],57:[2,75],66:[2,75],67:[2,75],68:[2,75],70:[2,75],72:[2,75],73:[2,75],77:[2,75],83:[2,75],90:[2,75],91:[2,75],92:[2,75],97:[2,75],107:[2,75],109:[2,75],110:[2,75],111:[2,75],115:[2,75],123:[2,75],131:[2,75],133:[2,75],134:[2,75],137:[2,75],138:[2,75],139:[2,75],140:[2,75],141:[2,75],142:[2,75]},{1:[2,76],6:[2,76],27:[2,76],28:[2,76],49:[2,76],54:[2,76],57:[2,76],66:[2,76],67:[2,76],68:[2,76],70:[2,76],72:[2,76],73:[2,76],77:[2,76],83:[2,76],90:[2,76],91:[2,76],92:[2,76],97:[2,76],107:[2,76],109:[2,76],110:[2,76],111:[2,76],115:[2,76],123:[2,76],131:[2,76],133:[2,76],134:[2,76],137:[2,76],138:[2,76],139:[2,76],140:[2,76],141:[2,76],142:[2,76]},{1:[2,77],6:[2,77],27:[2,77],28:[2,77],49:[2,77],54:[2,77],57:[2,77],66:[2,77],67:[2,77],68:[2,77],70:[2,77],72:[2,77],73:[2,77],77:[2,77],83:[2,77],90:[2,77],91:[2,77],92:[2,77],97:[2,77],107:[2,77],109:[2,77],110:[2,77],111:[2,77],115:[2,77],123:[2,77],131:[2,77],133:[2,77],134:[2,77],137:[2,77],138:[2,77],139:[2,77],140:[2,77],141:[2,77],142:[2,77]},{1:[2,117],6:[2,117],27:[2,117],28:[2,117],49:[2,117],54:[2,117],57:[2,117],66:[2,117],67:[2,117],68:[2,117],70:[2,117],72:[2,117],73:[2,117],77:[2,117],83:[2,117],88:113,90:[2,117],91:[1,114],92:[2,117],97:[2,117],107:[2,117],109:[2,117],110:[2,117],111:[2,117],115:[2,117],123:[2,117],131:[2,117],133:[2,117],134:[2,117],137:[2,117],138:[2,117],139:[2,117],140:[2,117],141:[2,117],142:[2,117]},{29:118,30:[1,75],44:119,48:115,49:[2,55],54:[2,55],55:116,56:117,58:120,59:121,75:[1,72],95:[1,122],96:[1,123]},{5:124,27:[1,5]},{8:125,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:127,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:128,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{15:130,16:131,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:132,44:65,58:51,59:52,61:129,63:29,64:30,65:31,75:[1,72],89:[1,32],94:[1,60],95:[1,61],96:[1,59],106:[1,58]},{15:130,16:131,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:132,44:65,58:51,59:52,61:133,63:29,64:30,65:31,75:[1,72],89:[1,32],94:[1,60],95:[1,61],96:[1,59],106:[1,58]},{1:[2,70],6:[2,70],27:[2,70],28:[2,70],40:[2,70],49:[2,70],54:[2,70],57:[2,70],66:[2,70],67:[2,70],68:[2,70],70:[2,70],72:[2,70],73:[2,70],77:[2,70],79:[1,137],83:[2,70],90:[2,70],91:[2,70],92:[2,70],97:[2,70],107:[2,70],109:[2,70],110:[2,70],111:[2,70],115:[2,70],123:[2,70],131:[2,70],133:[2,70],134:[2,70],135:[1,134],136:[1,135],137:[2,70],138:[2,70],139:[2,70],140:[2,70],141:[2,70],142:[2,70],143:[1,136]},{1:[2,191],6:[2,191],27:[2,191],28:[2,191],49:[2,191],54:[2,191],57:[2,191],72:[2,191],77:[2,191],83:[2,191],92:[2,191],97:[2,191],107:[2,191],109:[2,191],110:[2,191],111:[2,191],115:[2,191],123:[2,191],126:[1,138],131:[2,191],133:[2,191],134:[2,191],137:[2,191],138:[2,191],139:[2,191],140:[2,191],141:[2,191],142:[2,191]},{5:139,27:[1,5]},{5:140,27:[1,5]},{1:[2,159],6:[2,159],27:[2,159],28:[2,159],49:[2,159],54:[2,159],57:[2,159],72:[2,159],77:[2,159],83:[2,159],92:[2,159],97:[2,159],107:[2,159],109:[2,159],110:[2,159],111:[2,159],115:[2,159],123:[2,159],131:[2,159],133:[2,159],134:[2,159],137:[2,159],138:[2,159],139:[2,159],140:[2,159],141:[2,159],142:[2,159]},{5:141,27:[1,5]},{8:142,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,143],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,93],5:144,6:[2,93],15:130,16:131,27:[1,5],28:[2,93],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:132,44:65,49:[2,93],54:[2,93],57:[2,93],58:51,59:52,61:146,63:29,64:30,65:31,72:[2,93],75:[1,72],77:[2,93],79:[1,145],83:[2,93],89:[1,32],92:[2,93],94:[1,60],95:[1,61],96:[1,59],97:[2,93],106:[1,58],107:[2,93],109:[2,93],110:[2,93],111:[2,93],115:[2,93],123:[2,93],131:[2,93],133:[2,93],134:[2,93],137:[2,93],138:[2,93],139:[2,93],140:[2,93],141:[2,93],142:[2,93]},{8:147,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,47],6:[2,47],8:148,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,28:[2,47],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],107:[2,47],108:43,109:[2,47],111:[2,47],112:44,113:[1,69],114:45,115:[2,47],116:71,124:[1,46],129:41,130:[1,66],131:[2,47],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,48],6:[2,48],27:[2,48],28:[2,48],54:[2,48],77:[2,48],107:[2,48],109:[2,48],111:[2,48],115:[2,48],131:[2,48]},{1:[2,71],6:[2,71],27:[2,71],28:[2,71],40:[2,71],49:[2,71],54:[2,71],57:[2,71],66:[2,71],67:[2,71],68:[2,71],70:[2,71],72:[2,71],73:[2,71],77:[2,71],83:[2,71],90:[2,71],91:[2,71],92:[2,71],97:[2,71],107:[2,71],109:[2,71],110:[2,71],111:[2,71],115:[2,71],123:[2,71],131:[2,71],133:[2,71],134:[2,71],137:[2,71],138:[2,71],139:[2,71],140:[2,71],141:[2,71],142:[2,71]},{1:[2,72],6:[2,72],27:[2,72],28:[2,72],40:[2,72],49:[2,72],54:[2,72],57:[2,72],66:[2,72],67:[2,72],68:[2,72],70:[2,72],72:[2,72],73:[2,72],77:[2,72],83:[2,72],90:[2,72],91:[2,72],92:[2,72],97:[2,72],107:[2,72],109:[2,72],110:[2,72],111:[2,72],115:[2,72],123:[2,72],131:[2,72],133:[2,72],134:[2,72],137:[2,72],138:[2,72],139:[2,72],140:[2,72],141:[2,72],142:[2,72]},{1:[2,31],6:[2,31],27:[2,31],28:[2,31],49:[2,31],54:[2,31],57:[2,31],66:[2,31],67:[2,31],68:[2,31],70:[2,31],72:[2,31],73:[2,31],77:[2,31],83:[2,31],90:[2,31],91:[2,31],92:[2,31],97:[2,31],107:[2,31],109:[2,31],110:[2,31],111:[2,31],115:[2,31],123:[2,31],131:[2,31],133:[2,31],134:[2,31],137:[2,31],138:[2,31],139:[2,31],140:[2,31],141:[2,31],142:[2,31]},{1:[2,32],6:[2,32],27:[2,32],28:[2,32],49:[2,32],54:[2,32],57:[2,32],66:[2,32],67:[2,32],68:[2,32],70:[2,32],72:[2,32],73:[2,32],77:[2,32],83:[2,32],90:[2,32],91:[2,32],92:[2,32],97:[2,32],107:[2,32],109:[2,32],110:[2,32],111:[2,32],115:[2,32],123:[2,32],131:[2,32],133:[2,32],134:[2,32],137:[2,32],138:[2,32],139:[2,32],140:[2,32],141:[2,32],142:[2,32]},{1:[2,33],6:[2,33],27:[2,33],28:[2,33],49:[2,33],54:[2,33],57:[2,33],66:[2,33],67:[2,33],68:[2,33],70:[2,33],72:[2,33],73:[2,33],77:[2,33],83:[2,33],90:[2,33],91:[2,33],92:[2,33],97:[2,33],107:[2,33],109:[2,33],110:[2,33],111:[2,33],115:[2,33],123:[2,33],131:[2,33],133:[2,33],134:[2,33],137:[2,33],138:[2,33],139:[2,33],140:[2,33],141:[2,33],142:[2,33]},{1:[2,34],6:[2,34],27:[2,34],28:[2,34],49:[2,34],54:[2,34],57:[2,34],66:[2,34],67:[2,34],68:[2,34],70:[2,34],72:[2,34],73:[2,34],77:[2,34],83:[2,34],90:[2,34],91:[2,34],92:[2,34],97:[2,34],107:[2,34],109:[2,34],110:[2,34],111:[2,34],115:[2,34],123:[2,34],131:[2,34],133:[2,34],134:[2,34],137:[2,34],138:[2,34],139:[2,34],140:[2,34],141:[2,34],142:[2,34]},{1:[2,35],6:[2,35],27:[2,35],28:[2,35],49:[2,35],54:[2,35],57:[2,35],66:[2,35],67:[2,35],68:[2,35],70:[2,35],72:[2,35],73:[2,35],77:[2,35],83:[2,35],90:[2,35],91:[2,35],92:[2,35],97:[2,35],107:[2,35],109:[2,35],110:[2,35],111:[2,35],115:[2,35],123:[2,35],131:[2,35],133:[2,35],134:[2,35],137:[2,35],138:[2,35],139:[2,35],140:[2,35],141:[2,35],142:[2,35]},{4:149,7:4,8:6,9:7,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,150],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:151,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,155],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,60:156,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],93:153,94:[1,60],95:[1,61],96:[1,59],97:[1,152],99:154,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,123],6:[2,123],27:[2,123],28:[2,123],49:[2,123],54:[2,123],57:[2,123],66:[2,123],67:[2,123],68:[2,123],70:[2,123],72:[2,123],73:[2,123],77:[2,123],83:[2,123],90:[2,123],91:[2,123],92:[2,123],97:[2,123],107:[2,123],109:[2,123],110:[2,123],111:[2,123],115:[2,123],123:[2,123],131:[2,123],133:[2,123],134:[2,123],137:[2,123],138:[2,123],139:[2,123],140:[2,123],141:[2,123],142:[2,123]},{1:[2,124],6:[2,124],27:[2,124],28:[2,124],29:157,30:[1,75],49:[2,124],54:[2,124],57:[2,124],66:[2,124],67:[2,124],68:[2,124],70:[2,124],72:[2,124],73:[2,124],77:[2,124],83:[2,124],90:[2,124],91:[2,124],92:[2,124],97:[2,124],107:[2,124],109:[2,124],110:[2,124],111:[2,124],115:[2,124],123:[2,124],131:[2,124],133:[2,124],134:[2,124],137:[2,124],138:[2,124],139:[2,124],140:[2,124],141:[2,124],142:[2,124]},{27:[2,51]},{27:[2,52]},{1:[2,66],6:[2,66],27:[2,66],28:[2,66],40:[2,66],49:[2,66],54:[2,66],57:[2,66],66:[2,66],67:[2,66],68:[2,66],70:[2,66],72:[2,66],73:[2,66],77:[2,66],79:[2,66],83:[2,66],90:[2,66],91:[2,66],92:[2,66],97:[2,66],107:[2,66],109:[2,66],110:[2,66],111:[2,66],115:[2,66],123:[2,66],131:[2,66],133:[2,66],134:[2,66],135:[2,66],136:[2,66],137:[2,66],138:[2,66],139:[2,66],140:[2,66],141:[2,66],142:[2,66],143:[2,66]},{1:[2,69],6:[2,69],27:[2,69],28:[2,69],40:[2,69],49:[2,69],54:[2,69],57:[2,69],66:[2,69],67:[2,69],68:[2,69],70:[2,69],72:[2,69],73:[2,69],77:[2,69],79:[2,69],83:[2,69],90:[2,69],91:[2,69],92:[2,69],97:[2,69],107:[2,69],109:[2,69],110:[2,69],111:[2,69],115:[2,69],123:[2,69],131:[2,69],133:[2,69],134:[2,69],135:[2,69],136:[2,69],137:[2,69],138:[2,69],139:[2,69],140:[2,69],141:[2,69],142:[2,69],143:[2,69]},{8:158,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:159,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:160,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{5:161,8:162,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,5],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{29:167,30:[1,75],58:168,59:169,64:163,75:[1,72],96:[1,59],118:164,119:[1,165],120:166},{117:170,121:[1,171],122:[1,172]},{6:[2,88],11:176,27:[2,88],29:177,30:[1,75],31:178,32:[1,73],33:[1,74],41:174,42:175,44:179,46:[1,50],54:[2,88],76:173,77:[2,88],95:[1,122]},{1:[2,29],6:[2,29],27:[2,29],28:[2,29],43:[2,29],49:[2,29],54:[2,29],57:[2,29],66:[2,29],67:[2,29],68:[2,29],70:[2,29],72:[2,29],73:[2,29],77:[2,29],83:[2,29],90:[2,29],91:[2,29],92:[2,29],97:[2,29],107:[2,29],109:[2,29],110:[2,29],111:[2,29],115:[2,29],123:[2,29],131:[2,29],133:[2,29],134:[2,29],137:[2,29],138:[2,29],139:[2,29],140:[2,29],141:[2,29],142:[2,29]},{1:[2,30],6:[2,30],27:[2,30],28:[2,30],43:[2,30],49:[2,30],54:[2,30],57:[2,30],66:[2,30],67:[2,30],68:[2,30],70:[2,30],72:[2,30],73:[2,30],77:[2,30],83:[2,30],90:[2,30],91:[2,30],92:[2,30],97:[2,30],107:[2,30],109:[2,30],110:[2,30],111:[2,30],115:[2,30],123:[2,30],131:[2,30],133:[2,30],134:[2,30],137:[2,30],138:[2,30],139:[2,30],140:[2,30],141:[2,30],142:[2,30]},{1:[2,28],6:[2,28],27:[2,28],28:[2,28],40:[2,28],43:[2,28],49:[2,28],54:[2,28],57:[2,28],66:[2,28],67:[2,28],68:[2,28],70:[2,28],72:[2,28],73:[2,28],77:[2,28],79:[2,28],82:[2,28],83:[2,28],90:[2,28],91:[2,28],92:[2,28],97:[2,28],107:[2,28],109:[2,28],110:[2,28],111:[2,28],115:[2,28],121:[2,28],122:[2,28],123:[2,28],131:[2,28],133:[2,28],134:[2,28],135:[2,28],136:[2,28],137:[2,28],138:[2,28],139:[2,28],140:[2,28],141:[2,28],142:[2,28],143:[2,28]},{1:[2,6],6:[2,6],7:180,8:6,9:7,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,28:[2,6],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],107:[2,6],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,3]},{1:[2,26],6:[2,26],27:[2,26],28:[2,26],49:[2,26],54:[2,26],57:[2,26],72:[2,26],77:[2,26],83:[2,26],92:[2,26],97:[2,26],103:[2,26],104:[2,26],107:[2,26],109:[2,26],110:[2,26],111:[2,26],115:[2,26],123:[2,26],126:[2,26],128:[2,26],131:[2,26],133:[2,26],134:[2,26],137:[2,26],138:[2,26],139:[2,26],140:[2,26],141:[2,26],142:[2,26]},{6:[1,76],28:[1,181]},{1:[2,202],6:[2,202],27:[2,202],28:[2,202],49:[2,202],54:[2,202],57:[2,202],72:[2,202],77:[2,202],83:[2,202],92:[2,202],97:[2,202],107:[2,202],109:[2,202],110:[2,202],111:[2,202],115:[2,202],123:[2,202],131:[2,202],133:[2,202],134:[2,202],137:[2,202],138:[2,202],139:[2,202],140:[2,202],141:[2,202],142:[2,202]},{8:182,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:183,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:184,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:185,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:186,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:187,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:188,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:189,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,158],6:[2,158],27:[2,158],28:[2,158],49:[2,158],54:[2,158],57:[2,158],72:[2,158],77:[2,158],83:[2,158],92:[2,158],97:[2,158],107:[2,158],109:[2,158],110:[2,158],111:[2,158],115:[2,158],123:[2,158],131:[2,158],133:[2,158],134:[2,158],137:[2,158],138:[2,158],139:[2,158],140:[2,158],141:[2,158],142:[2,158]},{1:[2,163],6:[2,163],27:[2,163],28:[2,163],49:[2,163],54:[2,163],57:[2,163],72:[2,163],77:[2,163],83:[2,163],92:[2,163],97:[2,163],107:[2,163],109:[2,163],110:[2,163],111:[2,163],115:[2,163],123:[2,163],131:[2,163],133:[2,163],134:[2,163],137:[2,163],138:[2,163],139:[2,163],140:[2,163],141:[2,163],142:[2,163]},{8:190,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,157],6:[2,157],27:[2,157],28:[2,157],49:[2,157],54:[2,157],57:[2,157],72:[2,157],77:[2,157],83:[2,157],92:[2,157],97:[2,157],107:[2,157],109:[2,157],110:[2,157],111:[2,157],115:[2,157],123:[2,157],131:[2,157],133:[2,157],134:[2,157],137:[2,157],138:[2,157],139:[2,157],140:[2,157],141:[2,157],142:[2,157]},{1:[2,162],6:[2,162],27:[2,162],28:[2,162],49:[2,162],54:[2,162],57:[2,162],72:[2,162],77:[2,162],83:[2,162],92:[2,162],97:[2,162],107:[2,162],109:[2,162],110:[2,162],111:[2,162],115:[2,162],123:[2,162],131:[2,162],133:[2,162],134:[2,162],137:[2,162],138:[2,162],139:[2,162],140:[2,162],141:[2,162],142:[2,162]},{88:191,91:[1,114]},{1:[2,67],6:[2,67],27:[2,67],28:[2,67],40:[2,67],49:[2,67],54:[2,67],57:[2,67],66:[2,67],67:[2,67],68:[2,67],70:[2,67],72:[2,67],73:[2,67],77:[2,67],79:[2,67],83:[2,67],90:[2,67],91:[2,67],92:[2,67],97:[2,67],107:[2,67],109:[2,67],110:[2,67],111:[2,67],115:[2,67],123:[2,67],131:[2,67],133:[2,67],134:[2,67],135:[2,67],136:[2,67],137:[2,67],138:[2,67],139:[2,67],140:[2,67],141:[2,67],142:[2,67],143:[2,67]},{91:[2,120]},{29:192,30:[1,75]},{29:193,30:[1,75]},{1:[2,81],6:[2,81],27:[2,81],28:[2,81],29:194,30:[1,75],40:[2,81],49:[2,81],54:[2,81],57:[2,81],66:[2,81],67:[2,81],68:[2,81],70:[2,81],72:[2,81],73:[2,81],77:[2,81],79:[2,81],83:[2,81],90:[2,81],91:[2,81],92:[2,81],97:[2,81],107:[2,81],109:[2,81],110:[2,81],111:[2,81],115:[2,81],123:[2,81],131:[2,81],133:[2,81],134:[2,81],135:[2,81],136:[2,81],137:[2,81],138:[2,81],139:[2,81],140:[2,81],141:[2,81],142:[2,81],143:[2,81]},{1:[2,82],6:[2,82],27:[2,82],28:[2,82],40:[2,82],49:[2,82],54:[2,82],57:[2,82],66:[2,82],67:[2,82],68:[2,82],70:[2,82],72:[2,82],73:[2,82],77:[2,82],79:[2,82],83:[2,82],90:[2,82],91:[2,82],92:[2,82],97:[2,82],107:[2,82],109:[2,82],110:[2,82],111:[2,82],115:[2,82],123:[2,82],131:[2,82],133:[2,82],134:[2,82],135:[2,82],136:[2,82],137:[2,82],138:[2,82],139:[2,82],140:[2,82],141:[2,82],142:[2,82],143:[2,82]},{8:196,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],57:[1,200],58:51,59:52,61:40,63:29,64:30,65:31,71:195,74:197,75:[1,72],78:[1,47],80:[1,25],83:[1,199],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],98:198,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{69:201,70:[1,101],73:[1,102]},{88:202,91:[1,114]},{1:[2,68],6:[2,68],27:[2,68],28:[2,68],40:[2,68],49:[2,68],54:[2,68],57:[2,68],66:[2,68],67:[2,68],68:[2,68],70:[2,68],72:[2,68],73:[2,68],77:[2,68],79:[2,68],83:[2,68],90:[2,68],91:[2,68],92:[2,68],97:[2,68],107:[2,68],109:[2,68],110:[2,68],111:[2,68],115:[2,68],123:[2,68],131:[2,68],133:[2,68],134:[2,68],135:[2,68],136:[2,68],137:[2,68],138:[2,68],139:[2,68],140:[2,68],141:[2,68],142:[2,68],143:[2,68]},{1:[2,101],6:[2,101],27:[2,101],28:[2,101],49:[2,101],54:[2,101],57:[2,101],72:[2,101],77:[2,101],83:[2,101],92:[2,101],97:[2,101],107:[2,101],109:[2,101],110:[2,101],111:[2,101],115:[2,101],123:[2,101],131:[2,101],133:[2,101],134:[2,101],137:[2,101],138:[2,101],139:[2,101],140:[2,101],141:[2,101],142:[2,101]},{29:108,30:[1,75],81:203,83:[1,109]},{82:[1,204]},{1:[2,104],6:[2,104],27:[2,104],28:[2,104],49:[2,104],54:[2,104],57:[2,104],72:[2,104],77:[2,104],82:[1,205],83:[2,104],92:[2,104],97:[2,104],107:[2,104],109:[2,104],110:[2,104],111:[2,104],115:[2,104],123:[2,104],131:[2,104],133:[2,104],134:[2,104],137:[2,104],138:[2,104],139:[2,104],140:[2,104],141:[2,104],142:[2,104]},{82:[1,206]},{1:[2,107],6:[2,107],27:[1,207],28:[2,107],49:[2,107],54:[2,107],57:[2,107],72:[2,107],77:[2,107],83:[2,107],92:[2,107],97:[2,107],107:[2,107],109:[2,107],110:[2,107],111:[2,107],115:[2,107],123:[2,107],131:[2,107],133:[2,107],134:[2,107],137:[2,107],138:[2,107],139:[2,107],140:[2,107],141:[2,107],142:[2,107]},{1:[2,109],6:[2,109],27:[2,109],28:[2,109],49:[2,109],54:[2,109],57:[2,109],66:[1,208],72:[2,109],77:[2,109],83:[2,109],92:[2,109],97:[2,109],107:[2,109],109:[2,109],110:[2,109],111:[2,109],115:[2,109],123:[2,109],131:[2,109],133:[2,109],134:[2,109],137:[2,109],138:[2,109],139:[2,109],140:[2,109],141:[2,109],142:[2,109]},{6:[1,210],8:209,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,211],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,118],6:[2,118],27:[2,118],28:[2,118],49:[2,118],54:[2,118],57:[2,118],66:[2,118],67:[2,118],68:[2,118],70:[2,118],72:[2,118],73:[2,118],77:[2,118],83:[2,118],90:[2,118],91:[2,118],92:[2,118],97:[2,118],107:[2,118],109:[2,118],110:[2,118],111:[2,118],115:[2,118],123:[2,118],131:[2,118],133:[2,118],134:[2,118],137:[2,118],138:[2,118],139:[2,118],140:[2,118],141:[2,118],142:[2,118]},{8:214,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,155],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,60:156,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],92:[1,212],93:213,94:[1,60],95:[1,61],96:[1,59],99:154,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{49:[1,215],54:[1,216]},{49:[2,56],54:[2,56]},{40:[1,218],49:[2,58],54:[2,58],57:[1,217]},{40:[2,61],49:[2,61],54:[2,61],57:[2,61]},{40:[2,62],49:[2,62],54:[2,62],57:[2,62]},{40:[2,63],49:[2,63],54:[2,63],57:[2,63]},{40:[2,64],49:[2,64],54:[2,64],57:[2,64]},{29:157,30:[1,75]},{8:214,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,155],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,60:156,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],93:153,94:[1,60],95:[1,61],96:[1,59],97:[1,152],99:154,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,50],6:[2,50],27:[2,50],28:[2,50],49:[2,50],54:[2,50],57:[2,50],72:[2,50],77:[2,50],83:[2,50],92:[2,50],97:[2,50],107:[2,50],109:[2,50],110:[2,50],111:[2,50],115:[2,50],123:[2,50],131:[2,50],133:[2,50],134:[2,50],137:[2,50],138:[2,50],139:[2,50],140:[2,50],141:[2,50],142:[2,50]},{1:[2,195],6:[2,195],27:[2,195],28:[2,195],49:[2,195],54:[2,195],57:[2,195],72:[2,195],77:[2,195],83:[2,195],92:[2,195],97:[2,195],107:[2,195],108:89,109:[2,195],110:[2,195],111:[2,195],114:90,115:[2,195],116:71,123:[2,195],131:[2,195],133:[2,195],134:[2,195],137:[1,80],138:[2,195],139:[2,195],140:[2,195],141:[2,195],142:[2,195]},{108:92,109:[1,67],111:[1,68],114:93,115:[1,70],116:71,131:[1,91]},{1:[2,196],6:[2,196],27:[2,196],28:[2,196],49:[2,196],54:[2,196],57:[2,196],72:[2,196],77:[2,196],83:[2,196],92:[2,196],97:[2,196],107:[2,196],108:89,109:[2,196],110:[2,196],111:[2,196],114:90,115:[2,196],116:71,123:[2,196],131:[2,196],133:[2,196],134:[2,196],137:[1,80],138:[2,196],139:[2,196],140:[2,196],141:[2,196],142:[2,196]},{1:[2,197],6:[2,197],27:[2,197],28:[2,197],49:[2,197],54:[2,197],57:[2,197],72:[2,197],77:[2,197],83:[2,197],92:[2,197],97:[2,197],107:[2,197],108:89,109:[2,197],110:[2,197],111:[2,197],114:90,115:[2,197],116:71,123:[2,197],131:[2,197],133:[2,197],134:[2,197],137:[1,80],138:[2,197],139:[2,197],140:[2,197],141:[2,197],142:[2,197]},{1:[2,198],6:[2,198],27:[2,198],28:[2,198],49:[2,198],54:[2,198],57:[2,198],66:[2,70],67:[2,70],68:[2,70],70:[2,70],72:[2,198],73:[2,70],77:[2,198],83:[2,198],90:[2,70],91:[2,70],92:[2,198],97:[2,198],107:[2,198],109:[2,198],110:[2,198],111:[2,198],115:[2,198],123:[2,198],131:[2,198],133:[2,198],134:[2,198],137:[2,198],138:[2,198],139:[2,198],140:[2,198],141:[2,198],142:[2,198]},{62:95,66:[1,97],67:[1,98],68:[1,99],69:100,70:[1,101],73:[1,102],87:94,90:[1,96],91:[2,119]},{62:104,66:[1,97],67:[1,98],68:[1,99],69:100,70:[1,101],73:[1,102],87:103,90:[1,96],91:[2,119]},{66:[2,73],67:[2,73],68:[2,73],70:[2,73],73:[2,73],90:[2,73],91:[2,73]},{1:[2,199],6:[2,199],27:[2,199],28:[2,199],49:[2,199],54:[2,199],57:[2,199],66:[2,70],67:[2,70],68:[2,70],70:[2,70],72:[2,199],73:[2,70],77:[2,199],83:[2,199],90:[2,70],91:[2,70],92:[2,199],97:[2,199],107:[2,199],109:[2,199],110:[2,199],111:[2,199],115:[2,199],123:[2,199],131:[2,199],133:[2,199],134:[2,199],137:[2,199],138:[2,199],139:[2,199],140:[2,199],141:[2,199],142:[2,199]},{1:[2,200],6:[2,200],27:[2,200],28:[2,200],49:[2,200],54:[2,200],57:[2,200],72:[2,200],77:[2,200],83:[2,200],92:[2,200],97:[2,200],107:[2,200],109:[2,200],110:[2,200],111:[2,200],115:[2,200],123:[2,200],131:[2,200],133:[2,200],134:[2,200],137:[2,200],138:[2,200],139:[2,200],140:[2,200],141:[2,200],142:[2,200]},{1:[2,201],6:[2,201],27:[2,201],28:[2,201],49:[2,201],54:[2,201],57:[2,201],72:[2,201],77:[2,201],83:[2,201],92:[2,201],97:[2,201],107:[2,201],109:[2,201],110:[2,201],111:[2,201],115:[2,201],123:[2,201],131:[2,201],133:[2,201],134:[2,201],137:[2,201],138:[2,201],139:[2,201],140:[2,201],141:[2,201],142:[2,201]},{8:219,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,220],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:221,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{5:222,27:[1,5],130:[1,223]},{1:[2,144],6:[2,144],27:[2,144],28:[2,144],49:[2,144],54:[2,144],57:[2,144],72:[2,144],77:[2,144],83:[2,144],92:[2,144],97:[2,144],102:224,103:[1,225],104:[1,226],107:[2,144],109:[2,144],110:[2,144],111:[2,144],115:[2,144],123:[2,144],131:[2,144],133:[2,144],134:[2,144],137:[2,144],138:[2,144],139:[2,144],140:[2,144],141:[2,144],142:[2,144]},{1:[2,156],6:[2,156],27:[2,156],28:[2,156],49:[2,156],54:[2,156],57:[2,156],72:[2,156],77:[2,156],83:[2,156],92:[2,156],97:[2,156],107:[2,156],109:[2,156],110:[2,156],111:[2,156],115:[2,156],123:[2,156],131:[2,156],133:[2,156],134:[2,156],137:[2,156],138:[2,156],139:[2,156],140:[2,156],141:[2,156],142:[2,156]},{1:[2,164],6:[2,164],27:[2,164],28:[2,164],49:[2,164],54:[2,164],57:[2,164],72:[2,164],77:[2,164],83:[2,164],92:[2,164],97:[2,164],107:[2,164],109:[2,164],110:[2,164],111:[2,164],115:[2,164],123:[2,164],131:[2,164],133:[2,164],134:[2,164],137:[2,164],138:[2,164],139:[2,164],140:[2,164],141:[2,164],142:[2,164]},{27:[1,227],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{125:228,127:229,128:[1,230]},{1:[2,94],6:[2,94],27:[2,94],28:[2,94],49:[2,94],54:[2,94],57:[2,94],72:[2,94],77:[2,94],83:[2,94],92:[2,94],97:[2,94],107:[2,94],109:[2,94],110:[2,94],111:[2,94],115:[2,94],123:[2,94],131:[2,94],133:[2,94],134:[2,94],137:[2,94],138:[2,94],139:[2,94],140:[2,94],141:[2,94],142:[2,94]},{8:231,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,97],5:232,6:[2,97],27:[1,5],28:[2,97],49:[2,97],54:[2,97],57:[2,97],66:[2,70],67:[2,70],68:[2,70],70:[2,70],72:[2,97],73:[2,70],77:[2,97],79:[1,233],83:[2,97],90:[2,70],91:[2,70],92:[2,97],97:[2,97],107:[2,97],109:[2,97],110:[2,97],111:[2,97],115:[2,97],123:[2,97],131:[2,97],133:[2,97],134:[2,97],137:[2,97],138:[2,97],139:[2,97],140:[2,97],141:[2,97],142:[2,97]},{1:[2,149],6:[2,149],27:[2,149],28:[2,149],49:[2,149],54:[2,149],57:[2,149],72:[2,149],77:[2,149],83:[2,149],92:[2,149],97:[2,149],107:[2,149],108:89,109:[2,149],110:[2,149],111:[2,149],114:90,115:[2,149],116:71,123:[2,149],131:[2,149],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,46],6:[2,46],28:[2,46],107:[2,46],108:89,109:[2,46],111:[2,46],114:90,115:[2,46],116:71,131:[2,46],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{6:[1,76],107:[1,234]},{4:235,7:4,8:6,9:7,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{6:[2,140],27:[2,140],54:[2,140],57:[1,237],83:[1,199],97:[2,140],98:236,108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,126],6:[2,126],27:[2,126],28:[2,126],40:[2,126],49:[2,126],54:[2,126],57:[2,126],66:[2,126],67:[2,126],68:[2,126],70:[2,126],72:[2,126],73:[2,126],77:[2,126],83:[2,126],90:[2,126],91:[2,126],92:[2,126],97:[2,126],107:[2,126],109:[2,126],110:[2,126],111:[2,126],115:[2,126],121:[2,126],122:[2,126],123:[2,126],131:[2,126],133:[2,126],134:[2,126],137:[2,126],138:[2,126],139:[2,126],140:[2,126],141:[2,126],142:[2,126]},{6:[2,53],27:[2,53],53:238,54:[1,239],97:[2,53]},{6:[2,135],27:[2,135],28:[2,135],54:[2,135],92:[2,135],97:[2,135]},{8:214,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,155],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,60:156,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],93:240,94:[1,60],95:[1,61],96:[1,59],99:154,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{6:[2,141],27:[2,141],28:[2,141],54:[2,141],92:[2,141],97:[2,141]},{1:[2,125],6:[2,125],27:[2,125],28:[2,125],40:[2,125],43:[2,125],49:[2,125],54:[2,125],57:[2,125],66:[2,125],67:[2,125],68:[2,125],70:[2,125],72:[2,125],73:[2,125],77:[2,125],79:[2,125],83:[2,125],90:[2,125],91:[2,125],92:[2,125],97:[2,125],107:[2,125],109:[2,125],110:[2,125],111:[2,125],115:[2,125],123:[2,125],131:[2,125],133:[2,125],134:[2,125],135:[2,125],136:[2,125],137:[2,125],138:[2,125],139:[2,125],140:[2,125],141:[2,125],142:[2,125],143:[2,125]},{5:241,27:[1,5],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,152],6:[2,152],27:[2,152],28:[2,152],49:[2,152],54:[2,152],57:[2,152],72:[2,152],77:[2,152],83:[2,152],92:[2,152],97:[2,152],107:[2,152],108:89,109:[1,67],110:[1,242],111:[1,68],114:90,115:[1,70],116:71,123:[2,152],131:[2,152],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,154],6:[2,154],27:[2,154],28:[2,154],49:[2,154],54:[2,154],57:[2,154],72:[2,154],77:[2,154],83:[2,154],92:[2,154],97:[2,154],107:[2,154],108:89,109:[1,67],110:[1,243],111:[1,68],114:90,115:[1,70],116:71,123:[2,154],131:[2,154],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,160],6:[2,160],27:[2,160],28:[2,160],49:[2,160],54:[2,160],57:[2,160],72:[2,160],77:[2,160],83:[2,160],92:[2,160],97:[2,160],107:[2,160],109:[2,160],110:[2,160],111:[2,160],115:[2,160],123:[2,160],131:[2,160],133:[2,160],134:[2,160],137:[2,160],138:[2,160],139:[2,160],140:[2,160],141:[2,160],142:[2,160]},{1:[2,161],6:[2,161],27:[2,161],28:[2,161],49:[2,161],54:[2,161],57:[2,161],72:[2,161],77:[2,161],83:[2,161],92:[2,161],97:[2,161],107:[2,161],108:89,109:[1,67],110:[2,161],111:[1,68],114:90,115:[1,70],116:71,123:[2,161],131:[2,161],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,165],6:[2,165],27:[2,165],28:[2,165],49:[2,165],54:[2,165],57:[2,165],72:[2,165],77:[2,165],83:[2,165],92:[2,165],97:[2,165],107:[2,165],109:[2,165],110:[2,165],111:[2,165],115:[2,165],123:[2,165],131:[2,165],133:[2,165],134:[2,165],137:[2,165],138:[2,165],139:[2,165],140:[2,165],141:[2,165],142:[2,165]},{121:[2,167],122:[2,167]},{29:167,30:[1,75],58:168,59:169,75:[1,72],96:[1,123],118:244,120:166},{54:[1,245],121:[2,172],122:[2,172]},{54:[2,169],121:[2,169],122:[2,169]},{54:[2,170],121:[2,170],122:[2,170]},{54:[2,171],121:[2,171],122:[2,171]},{1:[2,166],6:[2,166],27:[2,166],28:[2,166],49:[2,166],54:[2,166],57:[2,166],72:[2,166],77:[2,166],83:[2,166],92:[2,166],97:[2,166],107:[2,166],109:[2,166],110:[2,166],111:[2,166],115:[2,166],123:[2,166],131:[2,166],133:[2,166],134:[2,166],137:[2,166],138:[2,166],139:[2,166],140:[2,166],141:[2,166],142:[2,166]},{8:246,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:247,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{6:[2,53],27:[2,53],53:248,54:[1,249],77:[2,53]},{6:[2,89],27:[2,89],28:[2,89],54:[2,89],77:[2,89]},{6:[2,39],27:[2,39],28:[2,39],43:[1,250],54:[2,39],77:[2,39]},{6:[2,42],27:[2,42],28:[2,42],54:[2,42],77:[2,42]},{6:[2,43],27:[2,43],28:[2,43],43:[2,43],54:[2,43],77:[2,43]},{6:[2,44],27:[2,44],28:[2,44],43:[2,44],54:[2,44],77:[2,44]},{6:[2,45],27:[2,45],28:[2,45],43:[2,45],54:[2,45],77:[2,45]},{1:[2,5],6:[2,5],28:[2,5],107:[2,5]},{1:[2,27],6:[2,27],27:[2,27],28:[2,27],49:[2,27],54:[2,27],57:[2,27],72:[2,27],77:[2,27],83:[2,27],92:[2,27],97:[2,27],103:[2,27],104:[2,27],107:[2,27],109:[2,27],110:[2,27],111:[2,27],115:[2,27],123:[2,27],126:[2,27],128:[2,27],131:[2,27],133:[2,27],134:[2,27],137:[2,27],138:[2,27],139:[2,27],140:[2,27],141:[2,27],142:[2,27]},{1:[2,203],6:[2,203],27:[2,203],28:[2,203],49:[2,203],54:[2,203],57:[2,203],72:[2,203],77:[2,203],83:[2,203],92:[2,203],97:[2,203],107:[2,203],108:89,109:[2,203],110:[2,203],111:[2,203],114:90,115:[2,203],116:71,123:[2,203],131:[2,203],133:[2,203],134:[2,203],137:[1,80],138:[1,83],139:[2,203],140:[2,203],141:[2,203],142:[2,203]},{1:[2,204],6:[2,204],27:[2,204],28:[2,204],49:[2,204],54:[2,204],57:[2,204],72:[2,204],77:[2,204],83:[2,204],92:[2,204],97:[2,204],107:[2,204],108:89,109:[2,204],110:[2,204],111:[2,204],114:90,115:[2,204],116:71,123:[2,204],131:[2,204],133:[2,204],134:[2,204],137:[1,80],138:[1,83],139:[2,204],140:[2,204],141:[2,204],142:[2,204]},{1:[2,205],6:[2,205],27:[2,205],28:[2,205],49:[2,205],54:[2,205],57:[2,205],72:[2,205],77:[2,205],83:[2,205],92:[2,205],97:[2,205],107:[2,205],108:89,109:[2,205],110:[2,205],111:[2,205],114:90,115:[2,205],116:71,123:[2,205],131:[2,205],133:[2,205],134:[2,205],137:[1,80],138:[2,205],139:[2,205],140:[2,205],141:[2,205],142:[2,205]},{1:[2,206],6:[2,206],27:[2,206],28:[2,206],49:[2,206],54:[2,206],57:[2,206],72:[2,206],77:[2,206],83:[2,206],92:[2,206],97:[2,206],107:[2,206],108:89,109:[2,206],110:[2,206],111:[2,206],114:90,115:[2,206],116:71,123:[2,206],131:[2,206],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[2,206],140:[2,206],141:[2,206],142:[2,206]},{1:[2,207],6:[2,207],27:[2,207],28:[2,207],49:[2,207],54:[2,207],57:[2,207],72:[2,207],77:[2,207],83:[2,207],92:[2,207],97:[2,207],107:[2,207],108:89,109:[2,207],110:[2,207],111:[2,207],114:90,115:[2,207],116:71,123:[2,207],131:[2,207],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[2,207],141:[2,207],142:[1,87]},{1:[2,208],6:[2,208],27:[2,208],28:[2,208],49:[2,208],54:[2,208],57:[2,208],72:[2,208],77:[2,208],83:[2,208],92:[2,208],97:[2,208],107:[2,208],108:89,109:[2,208],110:[2,208],111:[2,208],114:90,115:[2,208],116:71,123:[2,208],131:[2,208],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[2,208],142:[1,87]},{1:[2,209],6:[2,209],27:[2,209],28:[2,209],49:[2,209],54:[2,209],57:[2,209],72:[2,209],77:[2,209],83:[2,209],92:[2,209],97:[2,209],107:[2,209],108:89,109:[2,209],110:[2,209],111:[2,209],114:90,115:[2,209],116:71,123:[2,209],131:[2,209],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[2,209],141:[2,209],142:[2,209]},{1:[2,194],6:[2,194],27:[2,194],28:[2,194],49:[2,194],54:[2,194],57:[2,194],72:[2,194],77:[2,194],83:[2,194],92:[2,194],97:[2,194],107:[2,194],108:89,109:[1,67],110:[2,194],111:[1,68],114:90,115:[1,70],116:71,123:[2,194],131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,193],6:[2,193],27:[2,193],28:[2,193],49:[2,193],54:[2,193],57:[2,193],72:[2,193],77:[2,193],83:[2,193],92:[2,193],97:[2,193],107:[2,193],108:89,109:[1,67],110:[2,193],111:[1,68],114:90,115:[1,70],116:71,123:[2,193],131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,115],6:[2,115],27:[2,115],28:[2,115],49:[2,115],54:[2,115],57:[2,115],66:[2,115],67:[2,115],68:[2,115],70:[2,115],72:[2,115],73:[2,115],77:[2,115],83:[2,115],90:[2,115],91:[2,115],92:[2,115],97:[2,115],107:[2,115],109:[2,115],110:[2,115],111:[2,115],115:[2,115],123:[2,115],131:[2,115],133:[2,115],134:[2,115],137:[2,115],138:[2,115],139:[2,115],140:[2,115],141:[2,115],142:[2,115]},{1:[2,78],6:[2,78],27:[2,78],28:[2,78],40:[2,78],49:[2,78],54:[2,78],57:[2,78],66:[2,78],67:[2,78],68:[2,78],70:[2,78],72:[2,78],73:[2,78],77:[2,78],79:[2,78],83:[2,78],90:[2,78],91:[2,78],92:[2,78],97:[2,78],107:[2,78],109:[2,78],110:[2,78],111:[2,78],115:[2,78],123:[2,78],131:[2,78],133:[2,78],134:[2,78],135:[2,78],136:[2,78],137:[2,78],138:[2,78],139:[2,78],140:[2,78],141:[2,78],142:[2,78],143:[2,78]},{1:[2,79],6:[2,79],27:[2,79],28:[2,79],40:[2,79],49:[2,79],54:[2,79],57:[2,79],66:[2,79],67:[2,79],68:[2,79],70:[2,79],72:[2,79],73:[2,79],77:[2,79],79:[2,79],83:[2,79],90:[2,79],91:[2,79],92:[2,79],97:[2,79],107:[2,79],109:[2,79],110:[2,79],111:[2,79],115:[2,79],123:[2,79],131:[2,79],133:[2,79],134:[2,79],135:[2,79],136:[2,79],137:[2,79],138:[2,79],139:[2,79],140:[2,79],141:[2,79],142:[2,79],143:[2,79]},{1:[2,80],6:[2,80],27:[2,80],28:[2,80],40:[2,80],49:[2,80],54:[2,80],57:[2,80],66:[2,80],67:[2,80],68:[2,80],70:[2,80],72:[2,80],73:[2,80],77:[2,80],79:[2,80],83:[2,80],90:[2,80],91:[2,80],92:[2,80],97:[2,80],107:[2,80],109:[2,80],110:[2,80],111:[2,80],115:[2,80],123:[2,80],131:[2,80],133:[2,80],134:[2,80],135:[2,80],136:[2,80],137:[2,80],138:[2,80],139:[2,80],140:[2,80],141:[2,80],142:[2,80],143:[2,80]},{72:[1,251]},{57:[1,200],72:[2,85],83:[1,199],98:252,108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{72:[2,86]},{8:253,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,72:[2,134],75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{12:[2,128],30:[2,128],32:[2,128],33:[2,128],35:[2,128],36:[2,128],37:[2,128],38:[2,128],45:[2,128],46:[2,128],47:[2,128],51:[2,128],52:[2,128],72:[2,128],75:[2,128],78:[2,128],80:[2,128],84:[2,128],89:[2,128],94:[2,128],95:[2,128],96:[2,128],101:[2,128],105:[2,128],106:[2,128],109:[2,128],111:[2,128],113:[2,128],115:[2,128],124:[2,128],130:[2,128],132:[2,128],133:[2,128],134:[2,128],135:[2,128],136:[2,128]},{12:[2,129],30:[2,129],32:[2,129],33:[2,129],35:[2,129],36:[2,129],37:[2,129],38:[2,129],45:[2,129],46:[2,129],47:[2,129],51:[2,129],52:[2,129],72:[2,129],75:[2,129],78:[2,129],80:[2,129],84:[2,129],89:[2,129],94:[2,129],95:[2,129],96:[2,129],101:[2,129],105:[2,129],106:[2,129],109:[2,129],111:[2,129],113:[2,129],115:[2,129],124:[2,129],130:[2,129],132:[2,129],133:[2,129],134:[2,129],135:[2,129],136:[2,129]},{1:[2,84],6:[2,84],27:[2,84],28:[2,84],40:[2,84],49:[2,84],54:[2,84],57:[2,84],66:[2,84],67:[2,84],68:[2,84],70:[2,84],72:[2,84],73:[2,84],77:[2,84],79:[2,84],83:[2,84],90:[2,84],91:[2,84],92:[2,84],97:[2,84],107:[2,84],109:[2,84],110:[2,84],111:[2,84],115:[2,84],123:[2,84],131:[2,84],133:[2,84],134:[2,84],135:[2,84],136:[2,84],137:[2,84],138:[2,84],139:[2,84],140:[2,84],141:[2,84],142:[2,84],143:[2,84]},{1:[2,116],6:[2,116],27:[2,116],28:[2,116],49:[2,116],54:[2,116],57:[2,116],66:[2,116],67:[2,116],68:[2,116],70:[2,116],72:[2,116],73:[2,116],77:[2,116],83:[2,116],90:[2,116],91:[2,116],92:[2,116],97:[2,116],107:[2,116],109:[2,116],110:[2,116],111:[2,116],115:[2,116],123:[2,116],131:[2,116],133:[2,116],134:[2,116],137:[2,116],138:[2,116],139:[2,116],140:[2,116],141:[2,116],142:[2,116]},{1:[2,102],6:[2,102],27:[2,102],28:[2,102],49:[2,102],54:[2,102],57:[2,102],72:[2,102],77:[2,102],83:[2,102],92:[2,102],97:[2,102],107:[2,102],109:[2,102],110:[2,102],111:[2,102],115:[2,102],123:[2,102],131:[2,102],133:[2,102],134:[2,102],137:[2,102],138:[2,102],139:[2,102],140:[2,102],141:[2,102],142:[2,102]},{29:108,30:[1,75],81:254,83:[1,109]},{29:108,30:[1,75],81:255,83:[1,109]},{29:108,30:[1,75],81:256,83:[1,109]},{25:258,27:[1,259],78:[1,47],86:257},{29:111,30:[1,75],85:260},{1:[2,36],6:[2,36],27:[2,36],28:[2,36],49:[2,36],54:[2,36],57:[2,36],72:[2,36],77:[2,36],83:[2,36],92:[2,36],97:[2,36],107:[2,36],108:89,109:[2,36],110:[2,36],111:[2,36],114:90,115:[2,36],116:71,123:[2,36],131:[2,36],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{8:261,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:262,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,121],6:[2,121],27:[2,121],28:[2,121],49:[2,121],54:[2,121],57:[2,121],66:[2,121],67:[2,121],68:[2,121],70:[2,121],72:[2,121],73:[2,121],77:[2,121],83:[2,121],90:[2,121],91:[2,121],92:[2,121],97:[2,121],107:[2,121],109:[2,121],110:[2,121],111:[2,121],115:[2,121],123:[2,121],131:[2,121],133:[2,121],134:[2,121],137:[2,121],138:[2,121],139:[2,121],140:[2,121],141:[2,121],142:[2,121]},{6:[2,53],27:[2,53],53:263,54:[1,239],92:[2,53]},{6:[2,140],27:[2,140],28:[2,140],54:[2,140],57:[1,264],92:[2,140],97:[2,140],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{50:265,51:[1,62],52:[1,63]},{29:118,30:[1,75],44:119,55:266,56:117,58:120,59:121,75:[1,72],95:[1,122],96:[1,123]},{49:[2,59],54:[2,59]},{8:267,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,210],6:[2,210],27:[2,210],28:[2,210],49:[2,210],54:[2,210],57:[2,210],72:[2,210],77:[2,210],83:[2,210],92:[2,210],97:[2,210],107:[2,210],108:89,109:[2,210],110:[2,210],111:[2,210],114:90,115:[2,210],116:71,123:[2,210],131:[2,210],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{8:268,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,212],6:[2,212],27:[2,212],28:[2,212],49:[2,212],54:[2,212],57:[2,212],72:[2,212],77:[2,212],83:[2,212],92:[2,212],97:[2,212],107:[2,212],108:89,109:[2,212],110:[2,212],111:[2,212],114:90,115:[2,212],116:71,123:[2,212],131:[2,212],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,192],6:[2,192],27:[2,192],28:[2,192],49:[2,192],54:[2,192],57:[2,192],72:[2,192],77:[2,192],83:[2,192],92:[2,192],97:[2,192],107:[2,192],109:[2,192],110:[2,192],111:[2,192],115:[2,192],123:[2,192],131:[2,192],133:[2,192],134:[2,192],137:[2,192],138:[2,192],139:[2,192],140:[2,192],141:[2,192],142:[2,192]},{8:269,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,145],6:[2,145],27:[2,145],28:[2,145],49:[2,145],54:[2,145],57:[2,145],72:[2,145],77:[2,145],83:[2,145],92:[2,145],97:[2,145],103:[1,270],107:[2,145],109:[2,145],110:[2,145],111:[2,145],115:[2,145],123:[2,145],131:[2,145],133:[2,145],134:[2,145],137:[2,145],138:[2,145],139:[2,145],140:[2,145],141:[2,145],142:[2,145]},{5:271,27:[1,5]},{29:272,30:[1,75]},{125:273,127:229,128:[1,230]},{28:[1,274],126:[1,275],127:276,128:[1,230]},{28:[2,185],126:[2,185],128:[2,185]},{8:278,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],100:277,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,95],5:279,6:[2,95],27:[1,5],28:[2,95],49:[2,95],54:[2,95],57:[2,95],72:[2,95],77:[2,95],83:[2,95],92:[2,95],97:[2,95],107:[2,95],108:89,109:[1,67],110:[2,95],111:[1,68],114:90,115:[1,70],116:71,123:[2,95],131:[2,95],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,98],6:[2,98],27:[2,98],28:[2,98],49:[2,98],54:[2,98],57:[2,98],72:[2,98],77:[2,98],83:[2,98],92:[2,98],97:[2,98],107:[2,98],109:[2,98],110:[2,98],111:[2,98],115:[2,98],123:[2,98],131:[2,98],133:[2,98],134:[2,98],137:[2,98],138:[2,98],139:[2,98],140:[2,98],141:[2,98],142:[2,98]},{8:280,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,150],6:[2,150],27:[2,150],28:[2,150],49:[2,150],54:[2,150],57:[2,150],66:[2,150],67:[2,150],68:[2,150],70:[2,150],72:[2,150],73:[2,150],77:[2,150],83:[2,150],90:[2,150],91:[2,150],92:[2,150],97:[2,150],107:[2,150],109:[2,150],110:[2,150],111:[2,150],115:[2,150],123:[2,150],131:[2,150],133:[2,150],134:[2,150],137:[2,150],138:[2,150],139:[2,150],140:[2,150],141:[2,150],142:[2,150]},{6:[1,76],28:[1,281]},{8:282,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{6:[2,65],12:[2,129],27:[2,65],30:[2,129],32:[2,129],33:[2,129],35:[2,129],36:[2,129],37:[2,129],38:[2,129],45:[2,129],46:[2,129],47:[2,129],51:[2,129],52:[2,129],54:[2,65],75:[2,129],78:[2,129],80:[2,129],84:[2,129],89:[2,129],94:[2,129],95:[2,129],96:[2,129],97:[2,65],101:[2,129],105:[2,129],106:[2,129],109:[2,129],111:[2,129],113:[2,129],115:[2,129],124:[2,129],130:[2,129],132:[2,129],133:[2,129],134:[2,129],135:[2,129],136:[2,129]},{6:[1,284],27:[1,285],97:[1,283]},{6:[2,54],8:214,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[2,54],28:[2,54],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,60:156,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],92:[2,54],94:[1,60],95:[1,61],96:[1,59],97:[2,54],99:286,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{6:[2,53],27:[2,53],28:[2,53],53:287,54:[1,239]},{1:[2,189],6:[2,189],27:[2,189],28:[2,189],49:[2,189],54:[2,189],57:[2,189],72:[2,189],77:[2,189],83:[2,189],92:[2,189],97:[2,189],107:[2,189],109:[2,189],110:[2,189],111:[2,189],115:[2,189],123:[2,189],126:[2,189],131:[2,189],133:[2,189],134:[2,189],137:[2,189],138:[2,189],139:[2,189],140:[2,189],141:[2,189],142:[2,189]},{8:288,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:289,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{121:[2,168],122:[2,168]},{29:167,30:[1,75],58:168,59:169,75:[1,72],96:[1,123],120:290},{1:[2,174],6:[2,174],27:[2,174],28:[2,174],49:[2,174],54:[2,174],57:[2,174],72:[2,174],77:[2,174],83:[2,174],92:[2,174],97:[2,174],107:[2,174],108:89,109:[2,174],110:[1,291],111:[2,174],114:90,115:[2,174],116:71,123:[1,292],131:[2,174],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,175],6:[2,175],27:[2,175],28:[2,175],49:[2,175],54:[2,175],57:[2,175],72:[2,175],77:[2,175],83:[2,175],92:[2,175],97:[2,175],107:[2,175],108:89,109:[2,175],110:[1,293],111:[2,175],114:90,115:[2,175],116:71,123:[2,175],131:[2,175],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{6:[1,295],27:[1,296],77:[1,294]},{6:[2,54],11:176,27:[2,54],28:[2,54],29:177,30:[1,75],31:178,32:[1,73],33:[1,74],41:297,42:175,44:179,46:[1,50],77:[2,54],95:[1,122]},{8:298,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,299],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,83],6:[2,83],27:[2,83],28:[2,83],40:[2,83],49:[2,83],54:[2,83],57:[2,83],66:[2,83],67:[2,83],68:[2,83],70:[2,83],72:[2,83],73:[2,83],77:[2,83],79:[2,83],83:[2,83],90:[2,83],91:[2,83],92:[2,83],97:[2,83],107:[2,83],109:[2,83],110:[2,83],111:[2,83],115:[2,83],123:[2,83],131:[2,83],133:[2,83],134:[2,83],135:[2,83],136:[2,83],137:[2,83],138:[2,83],139:[2,83],140:[2,83],141:[2,83],142:[2,83],143:[2,83]},{8:300,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,72:[2,132],75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{72:[2,133],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,103],6:[2,103],27:[2,103],28:[2,103],49:[2,103],54:[2,103],57:[2,103],72:[2,103],77:[2,103],83:[2,103],92:[2,103],97:[2,103],107:[2,103],109:[2,103],110:[2,103],111:[2,103],115:[2,103],123:[2,103],131:[2,103],133:[2,103],134:[2,103],137:[2,103],138:[2,103],139:[2,103],140:[2,103],141:[2,103],142:[2,103]},{1:[2,105],6:[2,105],27:[2,105],28:[2,105],49:[2,105],54:[2,105],57:[2,105],72:[2,105],77:[2,105],83:[2,105],92:[2,105],97:[2,105],107:[2,105],109:[2,105],110:[2,105],111:[2,105],115:[2,105],123:[2,105],131:[2,105],133:[2,105],134:[2,105],137:[2,105],138:[2,105],139:[2,105],140:[2,105],141:[2,105],142:[2,105]},{1:[2,106],6:[2,106],27:[2,106],28:[2,106],49:[2,106],54:[2,106],57:[2,106],72:[2,106],77:[2,106],83:[2,106],92:[2,106],97:[2,106],107:[2,106],109:[2,106],110:[2,106],111:[2,106],115:[2,106],123:[2,106],131:[2,106],133:[2,106],134:[2,106],137:[2,106],138:[2,106],139:[2,106],140:[2,106],141:[2,106],142:[2,106]},{6:[1,302],27:[1,303],28:[1,301]},{6:[2,111],27:[2,111],28:[2,111]},{25:258,27:[1,259],78:[1,47],86:304},{1:[2,110],6:[2,110],27:[2,110],28:[2,110],49:[2,110],54:[2,110],57:[2,110],72:[2,110],77:[2,110],83:[2,110],92:[2,110],97:[2,110],107:[2,110],109:[2,110],110:[2,110],111:[2,110],115:[2,110],123:[2,110],131:[2,110],133:[2,110],134:[2,110],137:[2,110],138:[2,110],139:[2,110],140:[2,110],141:[2,110],142:[2,110]},{1:[2,37],6:[2,37],27:[2,37],28:[2,37],49:[2,37],54:[2,37],57:[2,37],72:[2,37],77:[2,37],83:[2,37],92:[2,37],97:[2,37],107:[2,37],108:89,109:[2,37],110:[2,37],111:[2,37],114:90,115:[2,37],116:71,123:[2,37],131:[2,37],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{28:[1,305],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{6:[1,284],27:[1,285],92:[1,306]},{6:[2,65],27:[2,65],28:[2,65],54:[2,65],92:[2,65],97:[2,65]},{5:307,27:[1,5]},{49:[2,57],54:[2,57]},{49:[2,60],54:[2,60],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{28:[1,308],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{5:309,27:[1,5],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{5:310,27:[1,5]},{1:[2,146],6:[2,146],27:[2,146],28:[2,146],49:[2,146],54:[2,146],57:[2,146],72:[2,146],77:[2,146],83:[2,146],92:[2,146],97:[2,146],107:[2,146],109:[2,146],110:[2,146],111:[2,146],115:[2,146],123:[2,146],131:[2,146],133:[2,146],134:[2,146],137:[2,146],138:[2,146],139:[2,146],140:[2,146],141:[2,146],142:[2,146]},{5:311,27:[1,5]},{28:[1,312],126:[1,313],127:276,128:[1,230]},{1:[2,183],6:[2,183],27:[2,183],28:[2,183],49:[2,183],54:[2,183],57:[2,183],72:[2,183],77:[2,183],83:[2,183],92:[2,183],97:[2,183],107:[2,183],109:[2,183],110:[2,183],111:[2,183],115:[2,183],123:[2,183],131:[2,183],133:[2,183],134:[2,183],137:[2,183],138:[2,183],139:[2,183],140:[2,183],141:[2,183],142:[2,183]},{5:314,27:[1,5]},{28:[2,186],126:[2,186],128:[2,186]},{5:315,27:[1,5],54:[1,316]},{27:[2,142],54:[2,142],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,96],6:[2,96],27:[2,96],28:[2,96],49:[2,96],54:[2,96],57:[2,96],72:[2,96],77:[2,96],83:[2,96],92:[2,96],97:[2,96],107:[2,96],109:[2,96],110:[2,96],111:[2,96],115:[2,96],123:[2,96],131:[2,96],133:[2,96],134:[2,96],137:[2,96],138:[2,96],139:[2,96],140:[2,96],141:[2,96],142:[2,96]},{1:[2,99],5:317,6:[2,99],27:[1,5],28:[2,99],49:[2,99],54:[2,99],57:[2,99],72:[2,99],77:[2,99],83:[2,99],92:[2,99],97:[2,99],107:[2,99],108:89,109:[1,67],110:[2,99],111:[1,68],114:90,115:[1,70],116:71,123:[2,99],131:[2,99],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{107:[1,318]},{97:[1,319],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,127],6:[2,127],27:[2,127],28:[2,127],40:[2,127],49:[2,127],54:[2,127],57:[2,127],66:[2,127],67:[2,127],68:[2,127],70:[2,127],72:[2,127],73:[2,127],77:[2,127],83:[2,127],90:[2,127],91:[2,127],92:[2,127],97:[2,127],107:[2,127],109:[2,127],110:[2,127],111:[2,127],115:[2,127],121:[2,127],122:[2,127],123:[2,127],131:[2,127],133:[2,127],134:[2,127],137:[2,127],138:[2,127],139:[2,127],140:[2,127],141:[2,127],142:[2,127]},{8:214,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,60:156,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],99:320,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:214,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:[1,155],29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,60:156,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],93:321,94:[1,60],95:[1,61],96:[1,59],99:154,101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{6:[2,136],27:[2,136],28:[2,136],54:[2,136],92:[2,136],97:[2,136]},{6:[1,284],27:[1,285],28:[1,322]},{1:[2,153],6:[2,153],27:[2,153],28:[2,153],49:[2,153],54:[2,153],57:[2,153],72:[2,153],77:[2,153],83:[2,153],92:[2,153],97:[2,153],107:[2,153],108:89,109:[1,67],110:[2,153],111:[1,68],114:90,115:[1,70],116:71,123:[2,153],131:[2,153],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,155],6:[2,155],27:[2,155],28:[2,155],49:[2,155],54:[2,155],57:[2,155],72:[2,155],77:[2,155],83:[2,155],92:[2,155],97:[2,155],107:[2,155],108:89,109:[1,67],110:[2,155],111:[1,68],114:90,115:[1,70],116:71,123:[2,155],131:[2,155],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{121:[2,173],122:[2,173]},{8:323,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:324,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:325,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,87],6:[2,87],27:[2,87],28:[2,87],40:[2,87],49:[2,87],54:[2,87],57:[2,87],66:[2,87],67:[2,87],68:[2,87],70:[2,87],72:[2,87],73:[2,87],77:[2,87],83:[2,87],90:[2,87],91:[2,87],92:[2,87],97:[2,87],107:[2,87],109:[2,87],110:[2,87],111:[2,87],115:[2,87],121:[2,87],122:[2,87],123:[2,87],131:[2,87],133:[2,87],134:[2,87],137:[2,87],138:[2,87],139:[2,87],140:[2,87],141:[2,87],142:[2,87]},{11:176,29:177,30:[1,75],31:178,32:[1,73],33:[1,74],41:326,42:175,44:179,46:[1,50],95:[1,122]},{6:[2,88],11:176,27:[2,88],28:[2,88],29:177,30:[1,75],31:178,32:[1,73],33:[1,74],41:174,42:175,44:179,46:[1,50],54:[2,88],76:327,95:[1,122]},{6:[2,90],27:[2,90],28:[2,90],54:[2,90],77:[2,90]},{6:[2,40],27:[2,40],28:[2,40],54:[2,40],77:[2,40],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{8:328,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{72:[2,131],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,108],6:[2,108],27:[2,108],28:[2,108],49:[2,108],54:[2,108],57:[2,108],72:[2,108],77:[2,108],83:[2,108],92:[2,108],97:[2,108],107:[2,108],109:[2,108],110:[2,108],111:[2,108],115:[2,108],123:[2,108],131:[2,108],133:[2,108],134:[2,108],137:[2,108],138:[2,108],139:[2,108],140:[2,108],141:[2,108],142:[2,108]},{25:329,78:[1,47]},{25:258,27:[1,259],78:[1,47],86:330},{6:[1,302],27:[1,303],28:[1,331]},{1:[2,38],6:[2,38],27:[2,38],28:[2,38],49:[2,38],54:[2,38],57:[2,38],72:[2,38],77:[2,38],83:[2,38],92:[2,38],97:[2,38],107:[2,38],109:[2,38],110:[2,38],111:[2,38],115:[2,38],123:[2,38],131:[2,38],133:[2,38],134:[2,38],137:[2,38],138:[2,38],139:[2,38],140:[2,38],141:[2,38],142:[2,38]},{1:[2,122],6:[2,122],27:[2,122],28:[2,122],49:[2,122],54:[2,122],57:[2,122],66:[2,122],67:[2,122],68:[2,122],70:[2,122],72:[2,122],73:[2,122],77:[2,122],83:[2,122],90:[2,122],91:[2,122],92:[2,122],97:[2,122],107:[2,122],109:[2,122],110:[2,122],111:[2,122],115:[2,122],123:[2,122],131:[2,122],133:[2,122],134:[2,122],137:[2,122],138:[2,122],139:[2,122],140:[2,122],141:[2,122],142:[2,122]},{1:[2,49],6:[2,49],27:[2,49],28:[2,49],49:[2,49],54:[2,49],57:[2,49],72:[2,49],77:[2,49],83:[2,49],92:[2,49],97:[2,49],107:[2,49],109:[2,49],110:[2,49],111:[2,49],115:[2,49],123:[2,49],131:[2,49],133:[2,49],134:[2,49],137:[2,49],138:[2,49],139:[2,49],140:[2,49],141:[2,49],142:[2,49]},{1:[2,211],6:[2,211],27:[2,211],28:[2,211],49:[2,211],54:[2,211],57:[2,211],72:[2,211],77:[2,211],83:[2,211],92:[2,211],97:[2,211],107:[2,211],109:[2,211],110:[2,211],111:[2,211],115:[2,211],123:[2,211],131:[2,211],133:[2,211],134:[2,211],137:[2,211],138:[2,211],139:[2,211],140:[2,211],141:[2,211],142:[2,211]},{1:[2,190],6:[2,190],27:[2,190],28:[2,190],49:[2,190],54:[2,190],57:[2,190],72:[2,190],77:[2,190],83:[2,190],92:[2,190],97:[2,190],107:[2,190],109:[2,190],110:[2,190],111:[2,190],115:[2,190],123:[2,190],126:[2,190],131:[2,190],133:[2,190],134:[2,190],137:[2,190],138:[2,190],139:[2,190],140:[2,190],141:[2,190],142:[2,190]},{1:[2,147],6:[2,147],27:[2,147],28:[2,147],49:[2,147],54:[2,147],57:[2,147],72:[2,147],77:[2,147],83:[2,147],92:[2,147],97:[2,147],107:[2,147],109:[2,147],110:[2,147],111:[2,147],115:[2,147],123:[2,147],131:[2,147],133:[2,147],134:[2,147],137:[2,147],138:[2,147],139:[2,147],140:[2,147],141:[2,147],142:[2,147]},{1:[2,148],6:[2,148],27:[2,148],28:[2,148],49:[2,148],54:[2,148],57:[2,148],72:[2,148],77:[2,148],83:[2,148],92:[2,148],97:[2,148],103:[2,148],107:[2,148],109:[2,148],110:[2,148],111:[2,148],115:[2,148],123:[2,148],131:[2,148],133:[2,148],134:[2,148],137:[2,148],138:[2,148],139:[2,148],140:[2,148],141:[2,148],142:[2,148]},{1:[2,181],6:[2,181],27:[2,181],28:[2,181],49:[2,181],54:[2,181],57:[2,181],72:[2,181],77:[2,181],83:[2,181],92:[2,181],97:[2,181],107:[2,181],109:[2,181],110:[2,181],111:[2,181],115:[2,181],123:[2,181],131:[2,181],133:[2,181],134:[2,181],137:[2,181],138:[2,181],139:[2,181],140:[2,181],141:[2,181],142:[2,181]},{5:332,27:[1,5]},{28:[1,333]},{6:[1,334],28:[2,187],126:[2,187],128:[2,187]},{8:335,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{1:[2,100],6:[2,100],27:[2,100],28:[2,100],49:[2,100],54:[2,100],57:[2,100],72:[2,100],77:[2,100],83:[2,100],92:[2,100],97:[2,100],107:[2,100],109:[2,100],110:[2,100],111:[2,100],115:[2,100],123:[2,100],131:[2,100],133:[2,100],134:[2,100],137:[2,100],138:[2,100],139:[2,100],140:[2,100],141:[2,100],142:[2,100]},{1:[2,151],6:[2,151],27:[2,151],28:[2,151],49:[2,151],54:[2,151],57:[2,151],66:[2,151],67:[2,151],68:[2,151],70:[2,151],72:[2,151],73:[2,151],77:[2,151],83:[2,151],90:[2,151],91:[2,151],92:[2,151],97:[2,151],107:[2,151],109:[2,151],110:[2,151],111:[2,151],115:[2,151],123:[2,151],131:[2,151],133:[2,151],134:[2,151],137:[2,151],138:[2,151],139:[2,151],140:[2,151],141:[2,151],142:[2,151]},{1:[2,130],6:[2,130],27:[2,130],28:[2,130],49:[2,130],54:[2,130],57:[2,130],66:[2,130],67:[2,130],68:[2,130],70:[2,130],72:[2,130],73:[2,130],77:[2,130],83:[2,130],90:[2,130],91:[2,130],92:[2,130],97:[2,130],107:[2,130],109:[2,130],110:[2,130],111:[2,130],115:[2,130],123:[2,130],131:[2,130],133:[2,130],134:[2,130],137:[2,130],138:[2,130],139:[2,130],140:[2,130],141:[2,130],142:[2,130]},{6:[2,137],27:[2,137],28:[2,137],54:[2,137],92:[2,137],97:[2,137]},{6:[2,53],27:[2,53],28:[2,53],53:336,54:[1,239]},{6:[2,138],27:[2,138],28:[2,138],54:[2,138],92:[2,138],97:[2,138]},{1:[2,176],6:[2,176],27:[2,176],28:[2,176],49:[2,176],54:[2,176],57:[2,176],72:[2,176],77:[2,176],83:[2,176],92:[2,176],97:[2,176],107:[2,176],108:89,109:[2,176],110:[2,176],111:[2,176],114:90,115:[2,176],116:71,123:[1,337],131:[2,176],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,178],6:[2,178],27:[2,178],28:[2,178],49:[2,178],54:[2,178],57:[2,178],72:[2,178],77:[2,178],83:[2,178],92:[2,178],97:[2,178],107:[2,178],108:89,109:[2,178],110:[1,338],111:[2,178],114:90,115:[2,178],116:71,123:[2,178],131:[2,178],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,177],6:[2,177],27:[2,177],28:[2,177],49:[2,177],54:[2,177],57:[2,177],72:[2,177],77:[2,177],83:[2,177],92:[2,177],97:[2,177],107:[2,177],108:89,109:[2,177],110:[2,177],111:[2,177],114:90,115:[2,177],116:71,123:[2,177],131:[2,177],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{6:[2,91],27:[2,91],28:[2,91],54:[2,91],77:[2,91]},{6:[2,53],27:[2,53],28:[2,53],53:339,54:[1,249]},{28:[1,340],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{6:[2,112],27:[2,112],28:[2,112]},{6:[1,302],27:[1,303],28:[1,341]},{6:[2,113],27:[2,113],28:[2,113]},{28:[1,342]},{1:[2,184],6:[2,184],27:[2,184],28:[2,184],49:[2,184],54:[2,184],57:[2,184],72:[2,184],77:[2,184],83:[2,184],92:[2,184],97:[2,184],107:[2,184],109:[2,184],110:[2,184],111:[2,184],115:[2,184],123:[2,184],131:[2,184],133:[2,184],134:[2,184],137:[2,184],138:[2,184],139:[2,184],140:[2,184],141:[2,184],142:[2,184]},{28:[2,188],126:[2,188],128:[2,188]},{27:[2,143],54:[2,143],108:89,109:[1,67],111:[1,68],114:90,115:[1,70],116:71,131:[1,88],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{6:[1,284],27:[1,285],28:[1,343]},{8:344,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{8:345,9:126,10:22,11:23,12:[1,24],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,29:64,30:[1,75],31:53,32:[1,73],33:[1,74],34:28,35:[1,54],36:[1,55],37:[1,56],38:[1,57],39:27,44:65,45:[1,49],46:[1,50],47:[1,33],50:34,51:[1,62],52:[1,63],58:51,59:52,61:40,63:29,64:30,65:31,75:[1,72],78:[1,47],80:[1,25],84:[1,26],89:[1,32],94:[1,60],95:[1,61],96:[1,59],101:[1,42],105:[1,48],106:[1,58],108:43,109:[1,67],111:[1,68],112:44,113:[1,69],114:45,115:[1,70],116:71,124:[1,46],129:41,130:[1,66],132:[1,35],133:[1,36],134:[1,37],135:[1,38],136:[1,39]},{6:[1,295],27:[1,296],28:[1,346]},{6:[2,41],27:[2,41],28:[2,41],54:[2,41],77:[2,41]},{6:[2,114],27:[2,114],28:[2,114]},{1:[2,182],6:[2,182],27:[2,182],28:[2,182],49:[2,182],54:[2,182],57:[2,182],72:[2,182],77:[2,182],83:[2,182],92:[2,182],97:[2,182],107:[2,182],109:[2,182],110:[2,182],111:[2,182],115:[2,182],123:[2,182],131:[2,182],133:[2,182],134:[2,182],137:[2,182],138:[2,182],139:[2,182],140:[2,182],141:[2,182],142:[2,182]},{6:[2,139],27:[2,139],28:[2,139],54:[2,139],92:[2,139],97:[2,139]},{1:[2,179],6:[2,179],27:[2,179],28:[2,179],49:[2,179],54:[2,179],57:[2,179],72:[2,179],77:[2,179],83:[2,179],92:[2,179],97:[2,179],107:[2,179],108:89,109:[2,179],110:[2,179],111:[2,179],114:90,115:[2,179],116:71,123:[2,179],131:[2,179],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{1:[2,180],6:[2,180],27:[2,180],28:[2,180],49:[2,180],54:[2,180],57:[2,180],72:[2,180],77:[2,180],83:[2,180],92:[2,180],97:[2,180],107:[2,180],108:89,109:[2,180],110:[2,180],111:[2,180],114:90,115:[2,180],116:71,123:[2,180],131:[2,180],133:[1,82],134:[1,81],137:[1,80],138:[1,83],139:[1,84],140:[1,85],141:[1,86],142:[1,87]},{6:[2,92],27:[2,92],28:[2,92],54:[2,92],77:[2,92]}],
defaultActions: {62:[2,51],63:[2,52],77:[2,3],96:[2,120],197:[2,86]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    if (typeof this.lexer.yylloc == 'undefined')
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol == null)
                symbol = lex();
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        _handle_error:
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                var errStr = '';
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + this.terminals_[symbol]+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state == 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }

            preErrorSymbol = symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};
undefined
return parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    if (typeof process !== 'undefined') {
        var source = require('fs').readFileSync(require('path').join(process.cwd(), args[1]), "utf8");
    } else {
        var cwd = require("file").path(require("file").cwd());
        var source = cwd.join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}
};require['./scope'] = new function() {
  var exports = this;
  // Generated by Caffeine 0.1.5
(function() {
  var Scope, extend, last, _ref;

  _ref = require('./helpers'), extend = _ref.extend, last = _ref.last;

  exports.Scope = Scope = (function() {

    Scope.name = 'Scope';

    Scope.root = null;

    Scope.poof = null;

    function Scope(parent, expressions, method) {
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.variables = [
        {
          name: 'arguments',
          type: 'arguments'
        }
      ];
      this.positions = {};
      if (!this.parent) {
        Scope.root = this;
        Scope.poof = new Scope(this);
      }
    }

    Scope.prototype.add = function(name, type, immediate) {
      if (this.shared && !immediate) return this.parent.add(name, type, immediate);
      if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
        return this.variables[this.positions[name]].type = type;
      } else {
        return this.positions[name] = this.variables.push({
          name: name,
          type: type
        }) - 1;
      }
    };

    Scope.prototype.find = function(name, options) {
      if (this.check(name, options)) return true;
      this.add(name, 'var');
      return false;
    };

    Scope.prototype.parameter = function(name) {
      if (this.shared && this.parent.check(name, true)) return;
      return this.add(name, 'param');
    };

    Scope.prototype.check = function(name, immediate) {
      var found, _ref2;
      found = !!this.type(name);
      if (found || immediate) return found;
      return !!((_ref2 = this.parent) != null ? _ref2.check(name) : void 0);
    };

    Scope.prototype.temporary = function(name, index) {
      if (name.length > 1) {
        return '_' + name + (index > 1 ? index : '');
      } else {
        return '_' + (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
      }
    };

    Scope.prototype.type = function(name) {
      var v, _i, _len, _ref2;
      _ref2 = this.variables;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        if (v.name === name) return v.type;
      }
      return null;
    };

    Scope.prototype.freeVariable = function(name, reserve) {
      var index, temp;
      if (reserve == null) reserve = true;
      index = 0;
      while (this.check((temp = this.temporary(name, index)))) {
        index++;
      }
      if (reserve) this.add(temp, 'var', true);
      return temp;
    };

    Scope.prototype.assign = function(name, value) {
      this.add(name, {
        value: value,
        assigned: true
      }, true);
      return this.hasAssignments = true;
    };

    Scope.prototype.hasDeclarations = function() {
      return !!this.declaredVariables().length;
    };

    Scope.prototype.declaredVariables = function() {
      var realVars, tempVars, v, _i, _len, _ref2;
      realVars = [];
      tempVars = [];
      _ref2 = this.variables;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        if (v.type === 'var') {
          (v.name.charAt(0) === '_' ? tempVars : realVars).push(v.name);
        }
      }
      return realVars.sort().concat(tempVars.sort());
    };

    Scope.prototype.assignedVariables = function() {
      var v, _i, _len, _ref2, _results;
      _ref2 = this.variables;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        if (v.type.assigned) _results.push("" + v.name + " = " + v.type.value);
      }
      return _results;
    };

    return Scope;
  })();

}).call(this);

};require['./nodes'] = new function() {
  var exports = this;
  // Generated by Caffeine 0.1.5
(function() {
  var Access, Arr, Assign, Base, Block, Call, Class, Closure, Code, Comment, Existence, Extends, FileSystem, For, IDENTIFIER, IDENTIFIER_STR, IS_STRING, If, Import, In, Index, LEVEL_ACCESS, LEVEL_COND, LEVEL_LIST, LEVEL_OP, LEVEL_PAREN, LEVEL_TOP, Lexer, Literal, METHOD_DEF, NEGATE, NO, Obj, Op, Package, Param, Parens, Path, RESERVED, Range, Return, SIMPLENUM, STRICT_PROSCRIBED, Scope, Slice, Splat, Switch, TAB, THIS, Throw, Try, UTILITIES, Value, While, YES, compact, del, ends, extend, flatten, last, merge, multident, parser, starts, unfoldSoak, utility, _ref, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  FileSystem = require('fs');

  Path = require('path');

  Scope = require('./scope').Scope;

  _ref = require('./lexer'), Lexer = _ref.Lexer, RESERVED = _ref.RESERVED, STRICT_PROSCRIBED = _ref.STRICT_PROSCRIBED;

  parser = require('./parser').parser;

  _ref2 = require('./helpers'), compact = _ref2.compact, flatten = _ref2.flatten, extend = _ref2.extend, merge = _ref2.merge, del = _ref2.del, starts = _ref2.starts, ends = _ref2.ends, last = _ref2.last;

  exports.extend = extend;

  YES = function() {
    return true;
  };

  NO = function() {
    return false;
  };

  THIS = function() {
    return this;
  };

  NEGATE = function() {
    this.negated = !this.negated;
    return this;
  };

  exports.Base = Base = (function() {

    Base.name = 'Base';

    function Base() {}

    Base.prototype.compile = function(o, lvl) {
      var node;
      o = extend({}, o);
      if (lvl) o.level = lvl;
      node = this.unfoldSoak(o) || this;
      node.tab = o.indent;
      if (o.level === LEVEL_TOP || !node.isStatement(o)) {
        return node.compileNode(o);
      } else {
        return node.compileClosure(o);
      }
    };

    Base.prototype.compileClosure = function(o) {
      if (this.jumps()) {
        throw SyntaxError('cannot use a pure statement in an expression.');
      }
      o.sharedScope = true;
      return Closure.wrap(this).compileNode(o);
    };

    Base.prototype.cache = function(o, level, reused) {
      var ref, sub;
      if (!this.isComplex()) {
        ref = level ? this.compile(o, level) : this;
        return [ref, ref];
      } else {
        ref = new Literal(reused || o.scope.freeVariable('ref'));
        sub = new Assign(ref, this);
        if (level) {
          return [sub.compile(o, level), ref.value];
        } else {
          return [sub, ref];
        }
      }
    };

    Base.prototype.compileLoopReference = function(o, name) {
      var src, tmp;
      src = tmp = this.compile(o, LEVEL_LIST);
      if (!((-Infinity < +src && +src < Infinity) || IDENTIFIER.test(src) && o.scope.check(src, true))) {
        src = "" + (tmp = o.scope.freeVariable(name)) + " = " + src;
      }
      return [src, tmp];
    };

    Base.prototype.makeReturn = function(res) {
      var me;
      me = this.unwrapAll();
      if (res) {
        return new Call(new Literal("" + res + ".push"), [me]);
      } else {
        return new Return(me);
      }
    };

    Base.prototype.contains = function(pred) {
      var contains;
      contains = false;
      this.traverseChildren(false, function(node) {
        if (pred(node)) {
          contains = true;
          return false;
        }
      });
      return contains;
    };

    Base.prototype.containsType = function(type) {
      return this instanceof type || this.contains(function(node) {
        return node instanceof type;
      });
    };

    Base.prototype.lastNonComment = function(list) {
      var i;
      i = list.length;
      while (i--) {
        if (!(list[i] instanceof Comment)) return list[i];
      }
      return null;
    };

    Base.prototype.toString = function(idt, name) {
      var tree;
      if (idt == null) idt = '';
      if (name == null) name = this.constructor.name;
      tree = '\n' + idt + name;
      if (this.soak) tree += '?';
      this.eachChild(function(node) {
        return tree += node.toString(idt + TAB);
      });
      return tree;
    };

    Base.prototype.eachChild = function(func) {
      var attr, child, _i, _j, _len, _len2, _ref3, _ref4;
      if (!this.children) return this;
      _ref3 = this.children;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        attr = _ref3[_i];
        if (this[attr]) {
          _ref4 = flatten([this[attr]]);
          for (_j = 0, _len2 = _ref4.length; _j < _len2; _j++) {
            child = _ref4[_j];
            if (func(child) === false) return this;
          }
        }
      }
      return this;
    };

    Base.prototype.traverseChildren = function(crossScope, func) {
      return this.eachChild(function(child) {
        if (func(child) === false) return false;
        return child.traverseChildren(crossScope, func);
      });
    };

    Base.prototype.invert = function() {
      return new Op('!', this);
    };

    Base.prototype.unwrapAll = function() {
      var node;
      node = this;
      while (node !== (node = node.unwrap())) {
        continue;
      }
      return node;
    };

    Base.prototype.children = [];

    Base.prototype.isStatement = NO;

    Base.prototype.jumps = NO;

    Base.prototype.isComplex = YES;

    Base.prototype.isChainable = NO;

    Base.prototype.isAssignable = NO;

    Base.prototype.unwrap = THIS;

    Base.prototype.unfoldSoak = NO;

    Base.prototype.assigns = NO;

    return Base;
  })();

  exports.Block = Block = (function(_super) {

    __extends(Block, _super);

    Block.name = 'Block';

    function Block(nodes) {
      this.expressions = compact(flatten(nodes || []));
    }

    Block.prototype.children = ['expressions'];

    Block.prototype.push = function(node) {
      this.expressions.push(node);
      return this;
    };

    Block.prototype.pop = function() {
      return this.expressions.pop();
    };

    Block.prototype.unshift = function(node) {
      this.expressions.unshift(node);
      return this;
    };

    Block.prototype.unwrap = function() {
      if (this.expressions.length === 1) {
        return this.expressions[0];
      } else {
        return this;
      }
    };

    Block.prototype.isEmpty = function() {
      return !this.expressions.length;
    };

    Block.prototype.isStatement = function(o) {
      var exp, _i, _len, _ref3;
      _ref3 = this.expressions;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        exp = _ref3[_i];
        if (exp.isStatement(o)) return true;
      }
      return false;
    };

    Block.prototype.jumps = function(o) {
      var exp, _i, _len, _ref3;
      _ref3 = this.expressions;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        exp = _ref3[_i];
        if (exp.jumps(o)) return exp;
      }
    };

    Block.prototype.makeReturn = function(res) {
      var expr, len;
      len = this.expressions.length;
      while (len--) {
        expr = this.expressions[len];
        if (!(expr instanceof Comment)) {
          this.expressions[len] = expr.makeReturn(res);
          if (expr instanceof Return && !expr.expression) {
            this.expressions.splice(len, 1);
          }
          break;
        }
      }
      return this;
    };

    Block.prototype.compile = function(o, level) {
      if (o == null) o = {};
      if (o.scope) {
        return Block.__super__.compile.call(this, o, level);
      } else {
        return this.compileRoot(o);
      }
    };

    Block.prototype.compileNode = function(o) {
      var code, codes, node, top, _i, _len, _ref3;
      this.tab = o.indent;
      top = o.level === LEVEL_TOP;
      codes = [];
      _ref3 = this.expressions;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        node = _ref3[_i];
        node = node.unwrapAll();
        node = node.unfoldSoak(o) || node;
        if (node instanceof Block) {
          code = node.compileNode(o);
        } else if (top) {
          node.front = true;
          code = node.compile(o);
          if (!node.isStatement(o)) {
            if (code.length !== 0) code = "" + this.tab + code + ";";
            if (node instanceof Literal) code = "" + code + "\n";
          }
        } else {
          code = node.compile(o, LEVEL_LIST);
        }
        if (code !== "") codes.push(code);
      }
      if (top) {
        if (this.spaced) {
          return "\n" + (codes.join('\n\n')) + "\n";
        } else {
          return codes.join('\n');
        }
      }
      code = codes.join(', ') || 'void 0';
      if (codes.length > 1 && o.level >= LEVEL_LIST) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };

    Block.prototype.compileRoot = function(o) {
      var code, exp, i, prelude, preludeExps, rest;
      o.indent = o.bare ? '' : TAB;
      o.scope = new Scope(null, this, null);
      o.level = LEVEL_TOP;
      this.spaced = true;
      prelude = "";
      if (!o.bare) {
        preludeExps = (function() {
          var _i, _len, _ref3, _results;
          _ref3 = this.expressions;
          _results = [];
          for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
            exp = _ref3[i];
            if (!(exp.unwrap() instanceof Comment)) break;
            _results.push(exp);
          }
          return _results;
        }).call(this);
        rest = this.expressions.slice(preludeExps.length);
        this.expressions = preludeExps;
        if (preludeExps.length) {
          prelude = "" + (this.compileNode(merge(o, {
            indent: ''
          }))) + "\n";
        }
        this.expressions = rest;
      }
      code = this.compileWithDeclarations(o);
      if (o.bare) return code;
      return "" + prelude + "(function() {\n" + code + "\n}).call(this);\n";
    };

    Block.prototype.compileWithDeclarations = function(o) {
      var assigns, code, declars, exp, i, imports, opts, packages, poof, poofs, post, rest, scope, spaced, _i, _j, _len, _len2, _ref3, _ref4, _ref5, _ref6;
      code = post = '';
      _ref3 = this.expressions;
      for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
        exp = _ref3[i];
        exp = exp.unwrap();
        if (!(exp instanceof Comment || exp instanceof Literal)) break;
      }
      o = merge(o, {
        level: LEVEL_TOP
      });
      if (i) {
        rest = this.expressions.splice(i, 9e9);
        _ref4 = [this.spaced, false], spaced = _ref4[0], this.spaced = _ref4[1];
        _ref5 = [this.compileNode(o), spaced], code = _ref5[0], this.spaced = _ref5[1];
        this.expressions = rest;
      }
      post = this.compileNode(o);
      scope = o.scope;
      if (scope.expressions === this) {
        if (scope === Scope.root) {
          poof = Scope.poof;
          opts = extend({}, o);
          opts.scope = poof;
          _ref6 = Package.flush(opts);
          for (_j = 0, _len2 = _ref6.length; _j < _len2; _j++) {
            packages = _ref6[_j];
            poof.assign.apply(poof, packages);
          }
          if (imports = Import.flush(opts)) poof.assign.apply(poof, imports);
        }
        declars = o.scope.hasDeclarations();
        assigns = scope.hasAssignments;
        poofs = poof && poof.hasAssignments;
        if (declars || assigns || poofs) {
          if (i) code += '\n';
          code += "" + this.tab + "var ";
          if (declars) code += scope.declaredVariables().join(', ');
          if (poofs) {
            if (declars) code += ",\n" + (this.tab + TAB);
            code += poof.assignedVariables().join(",\n" + (this.tab + TAB));
          }
          if (assigns) {
            if (declars || poofs) code += ",\n" + (this.tab + TAB);
            code += scope.assignedVariables().join(",\n" + (this.tab + TAB));
          }
          code += ';\n';
        }
      }
      return code + post;
    };

    Block.wrap = function(nodes) {
      if (nodes.length === 1 && nodes[0] instanceof Block) return nodes[0];
      return new Block(nodes);
    };

    return Block;
  })(Base);

  exports.Literal = Literal = (function(_super) {

    __extends(Literal, _super);

    Literal.name = 'Literal';

    function Literal(value) {
      this.value = value;
    }

    Literal.prototype.makeReturn = function() {
      if (this.isStatement()) {
        return this;
      } else {
        return Literal.__super__.makeReturn.apply(this, arguments);
      }
    };

    Literal.prototype.isAssignable = function() {
      return IDENTIFIER.test(this.value);
    };

    Literal.prototype.isStatement = function() {
      var _ref3;
      return (_ref3 = this.value) === 'break' || _ref3 === 'continue' || _ref3 === 'debugger';
    };

    Literal.prototype.isComplex = NO;

    Literal.prototype.assigns = function(name) {
      return name === this.value;
    };

    Literal.prototype.jumps = function(o) {
      if (this.value === 'break' && !((o != null ? o.loop : void 0) || (o != null ? o.block : void 0))) {
        return this;
      }
      if (this.value === 'continue' && !(o != null ? o.loop : void 0)) return this;
    };

    Literal.prototype.compileNode = function(o) {
      var code, _ref3;
      code = this.isUndefined ? o.level >= LEVEL_ACCESS ? '(void 0)' : 'void 0' : this.value === 'this' ? ((_ref3 = o.scope.method) != null ? _ref3.bound : void 0) ? o.scope.method.context : this.value : this.value.reserved ? "\"" + this.value + "\"" : this.value;
      if (this.isStatement()) {
        return "" + this.tab + code + ";";
      } else {
        return code;
      }
    };

    Literal.prototype.toString = function() {
      return ' "' + this.value + '"';
    };

    return Literal;
  })(Base);

  exports.Return = Return = (function(_super) {

    __extends(Return, _super);

    Return.name = 'Return';

    function Return(expr) {
      if (expr && !expr.unwrap().isUndefined) this.expression = expr;
    }

    Return.prototype.children = ['expression'];

    Return.prototype.isStatement = YES;

    Return.prototype.makeReturn = THIS;

    Return.prototype.jumps = THIS;

    Return.prototype.compile = function(o, level) {
      var expr, _ref3;
      expr = (_ref3 = this.expression) != null ? _ref3.makeReturn() : void 0;
      if (expr && !(expr instanceof Return)) {
        return expr.compile(o, level);
      } else {
        return Return.__super__.compile.call(this, o, level);
      }
    };

    Return.prototype.compileNode = function(o) {
      return this.tab + ("return" + [this.expression ? " " + (this.expression.compile(o, LEVEL_PAREN)) : void 0] + ";");
    };

    return Return;
  })(Base);

  exports.Value = Value = (function(_super) {

    __extends(Value, _super);

    Value.name = 'Value';

    function Value(base, props, tag) {
      if (!props && base instanceof Value) return base;
      this.base = base;
      this.properties = props || [];
      if (tag) this[tag] = true;
      return this;
    }

    Value.prototype.children = ['base', 'properties'];

    Value.prototype.add = function(props) {
      this.properties = this.properties.concat(props);
      return this;
    };

    Value.prototype.hasProperties = function() {
      return !!this.properties.length;
    };

    Value.prototype.isArray = function() {
      return !this.properties.length && this.base instanceof Arr;
    };

    Value.prototype.isComplex = function() {
      return this.hasProperties() || this.base.isComplex();
    };

    Value.prototype.isAssignable = function() {
      return this.hasProperties() || this.base.isAssignable();
    };

    Value.prototype.isSimpleNumber = function() {
      return this.base instanceof Literal && SIMPLENUM.test(this.base.value);
    };

    Value.prototype.isString = function() {
      return this.base instanceof Literal && IS_STRING.test(this.base.value);
    };

    Value.prototype.isAtomic = function() {
      var node, _i, _len, _ref3;
      _ref3 = this.properties.concat(this.base);
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        node = _ref3[_i];
        if (node.soak || node instanceof Call) return false;
      }
      return true;
    };

    Value.prototype.isStatement = function(o) {
      return !this.properties.length && this.base.isStatement(o);
    };

    Value.prototype.assigns = function(name) {
      return !this.properties.length && this.base.assigns(name);
    };

    Value.prototype.jumps = function(o) {
      return !this.properties.length && this.base.jumps(o);
    };

    Value.prototype.isObject = function(onlyGenerated) {
      if (this.properties.length) return false;
      return (this.base instanceof Obj) && (!onlyGenerated || this.base.generated);
    };

    Value.prototype.isSplice = function() {
      return last(this.properties) instanceof Slice;
    };

    Value.prototype.unwrap = function() {
      if (this.properties.length) {
        return this;
      } else {
        return this.base;
      }
    };

    Value.prototype.cacheReference = function(o) {
      var base, bref, name, nref;
      name = last(this.properties);
      if (this.properties.length < 2 && !this.base.isComplex() && !(name != null ? name.isComplex() : void 0)) {
        return [this, this];
      }
      base = new Value(this.base, this.properties.slice(0, -1));
      if (base.isComplex()) {
        bref = new Literal(o.scope.freeVariable('base'));
        base = new Value(new Parens(new Assign(bref, base)));
      }
      if (!name) return [base, bref];
      if (name.isComplex()) {
        nref = new Literal(o.scope.freeVariable('name'));
        name = new Index(new Assign(nref, name.index));
        nref = new Index(nref);
      }
      return [base.add(name), new Value(bref || base.base, [nref || name])];
    };

    Value.prototype.compileNode = function(o) {
      var code, prop, props, _i, _len;
      this.base.front = this.front;
      props = this.properties;
      code = this.base.compile(o, props.length ? LEVEL_ACCESS : null);
      if ((this.base instanceof Parens || props.length) && SIMPLENUM.test(code)) {
        code = "" + code + ".";
      }
      for (_i = 0, _len = props.length; _i < _len; _i++) {
        prop = props[_i];
        code += prop.compile(o);
      }
      return code;
    };

    Value.prototype.unfoldSoak = function(o) {
      var result,
        _this = this;
      if (this.unfoldedSoak != null) return this.unfoldedSoak;
      result = (function() {
        var fst, i, ifn, prop, ref, snd, _i, _len, _ref3;
        if (ifn = _this.base.unfoldSoak(o)) {
          Array.prototype.push.apply(ifn.body.properties, _this.properties);
          return ifn;
        }
        _ref3 = _this.properties;
        for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
          prop = _ref3[i];
          if (!prop.soak) continue;
          prop.soak = false;
          fst = new Value(_this.base, _this.properties.slice(0, i));
          snd = new Value(_this.base, _this.properties.slice(i));
          if (fst.isComplex()) {
            ref = new Literal(o.scope.freeVariable('ref'));
            fst = new Parens(new Assign(ref, fst));
            snd.base = ref;
          }
          return new If(new Existence(fst), snd, {
            soak: true
          });
        }
        return null;
      })();
      return this.unfoldedSoak = result || false;
    };

    return Value;
  })(Base);

  exports.Comment = Comment = (function(_super) {

    __extends(Comment, _super);

    Comment.name = 'Comment';

    function Comment(comment) {
      this.comment = comment;
    }

    Comment.prototype.isStatement = YES;

    Comment.prototype.makeReturn = THIS;

    Comment.prototype.compileNode = function(o, level) {
      var code;
      code = '/*' + multident(this.comment, this.tab) + ("\n" + this.tab + "*/\n");
      if ((level || o.level) === LEVEL_TOP) code = o.indent + code;
      return code;
    };

    return Comment;
  })(Base);

  exports.Call = Call = (function(_super) {

    __extends(Call, _super);

    Call.name = 'Call';

    function Call(variable, args, soak) {
      this.args = args != null ? args : [];
      this.soak = soak;
      this.isNew = false;
      this.isSuper = variable === 'super';
      this.variable = this.isSuper ? null : variable;
    }

    Call.prototype.children = ['variable', 'args'];

    Call.prototype.newInstance = function() {
      var base, _ref3;
      base = ((_ref3 = this.variable) != null ? _ref3.base : void 0) || this.variable;
      if (base instanceof Call && !base.isNew) {
        base.newInstance();
      } else {
        this.isNew = true;
      }
      return this;
    };

    Call.prototype.superReference = function(o) {
      var accesses, method, name;
      method = o.scope.method;
      if (!method) throw SyntaxError('cannot call super outside of a function.');
      name = method.name;
      if (name == null) {
        throw SyntaxError('cannot call super on an anonymous function.');
      }
      if (method.klass) {
        accesses = [new Access(new Literal('__super__'))];
        if (method["static"]) {
          accesses.push(new Access(new Literal('constructor')));
        }
        accesses.push(new Access(new Literal(name)));
        return (new Value(new Literal(method.klass), accesses)).compile(o);
      } else {
        return "" + name + ".__super__.constructor";
      }
    };

    Call.prototype.unfoldSoak = function(o) {
      var call, ifn, left, list, rite, _i, _len, _ref3, _ref4;
      if (this.soak) {
        if (this.variable) {
          if (ifn = unfoldSoak(o, this, 'variable')) return ifn;
          _ref3 = new Value(this.variable).cacheReference(o), left = _ref3[0], rite = _ref3[1];
        } else {
          left = new Literal(this.superReference(o));
          rite = new Value(left);
        }
        rite = new Call(rite, this.args);
        rite.isNew = this.isNew;
        left = new Literal("typeof " + (left.compile(o)) + " === \"function\"");
        return new If(left, new Value(rite), {
          soak: true
        });
      }
      call = this;
      list = [];
      while (true) {
        if (call.variable instanceof Call) {
          list.push(call);
          call = call.variable;
          continue;
        }
        if (!(call.variable instanceof Value)) break;
        list.push(call);
        if (!((call = call.variable.base) instanceof Call)) break;
      }
      _ref4 = list.reverse();
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        call = _ref4[_i];
        if (ifn) {
          if (call.variable instanceof Call) {
            call.variable = ifn;
          } else {
            call.variable.base = ifn;
          }
        }
        ifn = unfoldSoak(o, call, 'variable');
      }
      return ifn;
    };

    Call.prototype.filterImplicitObjects = function(list) {
      var node, nodes, obj, prop, properties, _i, _j, _len, _len2, _ref3;
      nodes = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        node = list[_i];
        if (!((typeof node.isObject === "function" ? node.isObject() : void 0) && node.base.generated)) {
          nodes.push(node);
          continue;
        }
        obj = null;
        _ref3 = node.base.properties;
        for (_j = 0, _len2 = _ref3.length; _j < _len2; _j++) {
          prop = _ref3[_j];
          if (prop instanceof Assign || prop instanceof Comment) {
            if (!obj) nodes.push(obj = new Obj(properties = [], true));
            properties.push(prop);
          } else {
            nodes.push(prop);
            obj = null;
          }
        }
      }
      return nodes;
    };

    Call.prototype.compileNode = function(o) {
      var arg, args, code, _ref3;
      if ((_ref3 = this.variable) != null) _ref3.front = this.front;
      if (code = Splat.compileSplattedArray(o, this.args, true)) {
        return this.compileSplat(o, code);
      }
      args = this.filterImplicitObjects(this.args);
      args = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(arg.compile(o, LEVEL_LIST));
        }
        return _results;
      })()).join(', ');
      if (this.isSuper) {
        return this.superReference(o) + (".call(this" + (args && ', ' + args) + ")");
      } else {
        return (this.isNew ? 'new ' : '') + this.variable.compile(o, LEVEL_ACCESS) + ("(" + args + ")");
      }
    };

    Call.prototype.compileSuper = function(args, o) {
      return "" + (this.superReference(o)) + ".call(this" + (args.length ? ', ' : '') + args + ")";
    };

    Call.prototype.compileSplat = function(o, splatArgs) {
      var base, fun, idt, name, ref;
      if (this.isSuper) {
        return "" + (this.superReference(o)) + ".apply(this, " + splatArgs + ")";
      }
      if (this.isNew) {
        idt = this.tab + TAB;
        return "(function(func, args, ctor) {\n" + idt + "ctor.prototype = func.prototype;\n" + idt + "var child = new ctor, result = func.apply(child, args);\n" + idt + "return typeof result === \"object\" ? result : child;\n" + this.tab + "})(" + (this.variable.compile(o, LEVEL_LIST)) + ", " + splatArgs + ", function() {})";
      }
      base = new Value(this.variable);
      if ((name = base.properties.pop()) && base.isComplex()) {
        ref = o.scope.freeVariable('ref');
        fun = "(" + ref + " = " + (base.compile(o, LEVEL_LIST)) + ")" + (name.compile(o));
      } else {
        fun = base.compile(o, LEVEL_ACCESS);
        if (SIMPLENUM.test(fun)) fun = "(" + fun + ")";
        if (name) {
          ref = fun;
          fun += name.compile(o);
        } else {
          ref = 'null';
        }
      }
      return "" + fun + ".apply(" + ref + ", " + splatArgs + ")";
    };

    return Call;
  })(Base);

  exports.Extends = Extends = (function(_super) {

    __extends(Extends, _super);

    Extends.name = 'Extends';

    function Extends(child, parent) {
      this.child = child;
      this.parent = parent;
    }

    Extends.prototype.children = ['child', 'parent'];

    Extends.prototype.compile = function(o) {
      return new Call(new Value(new Literal(utility('extends'))), [this.child, this.parent]).compile(o);
    };

    return Extends;
  })(Base);

  exports.Access = Access = (function(_super) {

    __extends(Access, _super);

    Access.name = 'Access';

    function Access(name, tag) {
      this.name = name;
      this.name.asKey = true;
      this.soak = tag === 'soak';
    }

    Access.prototype.children = ['name'];

    Access.prototype.compile = function(o) {
      var name;
      name = this.name.compile(o);
      if (IDENTIFIER.test(name)) {
        return "." + name;
      } else {
        return "[" + name + "]";
      }
    };

    Access.prototype.isComplex = NO;

    return Access;
  })(Base);

  exports.Index = Index = (function(_super) {

    __extends(Index, _super);

    Index.name = 'Index';

    function Index(index) {
      this.index = index;
    }

    Index.prototype.children = ['index'];

    Index.prototype.compile = function(o) {
      return "[" + (this.index.compile(o, LEVEL_PAREN)) + "]";
    };

    Index.prototype.isComplex = function() {
      return this.index.isComplex();
    };

    return Index;
  })(Base);

  exports.Range = Range = (function(_super) {

    __extends(Range, _super);

    Range.name = 'Range';

    Range.prototype.children = ['from', 'to'];

    function Range(from, to, tag) {
      this.from = from;
      this.to = to;
      this.exclusive = tag === 'exclusive';
      this.equals = this.exclusive ? '' : '=';
    }

    Range.prototype.compileVariables = function(o) {
      var step, _ref3, _ref4, _ref5, _ref6;
      o = merge(o, {
        top: true
      });
      _ref3 = this.from.cache(o, LEVEL_LIST), this.fromC = _ref3[0], this.fromVar = _ref3[1];
      _ref4 = this.to.cache(o, LEVEL_LIST), this.toC = _ref4[0], this.toVar = _ref4[1];
      if (step = del(o, 'step')) {
        _ref5 = step.cache(o, LEVEL_LIST), this.step = _ref5[0], this.stepVar = _ref5[1];
      }
      _ref6 = [this.fromVar.match(SIMPLENUM), this.toVar.match(SIMPLENUM)], this.fromNum = _ref6[0], this.toNum = _ref6[1];
      if (this.stepVar) return this.stepNum = this.stepVar.match(SIMPLENUM);
    };

    Range.prototype.compileNode = function(o) {
      var cond, condPart, from, gt, idx, idxName, known, lt, namedIndex, stepPart, to, varPart, _ref3, _ref4;
      if (!this.fromVar) this.compileVariables(o);
      if (!o.index) return this.compileArray(o);
      known = this.fromNum && this.toNum;
      idx = del(o, 'index');
      idxName = del(o, 'name');
      namedIndex = idxName && idxName !== idx;
      varPart = "" + idx + " = " + this.fromC;
      if (this.toC !== this.toVar) varPart += ", " + this.toC;
      if (this.step !== this.stepVar) varPart += ", " + this.step;
      _ref3 = ["" + idx + " <" + this.equals, "" + idx + " >" + this.equals], lt = _ref3[0], gt = _ref3[1];
      condPart = this.stepNum ? +this.stepNum > 0 ? "" + lt + " " + this.toVar : "" + gt + " " + this.toVar : known ? ((_ref4 = [+this.fromNum, +this.toNum], from = _ref4[0], to = _ref4[1], _ref4), from <= to ? "" + lt + " " + to : "" + gt + " " + to) : (cond = "" + this.fromVar + " <= " + this.toVar, "" + cond + " ? " + lt + " " + this.toVar + " : " + gt + " " + this.toVar);
      stepPart = this.stepVar ? "" + idx + " += " + this.stepVar : known ? namedIndex ? from <= to ? "++" + idx : "--" + idx : from <= to ? "" + idx + "++" : "" + idx + "--" : namedIndex ? "" + cond + " ? ++" + idx + " : --" + idx : "" + cond + " ? " + idx + "++ : " + idx + "--";
      if (namedIndex) varPart = "" + idxName + " = " + varPart;
      if (namedIndex) stepPart = "" + idxName + " = " + stepPart;
      return "" + varPart + "; " + condPart + "; " + stepPart;
    };

    Range.prototype.compileArray = function(o) {
      var args, body, cond, hasArgs, i, idt, post, pre, range, result, vars, _i, _ref3, _ref4, _results;
      if (this.fromNum && this.toNum && Math.abs(this.fromNum - this.toNum) <= 20) {
        range = (function() {
          _results = [];
          for (var _i = _ref3 = +this.fromNum, _ref4 = +this.toNum; _ref3 <= _ref4 ? _i <= _ref4 : _i >= _ref4; _ref3 <= _ref4 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        if (this.exclusive) range.pop();
        return "[" + (range.join(', ')) + "]";
      }
      idt = this.tab + TAB;
      i = o.scope.freeVariable('i');
      result = o.scope.freeVariable('results');
      pre = "\n" + idt + result + " = [];";
      if (this.fromNum && this.toNum) {
        o.index = i;
        body = this.compileNode(o);
      } else {
        vars = ("" + i + " = " + this.fromC) + (this.toC !== this.toVar ? ", " + this.toC : '');
        cond = "" + this.fromVar + " <= " + this.toVar;
        body = "var " + vars + "; " + cond + " ? " + i + " <" + this.equals + " " + this.toVar + " : " + i + " >" + this.equals + " " + this.toVar + "; " + cond + " ? " + i + "++ : " + i + "--";
      }
      post = "{ " + result + ".push(" + i + "); }\n" + idt + "return " + result + ";\n" + o.indent;
      hasArgs = function(node) {
        return node != null ? node.contains(function(n) {
          return n instanceof Literal && n.value === 'arguments' && !n.asKey;
        }) : void 0;
      };
      if (hasArgs(this.from) || hasArgs(this.to)) args = ', arguments';
      return "(function() {" + pre + "\n" + idt + "for (" + body + ")" + post + "}).apply(this" + (args != null ? args : '') + ")";
    };

    return Range;
  })(Base);

  exports.Slice = Slice = (function(_super) {

    __extends(Slice, _super);

    Slice.name = 'Slice';

    Slice.prototype.children = ['range'];

    function Slice(range) {
      this.range = range;
      Slice.__super__.constructor.call(this);
    }

    Slice.prototype.compileNode = function(o) {
      var compiled, from, fromStr, to, toStr, _ref3;
      _ref3 = this.range, to = _ref3.to, from = _ref3.from;
      fromStr = from && from.compile(o, LEVEL_PAREN) || '0';
      compiled = to && to.compile(o, LEVEL_PAREN);
      if (to && !(!this.range.exclusive && +compiled === -1)) {
        toStr = ', ' + (this.range.exclusive ? compiled : SIMPLENUM.test(compiled) ? "" + (+compiled + 1) : (compiled = to.compile(o, LEVEL_ACCESS), "" + compiled + " + 1 || 9e9"));
      }
      return ".slice(" + fromStr + (toStr || '') + ")";
    };

    return Slice;
  })(Base);

  exports.Obj = Obj = (function(_super) {

    __extends(Obj, _super);

    Obj.name = 'Obj';

    function Obj(props, generated) {
      this.generated = generated != null ? generated : false;
      this.objects = this.properties = props || [];
    }

    Obj.prototype.children = ['properties'];

    Obj.prototype.compileNode = function(o) {
      var i, idt, indent, join, lastNoncom, node, obj, prop, propName, propNames, props, _i, _j, _len, _len2, _ref3;
      props = this.properties;
      propNames = [];
      _ref3 = this.properties;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        prop = _ref3[_i];
        if (prop.isComplex()) prop = prop.variable;
        if (prop != null) {
          propName = prop.unwrapAll().value.toString();
          if (__indexOf.call(propNames, propName) >= 0) {
            throw SyntaxError("multiple object literal properties named \"" + propName + "\"");
          }
          propNames.push(propName);
        }
      }
      if (!props.length) return (this.front ? '({})' : '{}');
      if (this.generated) {
        for (_j = 0, _len2 = props.length; _j < _len2; _j++) {
          node = props[_j];
          if (node instanceof Value) {
            throw new Error('cannot have an implicit value in an implicit object');
          }
        }
      }
      idt = o.indent += TAB;
      lastNoncom = this.lastNonComment(this.properties);
      props = (function() {
        var _k, _len3, _results;
        _results = [];
        for (i = _k = 0, _len3 = props.length; _k < _len3; i = ++_k) {
          prop = props[i];
          join = i === props.length - 1 ? '' : prop === lastNoncom || prop instanceof Comment ? '\n' : ',\n';
          indent = prop instanceof Comment ? '' : idt;
          if (prop instanceof Value && prop["this"]) {
            prop = new Assign(prop.properties[0].name, prop, 'object');
          }
          if (!(prop instanceof Comment)) {
            if (!(prop instanceof Assign)) prop = new Assign(prop, prop, 'object');
            (prop.variable.base || prop.variable).asKey = true;
          }
          _results.push(indent + prop.compile(o, LEVEL_TOP) + join);
        }
        return _results;
      })();
      props = props.join('');
      obj = "{" + (props && '\n' + props + '\n' + this.tab) + "}";
      if (this.front) {
        return "(" + obj + ")";
      } else {
        return obj;
      }
    };

    Obj.prototype.assigns = function(name) {
      var prop, _i, _len, _ref3;
      _ref3 = this.properties;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        prop = _ref3[_i];
        if (prop.assigns(name)) return true;
      }
      return false;
    };

    return Obj;
  })(Base);

  exports.Arr = Arr = (function(_super) {

    __extends(Arr, _super);

    Arr.name = 'Arr';

    function Arr(objs) {
      this.objects = objs || [];
    }

    Arr.prototype.children = ['objects'];

    Arr.prototype.filterImplicitObjects = Call.prototype.filterImplicitObjects;

    Arr.prototype.compileNode = function(o) {
      var code, obj, objs;
      if (!this.objects.length) return '[]';
      o.indent += TAB;
      objs = this.filterImplicitObjects(this.objects);
      if (code = Splat.compileSplattedArray(o, objs)) return code;
      code = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = objs.length; _i < _len; _i++) {
          obj = objs[_i];
          _results.push(obj.compile(o, LEVEL_LIST));
        }
        return _results;
      })()).join(', ');
      if (code.indexOf('\n') >= 0) {
        return "[\n" + o.indent + code + "\n" + this.tab + "]";
      } else {
        return "[" + code + "]";
      }
    };

    Arr.prototype.assigns = function(name) {
      var obj, _i, _len, _ref3;
      _ref3 = this.objects;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        obj = _ref3[_i];
        if (obj.assigns(name)) return true;
      }
      return false;
    };

    return Arr;
  })(Base);

  exports.Class = Class = (function(_super) {

    __extends(Class, _super);

    Class.name = 'Class';

    function Class(variable, parent, body) {
      this.variable = variable;
      this.parent = parent;
      this.body = body != null ? body : new Block;
      this.boundFuncs = [];
      this.body.classBody = true;
    }

    Class.prototype.children = ['variable', 'parent', 'body'];

    Class.prototype.determineName = function() {
      var decl, tail;
      if (!this.variable) return null;
      decl = (tail = last(this.variable.properties)) ? tail instanceof Access && tail.name.value : this.variable.base.value;
      if (__indexOf.call(STRICT_PROSCRIBED, decl) >= 0) {
        throw SyntaxError("variable name may not be " + decl);
      }
      return decl && (decl = IDENTIFIER.test(decl) && decl);
    };

    Class.prototype.setContext = function(name) {
      return this.body.traverseChildren(false, function(node) {
        if (node.classBody) return false;
        if (node instanceof Literal && node.value === 'this') {
          return node.value = name;
        } else if (node instanceof Code) {
          node.klass = name;
          if (node.bound) return node.context = name;
        }
      });
    };

    Class.prototype.addBoundFunctions = function(o) {
      var bvar, lhs, _i, _len, _ref3, _results;
      if (this.boundFuncs.length) {
        _ref3 = this.boundFuncs;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          bvar = _ref3[_i];
          lhs = (new Value(new Literal("this"), [new Access(bvar)])).compile(o);
          _results.push(this.ctor.body.unshift(new Literal("" + lhs + " = " + (utility('bind')) + "(" + lhs + ", this)")));
        }
        return _results;
      }
    };

    Class.prototype.addProperties = function(node, name, o) {
      var assign, base, exprs, func, props;
      props = node.base.properties.slice(0);
      exprs = (function() {
        var _results;
        _results = [];
        while (assign = props.shift()) {
          if (assign instanceof Assign) {
            base = assign.variable.base;
            delete assign.context;
            func = assign.value;
            if (base.value === 'constructor') {
              if (this.ctor) {
                throw new Error('cannot define more than one constructor in a class');
              }
              if (func.bound) {
                throw new Error('cannot define a constructor as a bound function');
              }
              if (func instanceof Code) {
                assign = this.ctor = func;
              } else {
                this.externalCtor = o.scope.freeVariable('class');
                assign = new Assign(new Literal(this.externalCtor), func);
              }
            } else {
              if (assign.variable["this"]) {
                func["static"] = true;
                if (func.bound) func.context = name;
              } else {
                assign.variable = new Value(new Literal(name), [new Access(new Literal('prototype')), new Access(base)]);
                if (func instanceof Code && func.bound) {
                  this.boundFuncs.push(base);
                  func.bound = false;
                }
              }
            }
          }
          _results.push(assign);
        }
        return _results;
      }).call(this);
      return compact(exprs);
    };

    Class.prototype.walkBody = function(name, o) {
      var _this = this;
      return this.traverseChildren(false, function(child) {
        var exps, i, node, _i, _len, _ref3;
        if (child instanceof Class) return false;
        if (child instanceof Block) {
          _ref3 = exps = child.expressions;
          for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
            node = _ref3[i];
            if (node instanceof Value && node.isObject(true)) {
              exps[i] = _this.addProperties(node, name, o);
            }
          }
          return child.expressions = exps = flatten(exps);
        }
      });
    };

    Class.prototype.hoistDirectivePrologue = function() {
      var expressions, index, node;
      index = 0;
      expressions = this.body.expressions;
      while ((node = expressions[index]) && node instanceof Comment || node instanceof Value && node.isString()) {
        ++index;
      }
      return this.directives = expressions.splice(0, index);
    };

    Class.prototype.ensureConstructor = function(name) {
      if (!this.ctor) {
        this.ctor = new Code;
        if (this.parent) {
          this.ctor.body.push(new Literal("" + name + ".__super__.constructor.apply(this, arguments)"));
        }
        if (this.externalCtor) {
          this.ctor.body.push(new Literal("" + this.externalCtor + ".apply(this, arguments)"));
        }
        this.ctor.body.makeReturn();
        this.body.expressions.unshift(this.ctor);
      }
      this.ctor.ctor = this.ctor.name = name;
      this.ctor.klass = null;
      return this.ctor.noReturn = true;
    };

    Class.prototype.compileNode = function(o) {
      var call, decl, imported, klass, lname, name, params, _ref3;
      decl = this.determineName();
      if (imported = Import.importedDeclaration(o, decl)) {
        return imported.compile(o);
      }
      name = decl || '_Class';
      if (name.reserved) name = "_" + name;
      lname = new Literal(name);
      this.hoistDirectivePrologue();
      this.setContext(name);
      this.walkBody(name, o);
      this.ensureConstructor(name);
      this.body.spaced = true;
      if (!(this.ctor instanceof Code)) this.body.expressions.unshift(this.ctor);
      if (decl) {
        this.body.expressions.unshift(new Assign(new Value(new Literal(name), [new Access(new Literal('name'))]), new Literal("'" + name + "'")));
      }
      this.body.expressions.push(lname);
      (_ref3 = this.body.expressions).unshift.apply(_ref3, this.directives);
      this.addBoundFunctions(o);
      call = Closure.wrap(this.body);
      if (this.parent) {
        this.superClass = new Literal(o.scope.freeVariable('super', false));
        this.body.expressions.unshift(new Extends(lname, this.superClass));
        call.args.push(this.parent);
        params = call.variable.params || call.variable.base.params;
        params.push(new Param(this.superClass));
      }
      klass = new Parens(call, true);
      if (this.variable) klass = new Assign(this.variable, klass);
      return klass.compile(o);
    };

    return Class;
  })(Base);

  exports.Assign = Assign = (function(_super) {

    __extends(Assign, _super);

    Assign.name = 'Assign';

    function Assign(variable, value, context, options) {
      var forbidden, name, _ref3;
      this.variable = variable;
      this.value = value;
      this.context = context;
      this.param = options && options.param;
      this.subpattern = options && options.subpattern;
      forbidden = (_ref3 = (name = this.variable.unwrapAll().value), __indexOf.call(STRICT_PROSCRIBED, _ref3) >= 0);
      if (forbidden && this.context !== 'object') {
        throw SyntaxError("variable name may not be \"" + name + "\"");
      }
    }

    Assign.prototype.children = ['variable', 'value'];

    Assign.prototype.isStatement = function(o) {
      return (o != null ? o.level : void 0) === LEVEL_TOP && (this.context != null) && __indexOf.call(this.context, "?") >= 0;
    };

    Assign.prototype.assigns = function(name) {
      return this[this.context === 'object' ? 'value' : 'variable'].assigns(name);
    };

    Assign.prototype.unfoldSoak = function(o) {
      return unfoldSoak(o, this, 'variable');
    };

    Assign.prototype.compileNode = function(o) {
      var isValue, match, name, val, varBase, _ref3, _ref4, _ref5, _ref6;
      if (isValue = this.variable instanceof Value) {
        if (this.variable.isArray() || this.variable.isObject()) {
          return this.compilePatternMatch(o);
        }
        if (this.variable.isSplice()) return this.compileSplice(o);
        if ((_ref3 = this.context) === '||=' || _ref3 === '&&=' || _ref3 === '?=') {
          return this.compileConditional(o);
        }
      }
      name = this.variable.compile(o, LEVEL_LIST);
      if (!this.context) {
        if (!(varBase = this.variable.unwrapAll()).isAssignable()) {
          throw SyntaxError("\"" + (this.variable.compile(o)) + "\" cannot be assigned.");
        }
        if (!(typeof varBase.hasProperties === "function" ? varBase.hasProperties() : void 0)) {
          if (this.param) {
            o.scope.add(name, 'var');
          } else {
            o.scope.find(name);
          }
        }
      }
      if (this.value instanceof Code && (match = METHOD_DEF.exec(name))) {
        if (match[1]) this.value.klass = match[1];
        this.value.name = (_ref4 = (_ref5 = (_ref6 = match[2]) != null ? _ref6 : match[3]) != null ? _ref5 : match[4]) != null ? _ref4 : match[5];
      }
      val = this.value.compile(o, LEVEL_LIST);
      if (this.context === 'object') return "" + name + ": " + val;
      val = name + (" " + (this.context || '=') + " ") + val;
      if (o.level <= LEVEL_LIST) {
        return val;
      } else {
        return "(" + val + ")";
      }
    };

    Assign.prototype.compilePatternMatch = function(o) {
      var acc, assigns, code, i, idx, isObject, ivar, name, obj, objects, olen, ref, rest, splat, top, val, value, vvar, _i, _len, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      top = o.level === LEVEL_TOP;
      value = this.value;
      objects = this.variable.base.objects;
      if (!(olen = objects.length)) {
        code = value.compile(o);
        if (o.level >= LEVEL_OP) {
          return "(" + code + ")";
        } else {
          return code;
        }
      }
      isObject = this.variable.isObject();
      if (top && olen === 1 && !((obj = objects[0]) instanceof Splat)) {
        if (obj instanceof Assign) {
          _ref3 = obj, (_ref4 = _ref3.variable, idx = _ref4.base), obj = _ref3.value;
        } else {
          if (obj.base instanceof Parens) {
            _ref5 = new Value(obj.unwrapAll()).cacheReference(o), obj = _ref5[0], idx = _ref5[1];
          } else {
            idx = isObject ? obj["this"] ? obj.properties[0].name : obj : new Literal(0);
          }
        }
        acc = IDENTIFIER.test(idx.unwrap().value || 0);
        value = new Value(value);
        value.properties.push(new (acc ? Access : Index)(idx));
        if (_ref6 = obj.unwrap().value, __indexOf.call(RESERVED, _ref6) >= 0) {
          throw new SyntaxError("assignment to a reserved word: " + (obj.compile(o)) + " = " + (value.compile(o)));
        }
        return new Assign(obj, value, null, {
          param: this.param
        }).compile(o, LEVEL_TOP);
      }
      vvar = value.compile(o, LEVEL_LIST);
      assigns = [];
      splat = false;
      if (!IDENTIFIER.test(vvar) || this.variable.assigns(vvar)) {
        assigns.push("" + (ref = o.scope.freeVariable('ref')) + " = " + vvar);
        vvar = ref;
      }
      for (i = _i = 0, _len = objects.length; _i < _len; i = ++_i) {
        obj = objects[i];
        idx = i;
        if (isObject) {
          if (obj instanceof Assign) {
            _ref7 = obj, (_ref8 = _ref7.variable, idx = _ref8.base), obj = _ref7.value;
          } else {
            if (obj.base instanceof Parens) {
              _ref9 = new Value(obj.unwrapAll()).cacheReference(o), obj = _ref9[0], idx = _ref9[1];
            } else {
              idx = obj["this"] ? obj.properties[0].name : obj;
            }
          }
        }
        if (!splat && obj instanceof Splat) {
          name = obj.name.unwrap().value;
          obj = obj.unwrap();
          val = "" + olen + " <= " + vvar + ".length ? " + (utility('slice')) + ".call(" + vvar + ", " + i;
          if (rest = olen - i - 1) {
            ivar = o.scope.freeVariable('i');
            val += ", " + ivar + " = " + vvar + ".length - " + rest + ") : (" + ivar + " = " + i + ", [])";
          } else {
            val += ") : []";
          }
          val = new Literal(val);
          splat = "" + ivar + "++";
        } else {
          name = obj.unwrap().value;
          if (obj instanceof Splat) {
            obj = obj.name.compile(o);
            throw new SyntaxError("multiple splats are disallowed in an assignment: " + obj + "...");
          }
          if (typeof idx === 'number') {
            idx = new Literal(splat || idx);
            acc = false;
          } else {
            acc = isObject && IDENTIFIER.test(idx.unwrap().value || 0);
          }
          val = new Value(new Literal(vvar), [new (acc ? Access : Index)(idx)]);
        }
        if ((name != null) && __indexOf.call(RESERVED, name) >= 0) {
          throw new SyntaxError("assignment to a reserved word: " + (obj.compile(o)) + " = " + (val.compile(o)));
        }
        assigns.push(new Assign(obj, val, null, {
          param: this.param,
          subpattern: true
        }).compile(o, LEVEL_LIST));
      }
      if (!(top || this.subpattern)) assigns.push(vvar);
      code = assigns.join(', ');
      if (o.level < LEVEL_LIST) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    Assign.prototype.compileConditional = function(o) {
      var left, rite, _ref3;
      _ref3 = this.variable.cacheReference(o), left = _ref3[0], rite = _ref3[1];
      if (__indexOf.call(this.context, "?") >= 0) o.isExistentialEquals = true;
      return new Op(this.context.slice(0, -1), left, new Assign(rite, this.value, '=')).compile(o);
    };

    Assign.prototype.compileSplice = function(o) {
      var code, exclusive, from, fromDecl, fromRef, name, to, valDef, valRef, _ref3, _ref4, _ref5;
      _ref3 = this.variable.properties.pop().range, from = _ref3.from, to = _ref3.to, exclusive = _ref3.exclusive;
      name = this.variable.compile(o);
      _ref4 = (from != null ? from.cache(o, LEVEL_OP) : void 0) || ['0', '0'], fromDecl = _ref4[0], fromRef = _ref4[1];
      if (to) {
        if ((from != null ? from.isSimpleNumber() : void 0) && to.isSimpleNumber()) {
          to = +to.compile(o) - +fromRef;
          if (!exclusive) to += 1;
        } else {
          to = to.compile(o, LEVEL_ACCESS) + ' - ' + fromRef;
          if (!exclusive) to += ' + 1';
        }
      } else {
        to = "9e9";
      }
      _ref5 = this.value.cache(o, LEVEL_LIST), valDef = _ref5[0], valRef = _ref5[1];
      code = "[].splice.apply(" + name + ", [" + fromDecl + ", " + to + "].concat(" + valDef + ")), " + valRef;
      if (o.level > LEVEL_TOP) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };

    return Assign;
  })(Base);

  exports.Code = Code = (function(_super) {

    __extends(Code, _super);

    Code.name = 'Code';

    function Code(params, body, tag) {
      this.params = params || [];
      this.body = body || new Block;
      this.bound = tag === 'boundfunc';
      if (this.bound) this.context = '_this';
    }

    Code.prototype.children = ['params', 'body'];

    Code.prototype.isStatement = function() {
      return !!this.ctor;
    };

    Code.prototype.jumps = NO;

    Code.prototype.compileNode = function(o) {
      var code, exprs, i, idt, lit, name, p, param, params, ref, splats, uniqs, val, wasEmpty, _i, _j, _k, _l, _len, _len2, _len3, _len4, _len5, _len6, _m, _n, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      o.scope = new Scope(o.scope, this.body, this);
      o.scope.shared = del(o, 'sharedScope');
      o.indent += TAB;
      delete o.bare;
      params = [];
      exprs = [];
      _ref3 = this.paramNames();
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        name = _ref3[_i];
        if (!o.scope.check(name)) o.scope.parameter(name);
      }
      _ref4 = this.params;
      for (_j = 0, _len2 = _ref4.length; _j < _len2; _j++) {
        param = _ref4[_j];
        if (!param.splat) continue;
        _ref5 = this.params;
        for (_k = 0, _len3 = _ref5.length; _k < _len3; _k++) {
          p = _ref5[_k];
          if (p.name.value) o.scope.add(p.name.value, 'var', true);
        }
        splats = new Assign(new Value(new Arr((function() {
          var _l, _len4, _ref6, _results;
          _ref6 = this.params;
          _results = [];
          for (_l = 0, _len4 = _ref6.length; _l < _len4; _l++) {
            p = _ref6[_l];
            _results.push(p.asReference(o));
          }
          return _results;
        }).call(this))), new Value(new Literal('arguments')));
        break;
      }
      _ref6 = this.params;
      for (_l = 0, _len4 = _ref6.length; _l < _len4; _l++) {
        param = _ref6[_l];
        if (param.isComplex()) {
          val = ref = param.asReference(o);
          if (param.value) val = new Op('?', ref, param.value);
          exprs.push(new Assign(new Value(param.name), val, '=', {
            param: true
          }));
        } else {
          ref = param;
          if (param.value) {
            lit = new Literal(ref.name.value + ' == null');
            val = new Assign(new Value(param.name), param.value, '=');
            exprs.push(new If(lit, val));
          }
        }
        if (!splats) params.push(ref);
      }
      wasEmpty = this.body.isEmpty();
      if (splats) exprs.unshift(splats);
      if (exprs.length) {
        (_ref7 = this.body.expressions).unshift.apply(_ref7, exprs);
      }
      for (i = _m = 0, _len5 = params.length; _m < _len5; i = ++_m) {
        p = params[i];
        o.scope.parameter(params[i] = p.compile(o));
      }
      uniqs = [];
      _ref8 = this.paramNames();
      for (_n = 0, _len6 = _ref8.length; _n < _len6; _n++) {
        name = _ref8[_n];
        if (__indexOf.call(uniqs, name) >= 0) {
          throw SyntaxError("multiple parameters named '" + name + "'");
        }
        uniqs.push(name);
      }
      if (!(wasEmpty || this.noReturn)) this.body.makeReturn();
      if (this.bound) {
        if ((_ref9 = o.scope.parent.method) != null ? _ref9.bound : void 0) {
          this.bound = this.context = o.scope.parent.method.context;
        } else if (!this["static"]) {
          o.scope.parent.assign('_this', 'this');
        }
      }
      idt = o.indent;
      code = 'function';
      if (this.ctor) code += ' ' + this.name;
      code += '(' + params.join(', ') + ') {';
      if (!this.body.isEmpty()) {
        code += "\n" + (this.body.compileWithDeclarations(o).replace(/\s+$/, "")) + "\n" + this.tab;
      }
      code += '}';
      if (this.ctor) return this.tab + code;
      if (this.front || (o.level >= LEVEL_ACCESS)) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };

    Code.prototype.paramNames = function() {
      var names, param, _i, _len, _ref3;
      names = [];
      _ref3 = this.params;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        param = _ref3[_i];
        names.push.apply(names, param.names());
      }
      return names;
    };

    Code.prototype.traverseChildren = function(crossScope, func) {
      if (crossScope) {
        return Code.__super__.traverseChildren.call(this, crossScope, func);
      }
    };

    return Code;
  })(Base);

  exports.Param = Param = (function(_super) {

    __extends(Param, _super);

    Param.name = 'Param';

    function Param(name, value, splat) {
      var _ref3;
      this.name = name;
      this.value = value;
      this.splat = splat;
      if (_ref3 = (name = this.name.unwrapAll().value), __indexOf.call(STRICT_PROSCRIBED, _ref3) >= 0) {
        throw SyntaxError("parameter name \"" + name + "\" is not allowed");
      }
    }

    Param.prototype.children = ['name', 'value'];

    Param.prototype.compile = function(o) {
      return this.name.compile(o, LEVEL_LIST);
    };

    Param.prototype.asReference = function(o) {
      var node;
      if (this.reference) return this.reference;
      node = this.name;
      if (node["this"]) {
        node = node.properties[0].name;
        if (node.value.reserved) {
          node = new Literal(o.scope.freeVariable(node.value));
        }
      } else if (node.isComplex()) {
        node = new Literal(o.scope.freeVariable('arg'));
      }
      node = new Value(node);
      if (this.splat) node = new Splat(node);
      return this.reference = node;
    };

    Param.prototype.isComplex = function() {
      return this.name.isComplex();
    };

    Param.prototype.names = function(name) {
      var atParam, names, obj, _i, _len, _ref3;
      if (name == null) name = this.name;
      atParam = function(obj) {
        var value;
        value = obj.properties[0].name.value;
        if (value.reserved) {
          return [];
        } else {
          return [value];
        }
      };
      if (name instanceof Literal) return [name.value];
      if (name instanceof Value) return atParam(name);
      names = [];
      _ref3 = name.objects;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        obj = _ref3[_i];
        if (obj instanceof Assign) {
          names.push(obj.variable.base.value);
        } else if (obj.isArray() || obj.isObject()) {
          names.push.apply(names, this.names(obj.base));
        } else if (obj["this"]) {
          names.push.apply(names, atParam(obj));
        } else {
          names.push(obj.base.value);
        }
      }
      return names;
    };

    return Param;
  })(Base);

  exports.Splat = Splat = (function(_super) {

    __extends(Splat, _super);

    Splat.name = 'Splat';

    Splat.prototype.children = ['name'];

    Splat.prototype.isAssignable = YES;

    function Splat(name) {
      this.name = name.compile ? name : new Literal(name);
    }

    Splat.prototype.assigns = function(name) {
      return this.name.assigns(name);
    };

    Splat.prototype.compile = function(o) {
      if (this.index != null) {
        return this.compileParam(o);
      } else {
        return this.name.compile(o);
      }
    };

    Splat.prototype.unwrap = function() {
      return this.name;
    };

    Splat.compileSplattedArray = function(o, list, apply) {
      var args, base, code, i, index, node, _i, _len;
      index = -1;
      while ((node = list[++index]) && !(node instanceof Splat)) {
        continue;
      }
      if (index >= list.length) return '';
      if (list.length === 1) {
        code = list[0].compile(o, LEVEL_LIST);
        if (apply) return code;
        return "" + (utility('slice')) + ".call(" + code + ")";
      }
      args = list.slice(index);
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        node = args[i];
        code = node.compile(o, LEVEL_LIST);
        args[i] = node instanceof Splat ? "" + (utility('slice')) + ".call(" + code + ")" : "[" + code + "]";
      }
      if (index === 0) {
        return args[0] + (".concat(" + (args.slice(1).join(', ')) + ")");
      }
      base = (function() {
        var _j, _len2, _ref3, _results;
        _ref3 = list.slice(0, index);
        _results = [];
        for (_j = 0, _len2 = _ref3.length; _j < _len2; _j++) {
          node = _ref3[_j];
          _results.push(node.compile(o, LEVEL_LIST));
        }
        return _results;
      })();
      return "[" + (base.join(', ')) + "].concat(" + (args.join(', ')) + ")";
    };

    return Splat;
  })(Base);

  exports.While = While = (function(_super) {

    __extends(While, _super);

    While.name = 'While';

    function While(condition, options) {
      this.condition = (options != null ? options.invert : void 0) ? condition.invert() : condition;
      this.guard = options != null ? options.guard : void 0;
    }

    While.prototype.children = ['condition', 'guard', 'body'];

    While.prototype.isStatement = YES;

    While.prototype.makeReturn = function(res) {
      if (res) {
        return While.__super__.makeReturn.apply(this, arguments);
      } else {
        this.returns = !this.jumps({
          loop: true
        });
        return this;
      }
    };

    While.prototype.addBody = function(body) {
      this.body = body;
      return this;
    };

    While.prototype.jumps = function() {
      var expressions, node, _i, _len;
      expressions = this.body.expressions;
      if (!expressions.length) return false;
      for (_i = 0, _len = expressions.length; _i < _len; _i++) {
        node = expressions[_i];
        if (node.jumps({
          loop: true
        })) return node;
      }
      return false;
    };

    While.prototype.compileNode = function(o) {
      var body, code, rvar, set;
      o.indent += TAB;
      set = '';
      body = this.body;
      if (body.isEmpty()) {
        body = '';
      } else {
        if (this.returns) {
          body.makeReturn(rvar = o.scope.freeVariable('results'));
          set = "" + this.tab + rvar + " = [];\n";
        }
        if (this.guard) {
          if (body.expressions.length > 1) {
            body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
          } else {
            if (this.guard) body = Block.wrap([new If(this.guard, body)]);
          }
        }
        body = "\n" + (body.compile(o, LEVEL_TOP)) + "\n" + this.tab;
      }
      code = set + this.tab + ("while (" + (this.condition.compile(o, LEVEL_PAREN)) + ") {" + body + "}");
      if (this.returns) code += "\n" + this.tab + "return " + rvar + ";";
      return code;
    };

    return While;
  })(Base);

  exports.Op = Op = (function(_super) {
    var CONVERSIONS, INVERSIONS;

    __extends(Op, _super);

    Op.name = 'Op';

    function Op(op, first, second, flip) {
      if (op === 'in') return new In(first, second);
      if (op === 'do') return this.generateDo(first);
      if (op === 'new') {
        if (first instanceof Call && !first["do"] && !first.isNew) {
          return first.newInstance();
        }
        if (first instanceof Code && first.bound || first["do"]) {
          first = new Parens(first);
        }
      }
      this.operator = CONVERSIONS[op] || op;
      this.first = first;
      this.second = second;
      this.flip = !!flip;
      return this;
    }

    CONVERSIONS = {
      '==': '===',
      '!=': '!==',
      'of': 'in'
    };

    INVERSIONS = {
      '!==': '===',
      '===': '!=='
    };

    Op.prototype.children = ['first', 'second'];

    Op.prototype.isSimpleNumber = NO;

    Op.prototype.isUnary = function() {
      return !this.second;
    };

    Op.prototype.isComplex = function() {
      var _ref3;
      return !(this.isUnary() && ((_ref3 = this.operator) === '+' || _ref3 === '-')) || this.first.isComplex();
    };

    Op.prototype.isChainable = function() {
      var _ref3;
      return (_ref3 = this.operator) === '<' || _ref3 === '>' || _ref3 === '>=' || _ref3 === '<=' || _ref3 === '===' || _ref3 === '!==';
    };

    Op.prototype.invert = function() {
      var allInvertable, curr, fst, op, _ref3;
      if (this.isChainable() && this.first.isChainable()) {
        allInvertable = true;
        curr = this;
        while (curr && curr.operator) {
          allInvertable && (allInvertable = curr.operator in INVERSIONS);
          curr = curr.first;
        }
        if (!allInvertable) return new Parens(this).invert();
        curr = this;
        while (curr && curr.operator) {
          curr.invert = !curr.invert;
          curr.operator = INVERSIONS[curr.operator];
          curr = curr.first;
        }
        return this;
      } else if (op = INVERSIONS[this.operator]) {
        this.operator = op;
        if (this.first.unwrap() instanceof Op) this.first.invert();
        return this;
      } else if (this.second) {
        return new Parens(this).invert();
      } else if (this.operator === '!' && (fst = this.first.unwrap()) instanceof Op && ((_ref3 = fst.operator) === '!' || _ref3 === 'in' || _ref3 === 'instanceof')) {
        return fst;
      } else {
        return new Op('!', this);
      }
    };

    Op.prototype.unfoldSoak = function(o) {
      var _ref3;
      return ((_ref3 = this.operator) === '++' || _ref3 === '--' || _ref3 === 'delete') && unfoldSoak(o, this, 'first');
    };

    Op.prototype.generateDo = function(exp) {
      var call, func, param, passedParams, ref, _i, _len, _ref3;
      passedParams = [];
      func = exp instanceof Assign && (ref = exp.value.unwrap()) instanceof Code ? ref : exp;
      _ref3 = func.params || [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        param = _ref3[_i];
        if (param.value) {
          passedParams.push(param.value);
          delete param.value;
        } else {
          passedParams.push(param);
        }
      }
      call = new Call(exp, passedParams);
      call["do"] = true;
      return call;
    };

    Op.prototype.compileNode = function(o) {
      var code, isChain, _ref3, _ref4;
      isChain = this.isChainable() && this.first.isChainable();
      if (!isChain) this.first.front = this.front;
      if (this.operator === 'delete' && o.scope.check(this.first.unwrapAll().value)) {
        throw SyntaxError('delete operand may not be argument or var');
      }
      if (((_ref3 = this.operator) === '--' || _ref3 === '++') && (_ref4 = this.first.unwrapAll().value, __indexOf.call(STRICT_PROSCRIBED, _ref4) >= 0)) {
        throw SyntaxError('prefix increment/decrement may not have eval or arguments operand');
      }
      if (this.isUnary()) return this.compileUnary(o);
      if (isChain) return this.compileChain(o);
      if (this.operator === '?') return this.compileExistence(o);
      code = this.first.compile(o, LEVEL_OP) + ' ' + this.operator + ' ' + this.second.compile(o, LEVEL_OP);
      if (o.level <= LEVEL_OP) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    Op.prototype.compileChain = function(o) {
      var code, fst, shared, _ref3;
      _ref3 = this.first.second.cache(o), this.first.second = _ref3[0], shared = _ref3[1];
      fst = this.first.compile(o, LEVEL_OP);
      code = "" + fst + " " + (this.invert ? '&&' : '||') + " " + (shared.compile(o)) + " " + this.operator + " " + (this.second.compile(o, LEVEL_OP));
      return "(" + code + ")";
    };

    Op.prototype.compileExistence = function(o) {
      var fst, ref;
      if (this.first.isComplex() && o.level > LEVEL_TOP) {
        ref = new Literal(o.scope.freeVariable('ref'));
        fst = new Parens(new Assign(ref, this.first));
      } else {
        fst = this.first;
        ref = fst;
      }
      return new If(new Existence(fst), ref, {
        type: 'if'
      }).addElse(this.second).compile(o);
    };

    Op.prototype.compileUnary = function(o) {
      var op, parts, plusMinus;
      if (o.level >= LEVEL_ACCESS) return (new Parens(this)).compile(o);
      parts = [op = this.operator];
      plusMinus = op === '+' || op === '-';
      if ((op === 'new' || op === 'typeof' || op === 'delete') || plusMinus && this.first instanceof Op && this.first.operator === op) {
        parts.push(' ');
      }
      if ((plusMinus && this.first instanceof Op) || (op === 'new' && this.first.isStatement(o))) {
        this.first = new Parens(this.first);
      }
      parts.push(this.first.compile(o, LEVEL_OP));
      if (this.flip) parts.reverse();
      return parts.join('');
    };

    Op.prototype.toString = function(idt) {
      return Op.__super__.toString.call(this, idt, this.constructor.name + ' ' + this.operator);
    };

    return Op;
  })(Base);

  exports.In = In = (function(_super) {

    __extends(In, _super);

    In.name = 'In';

    function In(object, array) {
      this.object = object;
      this.array = array;
    }

    In.prototype.children = ['object', 'array'];

    In.prototype.invert = NEGATE;

    In.prototype.compileNode = function(o) {
      var hasSplat, obj, _i, _len, _ref3;
      if (this.array instanceof Value && this.array.isArray()) {
        _ref3 = this.array.base.objects;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          obj = _ref3[_i];
          if (!(obj instanceof Splat)) continue;
          hasSplat = true;
          break;
        }
        if (!hasSplat) return this.compileOrTest(o);
      }
      return this.compileLoopTest(o);
    };

    In.prototype.compileOrTest = function(o) {
      var cmp, cnj, i, item, ref, sub, tests, _ref3, _ref4;
      if (this.array.base.objects.length === 0) return "" + (!!this.negated);
      _ref3 = this.object.cache(o, LEVEL_OP), sub = _ref3[0], ref = _ref3[1];
      _ref4 = this.negated ? [' !== ', ' && '] : [' === ', ' || '], cmp = _ref4[0], cnj = _ref4[1];
      tests = (function() {
        var _i, _len, _ref5, _results;
        _ref5 = this.array.base.objects;
        _results = [];
        for (i = _i = 0, _len = _ref5.length; _i < _len; i = ++_i) {
          item = _ref5[i];
          _results.push((i ? ref : sub) + cmp + item.compile(o, LEVEL_ACCESS));
        }
        return _results;
      }).call(this);
      tests = tests.join(cnj);
      if (o.level < LEVEL_OP) {
        return tests;
      } else {
        return "(" + tests + ")";
      }
    };

    In.prototype.compileLoopTest = function(o) {
      var code, ref, sub, _ref3;
      _ref3 = this.object.cache(o, LEVEL_LIST), sub = _ref3[0], ref = _ref3[1];
      code = utility('indexOf') + (".call(" + (this.array.compile(o, LEVEL_LIST)) + ", " + ref + ") ") + (this.negated ? '< 0' : '>= 0');
      if (sub === ref) return code;
      code = sub + ', ' + code;
      if (o.level < LEVEL_LIST) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    In.prototype.toString = function(idt) {
      return In.__super__.toString.call(this, idt, this.constructor.name + (this.negated ? '!' : ''));
    };

    return In;
  })(Base);

  exports.Try = Try = (function(_super) {

    __extends(Try, _super);

    Try.name = 'Try';

    function Try(attempt, error, recovery, ensure) {
      this.attempt = attempt;
      this.error = error;
      this.recovery = recovery;
      this.ensure = ensure;
    }

    Try.prototype.children = ['attempt', 'recovery', 'ensure'];

    Try.prototype.isStatement = YES;

    Try.prototype.jumps = function(o) {
      var _ref3;
      return this.attempt.jumps(o) || ((_ref3 = this.recovery) != null ? _ref3.jumps(o) : void 0);
    };

    Try.prototype.makeReturn = function(res) {
      if (this.attempt) this.attempt = this.attempt.makeReturn(res);
      if (this.recovery) this.recovery = this.recovery.makeReturn(res);
      return this;
    };

    Try.prototype.compileNode = function(o) {
      var catchPart, ensurePart, errorPart, tryPart;
      o.indent += TAB;
      errorPart = this.error ? " (" + (this.error.compile(o)) + ") " : ' ';
      tryPart = this.attempt.compile(o, LEVEL_TOP);
      catchPart = (function() {
        var _ref3;
        if (this.recovery) {
          if (_ref3 = this.error.value, __indexOf.call(STRICT_PROSCRIBED, _ref3) >= 0) {
            throw SyntaxError("catch variable may not be \"" + this.error.value + "\"");
          }
          if (!o.scope.check(this.error.value)) {
            o.scope.add(this.error.value, 'param');
          }
          return " catch" + errorPart + "{\n" + (this.recovery.compile(o, LEVEL_TOP)) + "\n" + this.tab + "}";
        } else if (!(this.ensure || this.recovery)) {
          return ' catch (_error) {}';
        }
      }).call(this);
      ensurePart = this.ensure ? " finally {\n" + (this.ensure.compile(o, LEVEL_TOP)) + "\n" + this.tab + "}" : '';
      return "" + this.tab + "try {\n" + tryPart + "\n" + this.tab + "}" + (catchPart || '') + ensurePart;
    };

    return Try;
  })(Base);

  exports.Throw = Throw = (function(_super) {

    __extends(Throw, _super);

    Throw.name = 'Throw';

    function Throw(expression) {
      this.expression = expression;
    }

    Throw.prototype.children = ['expression'];

    Throw.prototype.isStatement = YES;

    Throw.prototype.jumps = NO;

    Throw.prototype.makeReturn = THIS;

    Throw.prototype.compileNode = function(o) {
      return this.tab + ("throw " + (this.expression.compile(o)) + ";");
    };

    return Throw;
  })(Base);

  exports.Existence = Existence = (function(_super) {

    __extends(Existence, _super);

    Existence.name = 'Existence';

    function Existence(expression) {
      this.expression = expression;
    }

    Existence.prototype.children = ['expression'];

    Existence.prototype.invert = NEGATE;

    Existence.prototype.compileNode = function(o) {
      var cmp, cnj, code, _ref3;
      this.expression.front = this.front;
      code = this.expression.compile(o, LEVEL_OP);
      if (IDENTIFIER.test(code) && !o.scope.check(code)) {
        _ref3 = this.negated ? ['===', '||'] : ['!==', '&&'], cmp = _ref3[0], cnj = _ref3[1];
        code = "typeof " + code + " " + cmp + " \"undefined\" " + cnj + " " + code + " " + cmp + " null";
      } else {
        code = "" + code + " " + (this.negated ? '==' : '!=') + " null";
      }
      if (o.level <= LEVEL_COND) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    return Existence;
  })(Base);

  exports.Parens = Parens = (function(_super) {

    __extends(Parens, _super);

    Parens.name = 'Parens';

    function Parens(body) {
      this.body = body;
    }

    Parens.prototype.children = ['body'];

    Parens.prototype.unwrap = function() {
      return this.body;
    };

    Parens.prototype.isComplex = function() {
      return this.body.isComplex();
    };

    Parens.prototype.compileNode = function(o) {
      var bare, code, expr;
      expr = this.body.unwrap();
      if (expr instanceof Value && expr.isAtomic()) {
        expr.front = this.front;
        return expr.compile(o);
      }
      code = expr.compile(o, LEVEL_PAREN) || 'void 0';
      bare = o.level < LEVEL_OP && (expr instanceof Op || expr instanceof Call || (expr instanceof For && expr.returns));
      if (bare) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    return Parens;
  })(Base);

  exports.For = For = (function(_super) {

    __extends(For, _super);

    For.name = 'For';

    function For(body, source) {
      var _ref3;
      this.source = source.source, this.guard = source.guard, this.step = source.step, this.name = source.name, this.index = source.index;
      this.body = Block.wrap([body]);
      this.own = !!source.own;
      this.object = !!source.object;
      if (this.object) {
        _ref3 = [this.index, this.name], this.name = _ref3[0], this.index = _ref3[1];
      }
      if (this.index instanceof Value) {
        throw SyntaxError('index cannot be a pattern matching expression');
      }
      this.range = this.source instanceof Value && this.source.base instanceof Range && !this.source.properties.length;
      this.pattern = this.name instanceof Value;
      if (this.range && this.index) {
        throw SyntaxError('indexes do not apply to range loops');
      }
      if (this.range && this.pattern) {
        throw SyntaxError('cannot pattern match over range loops');
      }
      this.returns = false;
    }

    For.prototype.children = ['body', 'source', 'guard', 'step'];

    For.prototype.compileNode = function(o) {
      var body, defPart, forPart, forVarPart, guardPart, idt1, index, ivar, kvar, kvarAssign, lastJumps, lvar, name, namePart, ref, resultPart, returnResult, rvar, scope, source, stepPart, stepvar, svar, varPart, _ref3;
      body = Block.wrap([this.body]);
      lastJumps = (_ref3 = last(body.expressions)) != null ? _ref3.jumps() : void 0;
      if (lastJumps && lastJumps instanceof Return) this.returns = false;
      source = this.range ? this.source.base : this.source;
      scope = o.scope;
      name = this.name && this.name.compile(o, LEVEL_LIST);
      index = this.index && this.index.compile(o, LEVEL_LIST);
      if (name && !this.pattern) {
        scope.find(name, {
          immediate: true
        });
      }
      if (index) {
        scope.find(index, {
          immediate: true
        });
      }
      if (this.returns) rvar = scope.freeVariable('results');
      ivar = (this.object && index) || scope.freeVariable('i');
      kvar = (this.range && name) || index || ivar;
      kvarAssign = kvar !== ivar ? "" + kvar + " = " : "";
      if (this.step && !this.range) stepvar = scope.freeVariable("step");
      if (this.pattern) name = ivar;
      varPart = '';
      guardPart = '';
      defPart = '';
      idt1 = this.tab + TAB;
      if (this.range) {
        forPart = source.compile(merge(o, {
          index: ivar,
          name: name,
          step: this.step
        }));
      } else {
        svar = this.source.compile(o, LEVEL_LIST);
        if ((name || this.own) && !IDENTIFIER.test(svar)) {
          defPart = "" + this.tab + (ref = scope.freeVariable('ref')) + " = " + svar + ";\n";
          svar = ref;
        }
        if (name && !this.pattern) {
          namePart = "" + name + " = " + svar + "[" + kvar + "]";
        }
        if (!this.object) {
          lvar = scope.freeVariable('len');
          forVarPart = "" + kvarAssign + ivar + " = 0, " + lvar + " = " + svar + ".length";
          if (this.step) {
            forVarPart += ", " + stepvar + " = " + (this.step.compile(o, LEVEL_OP));
          }
          stepPart = "" + kvarAssign + (this.step ? "" + ivar + " += " + stepvar : (kvar !== ivar ? "++" + ivar : "" + ivar + "++"));
          forPart = "" + forVarPart + "; " + ivar + " < " + lvar + "; " + stepPart;
        }
      }
      if (this.returns) {
        resultPart = "" + this.tab + rvar + " = [];\n";
        returnResult = "\n" + this.tab + "return " + rvar + ";";
        body.makeReturn(rvar);
      }
      if (this.guard) {
        if (body.expressions.length > 1) {
          body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
        } else {
          if (this.guard) body = Block.wrap([new If(this.guard, body)]);
        }
      }
      if (this.pattern) {
        body.expressions.unshift(new Assign(this.name, new Literal("" + svar + "[" + kvar + "]")));
      }
      defPart += this.pluckDirectCall(o, body);
      if (namePart) varPart = "\n" + idt1 + namePart + ";";
      if (this.object) {
        forPart = "" + kvar + " in " + svar;
        if (this.own) {
          guardPart = "\n" + idt1 + "if (!" + (utility('hasProp')) + ".call(" + svar + ", " + kvar + ")) continue;";
        }
      }
      body = body.compile(merge(o, {
        indent: idt1
      }), LEVEL_TOP);
      if (body) body = '\n' + body + '\n';
      return "" + defPart + (resultPart || '') + this.tab + "for (" + forPart + ") {" + guardPart + varPart + body + this.tab + "}" + (returnResult || '');
    };

    For.prototype.pluckDirectCall = function(o, body) {
      var base, defs, expr, fn, idx, ref, val, _i, _len, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      defs = '';
      _ref3 = body.expressions;
      for (idx = _i = 0, _len = _ref3.length; _i < _len; idx = ++_i) {
        expr = _ref3[idx];
        expr = expr.unwrapAll();
        if (!(expr instanceof Call)) continue;
        val = expr.variable.unwrapAll();
        if (!((val instanceof Code) || (val instanceof Value && ((_ref4 = val.base) != null ? _ref4.unwrapAll() : void 0) instanceof Code && val.properties.length === 1 && ((_ref5 = (_ref6 = val.properties[0].name) != null ? _ref6.value : void 0) === 'call' || _ref5 === 'apply')))) {
          continue;
        }
        fn = ((_ref7 = val.base) != null ? _ref7.unwrapAll() : void 0) || val;
        ref = new Literal(o.scope.freeVariable('fn'));
        base = new Value(ref);
        if (val.base) _ref8 = [base, val], val.base = _ref8[0], base = _ref8[1];
        body.expressions[idx] = new Call(base, expr.args);
        defs += this.tab + new Assign(ref, fn).compile(o, LEVEL_TOP) + ';\n';
      }
      return defs;
    };

    return For;
  })(While);

  exports.Switch = Switch = (function(_super) {

    __extends(Switch, _super);

    Switch.name = 'Switch';

    function Switch(subject, cases, otherwise) {
      this.subject = subject;
      this.cases = cases;
      this.otherwise = otherwise;
    }

    Switch.prototype.children = ['subject', 'cases', 'otherwise'];

    Switch.prototype.isStatement = YES;

    Switch.prototype.jumps = function(o) {
      var block, conds, _i, _len, _ref3, _ref4, _ref5;
      if (o == null) {
        o = {
          block: true
        };
      }
      _ref3 = this.cases;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        _ref4 = _ref3[_i], conds = _ref4[0], block = _ref4[1];
        if (block.jumps(o)) return block;
      }
      return (_ref5 = this.otherwise) != null ? _ref5.jumps(o) : void 0;
    };

    Switch.prototype.makeReturn = function(res) {
      var pair, _i, _len, _ref3, _ref4;
      _ref3 = this.cases;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        pair = _ref3[_i];
        pair[1].makeReturn(res);
      }
      if (res) {
        this.otherwise || (this.otherwise = new Block([new Literal('void 0')]));
      }
      if ((_ref4 = this.otherwise) != null) _ref4.makeReturn(res);
      return this;
    };

    Switch.prototype.compileNode = function(o) {
      var block, body, code, cond, conditions, expr, i, idt1, idt2, _i, _j, _len, _len2, _ref3, _ref4, _ref5, _ref6;
      idt1 = o.indent + TAB;
      idt2 = o.indent = idt1 + TAB;
      code = this.tab + ("switch (" + (((_ref3 = this.subject) != null ? _ref3.compile(o, LEVEL_PAREN) : void 0) || false) + ") {\n");
      _ref4 = this.cases;
      for (i = _i = 0, _len = _ref4.length; _i < _len; i = ++_i) {
        _ref5 = _ref4[i], conditions = _ref5[0], block = _ref5[1];
        _ref6 = flatten([conditions]);
        for (_j = 0, _len2 = _ref6.length; _j < _len2; _j++) {
          cond = _ref6[_j];
          if (!this.subject) cond = cond.invert();
          code += idt1 + ("case " + (cond.compile(o, LEVEL_PAREN)) + ":\n");
        }
        if (body = block.compile(o, LEVEL_TOP)) code += body + '\n';
        if (i === this.cases.length - 1 && !this.otherwise) break;
        expr = this.lastNonComment(block.expressions);
        if (expr instanceof Return || (expr instanceof Literal && expr.jumps() && expr.value !== 'debugger')) {
          continue;
        }
        code += idt2 + 'break;\n';
      }
      if (this.otherwise && this.otherwise.expressions.length) {
        code += idt1 + ("default:\n" + (this.otherwise.compile(o, LEVEL_TOP)) + "\n");
      }
      return code + this.tab + '}';
    };

    return Switch;
  })(Base);

  exports.If = If = (function(_super) {

    __extends(If, _super);

    If.name = 'If';

    function If(condition, body, options) {
      this.body = body;
      if (options == null) options = {};
      this.condition = options.type === 'unless' ? condition.invert() : condition;
      this.elseBody = null;
      this.isChain = false;
      this.soak = options.soak;
    }

    If.prototype.children = ['condition', 'body', 'elseBody'];

    If.prototype.bodyNode = function() {
      var _ref3;
      return (_ref3 = this.body) != null ? _ref3.unwrap() : void 0;
    };

    If.prototype.elseBodyNode = function() {
      var _ref3;
      return (_ref3 = this.elseBody) != null ? _ref3.unwrap() : void 0;
    };

    If.prototype.addElse = function(elseBody) {
      if (this.isChain) {
        this.elseBodyNode().addElse(elseBody);
      } else {
        this.isChain = elseBody instanceof If;
        this.elseBody = this.ensureBlock(elseBody);
      }
      return this;
    };

    If.prototype.isStatement = function(o) {
      var _ref3;
      return (o != null ? o.level : void 0) === LEVEL_TOP || this.bodyNode().isStatement(o) || ((_ref3 = this.elseBodyNode()) != null ? _ref3.isStatement(o) : void 0);
    };

    If.prototype.jumps = function(o) {
      var _ref3;
      return this.body.jumps(o) || ((_ref3 = this.elseBody) != null ? _ref3.jumps(o) : void 0);
    };

    If.prototype.compileNode = function(o) {
      if (this.isStatement(o)) {
        return this.compileStatement(o);
      } else {
        return this.compileExpression(o);
      }
    };

    If.prototype.makeReturn = function(res) {
      if (res) {
        this.elseBody || (this.elseBody = new Block([new Literal('void 0')]));
      }
      this.body && (this.body = new Block([this.body.makeReturn(res)]));
      this.elseBody && (this.elseBody = new Block([this.elseBody.makeReturn(res)]));
      return this;
    };

    If.prototype.ensureBlock = function(node) {
      if (node instanceof Block) {
        return node;
      } else {
        return new Block([node]);
      }
    };

    If.prototype.compileStatement = function(o) {
      var body, bodyc, child, cond, exeq, ifPart, _ref3;
      child = del(o, 'chainChild');
      exeq = del(o, 'isExistentialEquals');
      if (exeq) {
        return new If(this.condition.invert(), this.elseBodyNode(), {
          type: 'if'
        }).compile(o);
      }
      cond = this.condition.compile(o, LEVEL_PAREN);
      o.indent += TAB;
      body = this.ensureBlock(this.body);
      bodyc = body.compile(o);
      if (1 === ((_ref3 = body.expressions) != null ? _ref3.length : void 0) && !this.elseBody && !child && bodyc && cond && -1 === (bodyc.indexOf('\n')) && 80 > cond.length + bodyc.length) {
        return "" + this.tab + "if (" + cond + ") " + (bodyc.replace(/^\s+/, ''));
      }
      if (bodyc) bodyc = "\n" + bodyc + "\n" + this.tab;
      ifPart = "if (" + cond + ") {" + bodyc + "}";
      if (!child) ifPart = this.tab + ifPart;
      if (!this.elseBody) return ifPart;
      return ifPart + ' else ' + (this.isChain ? (o.indent = this.tab, o.chainChild = true, this.elseBody.unwrap().compile(o, LEVEL_TOP)) : "{\n" + (this.elseBody.compile(o, LEVEL_TOP)) + "\n" + this.tab + "}");
    };

    If.prototype.compileExpression = function(o) {
      var alt, body, code, cond;
      cond = this.condition.compile(o, LEVEL_COND);
      body = this.bodyNode().compile(o, LEVEL_LIST);
      alt = this.elseBodyNode() ? this.elseBodyNode().compile(o, LEVEL_LIST) : 'void 0';
      code = "" + cond + " ? " + body + " : " + alt;
      if (o.level >= LEVEL_COND) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };

    If.prototype.unfoldSoak = function() {
      return this.soak && this;
    };

    return If;
  })(Base);

  exports.Package = Package = (function(_super) {

    __extends(Package, _super);

    Package.name = 'Package';

    Package.packages = {};

    Package.defined = {};

    function Package(namespace, definitions) {
      this.namespace = namespace;
      this.definitions = definitions;
    }

    Package.prototype.compile = function(o, lvl) {
      try {
        return Package.__super__.compile.call(this, o, lvl);
      } catch (ex) {
        Package.packages = {};
        Package.defined = {};
        throw ex;
      }
    };

    Package.prototype.compileNode = function(o) {
      var access, call, className, code, definition, isNode, item, key, literal, namespace, pack, whenCompile, _i, _j, _len, _len2, _name, _ref3, _ref4;
      pack = Package.packages;
      _ref3 = this.namespace;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        item = _ref3[_i];
        pack = pack[_name = item.compile(o)] || (pack[_name] = {});
      }
      namespace = this.namespace.slice();
      namespace = new Value(new Literal(namespace.shift().compile(o)), (function() {
        var _j, _len2, _results;
        _results = [];
        for (_j = 0, _len2 = namespace.length; _j < _len2; _j++) {
          item = namespace[_j];
          _results.push(new Access(new Literal(item.compile(o))));
        }
        return _results;
      })());
      literal = namespace.compile(o);
      if (literal in Package.defined) {
        throw new Error(("cannot create a package \"" + literal + "\",") + ("a class \"" + literal + "\" already exists"));
      }
      code = new Code([]);
      _ref4 = this.definitions;
      for (_j = 0, _len2 = _ref4.length; _j < _len2; _j++) {
        definition = _ref4[_j];
        if (!(definition instanceof Class)) continue;
        className = definition.determineName();
        if (className === null) {
          throw new Error("cannot create an anonymous class in the package \"" + literal + "\"");
        }
        if (className in pack) {
          throw new Error(("cannot create a class \"" + className + "\" in the package \"" + literal + "\", ") + ("a package \"" + literal + "." + className + "\" already exists"));
        }
        key = "" + literal + "." + className;
        if (key in Package.defined) {
          if (FileSystem && !o.filename) isNode = true;
          if (Import.rootFile && Import.rootFile === o.filename) {
            whenCompile = true;
          }
          if (isNode || whenCompile) continue;
          throw new Error("cannot override class \"" + key + "\"");
        } else {
          Package.defined[key] = true;
          access = new Value(new Literal("this"), [new Access(new Literal(className))]);
          code.body.push(new Assign(access, definition));
        }
      }
      code.body.push(new Literal("this"));
      code.body.makeReturn();
      code = new Value(code, [new Access(new Literal("call"))]);
      call = new Call(code, [namespace]);
      if (o.importingFile) o.sharedScope = true;
      return call.compile(o);
    };

    Package.flush = function(o) {
      var pack, packages, root;
      o = extend({}, o);
      o.indent += TAB;
      packages = (function() {
        var _ref3, _results;
        _ref3 = Package.packages;
        _results = [];
        for (root in _ref3) {
          pack = _ref3[root];
          _results.push([root, Package.object(o, pack)]);
        }
        return _results;
      })();
      Package.packages = {};
      Package.defined = {};
      return packages;
    };

    Package.object = function(o, object) {
      var key, properties, value;
      properties = [];
      for (key in object) {
        value = object[key];
        if (!{}.hasOwnProperty.call(object, key)) continue;
        properties.push("" + (new Literal(key).compile(o)) + ": " + (Package.object(o, value)));
      }
      return "{" + (properties.join(", ")) + "}";
    };

    return Package;
  })(Base);

  exports.Import = Import = (function(_super) {

    __extends(Import, _super);

    Import.name = 'Import';

    Import.imported = {};

    Import.properties = [];

    Import.rootFile = null;

    Import.importedDeclarations = {};

    function Import(searchPath, types) {
      this.searchPath = searchPath;
      if (types == null) types = {};
      this.isAbsolute = types.isAbsolute, this.isRelative = types.isRelative, this.isResolve = types.isResolve;
      if (!(this.isAbsolute || this.isRelative)) this.isResolve = true;
    }

    Import.prototype.filename = function(o) {
      var dir, location, ns, search;
      if (o == null) o = {};
      location = "" + (((function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.searchPath;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          ns = _ref3[_i];
          _results.push(ns.compile(o));
        }
        return _results;
      }).call(this)).join("/")) + ".coffee";
      dir = Path.dirname(Path.resolve(FileSystem.realpathSync("."), o.filename));
      if (this.isRelative) {
        return FileSystem.realpathSync(Path.resolve(dir, location));
      } else if (this.isAbsolute) {
        return FileSystem.realpathSync(Path.resolve("/" + location));
      } else if (this.isResolve) {
        search = function(pathes) {
          var error, file;
          file = Path.resolve.apply(Path, pathes.concat(location));
          try {
            return FileSystem.realpathSync(file);
          } catch (ex) {
            if (file === ("/" + location)) {
              error = new Error("ENOENT, no such file or directory '" + location + "', started in " + dir);
              error.code = "ENOENT";
              throw error;
            }
            return search(pathes.concat(".."));
          }
        };
        return search([dir]);
      }
    };

    Import.prototype.compile = function(o, lvl) {
      Import.rootFile || (Import.rootFile = o.filename);
      try {
        return Import.__super__.compile.call(this, o, lvl);
      } catch (ex) {
        Import.imported = {};
        Import.properties = [];
        Import.rootFile = null;
        Import.importedDeclarations = {};
        throw ex;
      }
    };

    Import.prototype.compileNode = function(o) {
      var args, call, filename, variable, word;
      variable = ("" + (this.searchPath[this.searchPath.length - 1].compile(o))).replace(/^\s+/, "");
      if (!(Path && FileSystem)) {
        o.scope.assign(variable, null);
        return "";
      }
      filename = this.filename(o);
      args = [this.checkImports(o, variable, filename)];
      if (!(Import.imported[filename] || o.importingFile === filename)) {
        args.push(new Literal("function(cl) { " + variable + " = cl; }"));
      }
      word = Import.rootFile !== o.filename ? "this" : "__imports";
      call = new Call(new Literal("" + word + ".get"), args);
      o.scope.assign(variable, call.compile(o));
      return "";
    };

    Import.prototype.checkImports = function(o, variable, file) {
      var call, code, lexer, literalKey, rel, relative;
      rel = Import.rootFile === "repl" ? "." : Import.rootFile;
      relative = (Path.relative(FileSystem.realpathSync(rel), file)).replace(/^(\.\.\/|\.\.\\\\)/, "");
      console.log(relative);
      if (relative === "") {
        literalKey = new Literal("\"" + (Path.basename(file)) + "\"");
      } else {
        literalKey = new Literal("\"" + relative + "\"");
      }
      if (!(file in Import.imported)) {
        Import.imported[file] = false;
        o = extend({}, o);
        if (o.bare) o.wasBare = true;
        o.indent = o.wasBare ? "" + TAB + TAB : "" + TAB + TAB + TAB;
        o.scope = new Scope(o.scope);
        o.filename = file;
        lexer = new Lexer();
        code = new Code([]);
        code.body.push(parser.parse(lexer.tokenize(FileSystem.readFileSync(file, 'utf8'))));
        code.body.push(new Literal(variable));
        code.body.makeReturn();
        code = new Value(code, [new Access(new Literal("call"))]);
        call = new Call(code, [new Literal("this")]);
        o.importingFile = file;
        Import.properties.push([literalKey, new Literal(call.compile(o))]);
        Import.imported[file] = true;
        if (relative === "") {
          Import.importedDeclarations[variable] = new Call(new Literal("__imports.get"), [literalKey]);
        }
      }
      return literalKey;
    };

    Import.flush = function(o) {
      try {
        if (!Import.properties.length) return;
        return ["__imports", Import.assignImports(o)];
      } finally {
        Import.imported = {};
        Import.properties = [];
        Import.rootFile = null;
        Import.importedDeclarations = {};
      }
    };

    Import.assignImports = function(o) {
      var call, code, properties, property, thisLit, value, values, _i, _len, _ref3;
      o = extend({}, o);
      o.indent += TAB;
      properties = {
        list: new Literal("{}"),
        delayed: new Literal("[]"),
        put: new Literal("function(path, code) { " + "this.list[path] = code; " + "}"),
        get: new Literal("function(path, delayed) { " + "if (delayed) " + "this.delayed.push([path, delayed]); " + "return this.list[path]; " + "}")
      };
      thisLit = new Literal("this");
      code = new Code([]);
      for (property in properties) {
        value = properties[property];
        code.body.push(new Assign(new Value(thisLit, [new Access(new Literal(property))]), value));
      }
      _ref3 = Import.properties;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        values = _ref3[_i];
        code.body.push(new Call(new Value(thisLit, [new Access(new Literal("put"))]), values));
      }
      code.body.push(new Literal("(function(a, b, c) { " + "while (c = a.shift()) { " + "c[1](b[c[0]]); " + "} " + "})(this.delayed, this.list)"));
      code.body.push(new Literal("this"));
      code.body.makeReturn();
      code = new Value(code, [new Access(new Literal("call"))]);
      call = new Call(code, [new Literal("{}")]);
      return call.compile(o);
    };

    Import.importedDeclaration = function(o, variable) {
      if (variable === null) return null;
      if (!(variable in Import.importedDeclarations)) return null;
      if (o.scope !== Scope.root) return null;
      return new Assign(new Literal(variable), Import.importedDeclarations[variable]);
    };

    return Import;
  })(Base);

  Closure = {
    wrap: function(expressions, statement, noReturn) {
      var args, call, func, mentionsArgs, meth;
      if (expressions.jumps()) return expressions;
      func = new Code([], Block.wrap([expressions]));
      args = [];
      if ((mentionsArgs = expressions.contains(this.literalArgs)) || expressions.contains(this.literalThis)) {
        meth = new Literal(mentionsArgs ? 'apply' : 'call');
        args = [new Literal('this')];
        if (mentionsArgs) args.push(new Literal('arguments'));
        func = new Value(func, [new Access(meth)]);
      }
      func.noReturn = noReturn;
      call = new Call(func, args);
      if (statement) {
        return Block.wrap([call]);
      } else {
        return call;
      }
    },
    literalArgs: function(node) {
      return node instanceof Literal && node.value === 'arguments' && !node.asKey;
    },
    literalThis: function(node) {
      return (node instanceof Literal && node.value === 'this' && !node.asKey) || (node instanceof Code && node.bound);
    }
  };

  unfoldSoak = function(o, parent, name) {
    var ifn;
    if (!(ifn = parent[name].unfoldSoak(o))) return;
    parent[name] = ifn.body;
    ifn.body = new Value(parent);
    return ifn;
  };

  UTILITIES = {
    "extends": function() {
      return "function(child, parent) { for (var key in parent) { if (" + (utility('hasProp')) + ".call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; }";
    },
    bind: function() {
      return 'function(fn, me) { return function(){ return fn.apply(me, arguments); }; }';
    },
    indexOf: function() {
      return "[].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }";
    },
    hasProp: function() {
      return '{}.hasOwnProperty';
    },
    slice: function() {
      return '[].slice';
    }
  };

  LEVEL_TOP = 1;

  LEVEL_PAREN = 2;

  LEVEL_LIST = 3;

  LEVEL_COND = 4;

  LEVEL_OP = 5;

  LEVEL_ACCESS = 6;

  TAB = '  ';

  IDENTIFIER_STR = "[$A-Za-z_\\x7f-\\uffff][$\\w\\x7f-\\uffff]*";

  IDENTIFIER = RegExp("^" + IDENTIFIER_STR + "$");

  SIMPLENUM = /^[+-]?\d+$/;

  METHOD_DEF = RegExp("^(?:(" + IDENTIFIER_STR + ")\\.prototype(?:\\.(" + IDENTIFIER_STR + ")|\\[(\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"|'(?:[^\\\\'\\r\\n]|\\\\.)*')\\]|\\[(0x[\\da-fA-F]+|\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\]))|(" + IDENTIFIER_STR + ")$");

  IS_STRING = /^['"]/;

  utility = function(name) {
    var ref;
    ref = "__" + name;
    Scope.poof.assign(ref, UTILITIES[name]());
    return ref;
  };

  multident = function(code, tab) {
    code = code.replace(/\n/g, '$&' + tab);
    return code.replace(/\s+$/, '');
  };

}).call(this);

};require['./coffee-script'] = new function() {
  var exports = this;
  // Generated by Caffeine 0.1.5
(function() {
  var Lexer, RESERVED, compile, fs, lexer, parser, path, vm, _ref,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  path = require('path');

  _ref = require('./lexer'), Lexer = _ref.Lexer, RESERVED = _ref.RESERVED;

  parser = require('./parser').parser;

  vm = require('vm');

  if (require.extensions) {
    require.extensions['.coffee'] = function(module, filename) {
      var content;
      content = compile(fs.readFileSync(filename, 'utf8'), {
        filename: filename
      });
      return module._compile(content, filename);
    };
  } else if (require.registerExtension) {
    require.registerExtension('.coffee', function(content) {
      return compile(content);
    });
  }

  exports.VERSION = '0.1.5';

  exports.RESERVED = RESERVED;

  exports.helpers = require('./helpers');

  exports.compile = compile = function(code, options) {
    var header, js, merge;
    if (options == null) options = {};
    merge = exports.helpers.merge;
    try {
      js = (parser.parse(lexer.tokenize(code))).compile(options);
      if (!options.header) return js;
    } catch (err) {
      if (options.filename) {
        err.message = "In " + options.filename + ", " + err.message;
      }
      throw err;
    }
    header = "Generated by Caffeine " + this.VERSION;
    return "// " + header + "\n" + js;
  };

  exports.tokens = function(code, options) {
    return lexer.tokenize(code, options);
  };

  exports.nodes = function(source, options) {
    if (typeof source === 'string') {
      return parser.parse(lexer.tokenize(source, options));
    } else {
      return parser.parse(source);
    }
  };

  exports.run = function(code, options) {
    var mainModule;
    if (options == null) options = {};
    mainModule = require.main;
    mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : '.';
    mainModule.moduleCache && (mainModule.moduleCache = {});
    mainModule.paths = require('module')._nodeModulePaths(path.dirname(options.filename));
    if (path.extname(mainModule.filename) !== '.coffee' || require.extensions) {
      return mainModule._compile(compile(code, options), mainModule.filename);
    } else {
      return mainModule._compile(code, mainModule.filename);
    }
  };

  exports["eval"] = function(code, options) {
    var Module, Script, js, k, o, r, sandbox, v, _i, _len, _module, _ref2, _ref3, _require;
    if (options == null) options = {};
    if (!(code = code.trim())) return;
    Script = vm.Script;
    if (Script) {
      if (options.sandbox != null) {
        if (options.sandbox instanceof Script.createContext().constructor) {
          sandbox = options.sandbox;
        } else {
          sandbox = Script.createContext();
          _ref2 = options.sandbox;
          for (k in _ref2) {
            if (!__hasProp.call(_ref2, k)) continue;
            v = _ref2[k];
            sandbox[k] = v;
          }
        }
        sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
      } else {
        sandbox = global;
      }
      sandbox.__filename = options.filename || 'eval';
      sandbox.__dirname = path.dirname(sandbox.__filename);
      if (!(sandbox !== global || sandbox.module || sandbox.require)) {
        Module = require('module');
        sandbox.module = _module = new Module(options.modulename || 'eval');
        sandbox.require = _require = function(path) {
          return Module._load(path, _module, true);
        };
        _module.filename = sandbox.__filename;
        _ref3 = Object.getOwnPropertyNames(require);
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          r = _ref3[_i];
          if (r !== 'paths') _require[r] = require[r];
        }
        _require.paths = _module.paths = Module._nodeModulePaths(process.cwd());
        _require.resolve = function(request) {
          return Module._resolveFilename(request, _module);
        };
      }
    }
    o = {};
    for (k in options) {
      if (!__hasProp.call(options, k)) continue;
      v = options[k];
      o[k] = v;
    }
    o.bare = true;
    js = compile(code, o);
    if (sandbox === global) {
      return vm.runInThisContext(js);
    } else {
      return vm.runInContext(js, sandbox);
    }
  };

  lexer = new Lexer;

  parser.lexer = {
    lex: function() {
      var tag, _ref2;
      _ref2 = this.tokens[this.pos++] || [''], tag = _ref2[0], this.yytext = _ref2[1], this.yylineno = _ref2[2];
      return tag;
    },
    setInput: function(tokens) {
      this.tokens = tokens;
      return this.pos = 0;
    },
    upcomingInput: function() {
      return "";
    }
  };

  parser.yy = require('./nodes');

}).call(this);

};require['./browser'] = new function() {
  var exports = this;
  // Generated by Caffeine 0.1.5
(function() {
  var CoffeeScript, runScripts;

  CoffeeScript = require('./coffee-script');

  CoffeeScript.require = require;

  CoffeeScript["eval"] = function(code, options) {
    return eval(CoffeeScript.compile(code, options));
  };

  CoffeeScript.run = function(code, options) {
    if (options == null) options = {};
    options.bare = true;
    return Function(CoffeeScript.compile(code, options))();
  };

  if (typeof window === "undefined" || window === null) return;

  CoffeeScript.load = function(url, callback) {
    var xhr;
    xhr = new (window.ActiveXObject || XMLHttpRequest)('Microsoft.XMLHTTP');
    xhr.open('GET', url, true);
    if ('overrideMimeType' in xhr) xhr.overrideMimeType('text/plain');
    xhr.onreadystatechange = function() {
      var _ref;
      if (xhr.readyState === 4) {
        if ((_ref = xhr.status) === 0 || _ref === 200) {
          CoffeeScript.run(xhr.responseText);
        } else {
          throw new Error("Could not load " + url);
        }
        if (callback) return callback();
      }
    };
    return xhr.send(null);
  };

  runScripts = function() {
    var coffees, execute, index, length, s, scripts;
    scripts = document.getElementsByTagName('script');
    coffees = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        s = scripts[_i];
        if (s.type === 'text/coffeescript') _results.push(s);
      }
      return _results;
    })();
    index = 0;
    length = coffees.length;
    (execute = function() {
      var script;
      script = coffees[index++];
      if ((script != null ? script.type : void 0) === 'text/coffeescript') {
        if (script.src) {
          return CoffeeScript.load(script.src, execute);
        } else {
          CoffeeScript.run(script.innerHTML);
          return execute();
        }
      }
    })();
    return null;
  };

  if (window.addEventListener) {
    addEventListener('DOMContentLoaded', runScripts, false);
  } else {
    attachEvent('onload', runScripts);
  }

}).call(this);

};
    return require['./coffee-script'];
  }();

  if (typeof define === 'function' && define.amd) {
    define(function() { return CoffeeScript; });
  } else { 
    root.CoffeeScript = CoffeeScript; 
  }
}(this));